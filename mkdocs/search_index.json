{
    "docs": [
        {
            "location": "/", 
            "text": "", 
            "title": "Index"
        }, 
        {
            "location": "/quickstart/", 
            "text": "QuickStart\n\n\nNodeJS v 8.9\n and higher required to start.\nCodeceptJS is multi-backend testing framework. In this guide we will use webdriverio as backend but the same rules applies to other backends like Protractor or Nightmare.\n\n\nInstall Globally:\n\n\n[sudo] npm install -g codeceptjs\n\n\n\n\nExecute codeceptjs as:\n\n\ncodeceptjs\n\n\n\n\nInstall Locally\n\n\nnpm install codeceptjs --save-dev\n\n\n\n\nExecute codeceptjs as:\n\n\n./node_modules/.bin/codeceptjs\n\n\n\n\nSetup\n\n\nInitialize CodeceptJS running:\n\n\ncodeceptjs init\n\n\n\n\nIt will create \ncodecept.json\n config in current directory (or provide path in the first argument).\n\n\nYou will be asked for tests location (they will be searched in current dir by default).\n\n\nOn next step you are asked to select \nHelpers\n. Helpers include actions which can be used in tests.\nWe recommend to start with \nWebDriverIO\n helper in order to write acceptance tests using webdriverio library and Selenium Server as test runner.\n\n\nIf you want to test AngularJS application, use Protractor helper, or if you are more familiar with official Selenium Webdriver JS library, choose it.\nNo matter what helper you've chosen they will be similar in use.\n\n\n? What helpers do you want to use?\n\u276f\u25c9 WebDriverIO\n \u25ef Protractor\n \u25ef Puppeteer\n \u25ef Appium\n \u25ef Nightmare\n \u25ef FileSystem\n\n\n\n\nThen you will be asked for an output directory. Logs, reports, and failure screenshots will be placed there.\n\n\n? Where should logs, screenshots, and reports to be stored? ./output\n\n\n\n\nIf you are going to extend test suite by writing custom steps you should probably agree to create \nsteps_file.js\n\n\n? Would you like to extend I object with custom steps? Yes\n? Where would you like to place custom steps? ./steps_file.js\n\n\n\n\nWebDriverIO helper will ask for additional configuration as well:\n\n\n? [WebDriverIO] Base url of site to be tested http://localhost\n? [WebDriverIO] Browser in which testing will be performed (chrome)\n\n\n\n\nIf you agree with defaults, finish the installation.\n\n\nInstalling Backends\n\n\nTo run CodeceptJS you will need to install a corresponding backend for the helepr you've choosen. \nWebDriverIO\n helper requires \nwebdriverio\n package to be installed. The init command will notify you what libraries are missing so you could install it:\n\n\n\n\nGlobal installation\n\n\n\n\nPlease install dependent packages globally: npm -g install  webdriverio@^4.0.0\n\n\n\n\n\n\nLocal installation\n\n\n\n\nPlease install dependent packages locally: npm install --save-dev webdriverio@^4.0.0\n\n\n\n\nPlease follow this steps and install required package.\n\n\nCreating First Test\n\n\nTests can be easily created by running\n\n\ncodeceptjs gt\n\n\n\n\n(or \ngenerate test\n)\n\n\nProvide a test name and open generated file in your favorite JavaScript editor (with ES6 support).\n\n\nFeature('My First Test');\n\nScenario('test something', (I) =\n {\n\n});\n\n\n\n\nInside the scenario block you can write your first test scenario by using \nactions from WebDriverIO helper\n. Let's assume we have a web server on \nlocalhost\n is running and there is a \nWelcome\n text on the first page. The simplest test will look like this:\n\n\nFeature('My First Test');\n\nScenario('test something', (I) =\n {\n  I.amOnPage('/');\n  I.see('Welcome');\n});\n\n\n\n\nPrepare Selenium Server\n\n\nTo execute tests in Google Chrome browser running Selenium Server with ChromeDriver is required.\n\n\nUse \nselenium-standalone\n from NPM to install and run them:\n\n\n[sudo] npm install -g selenium-standalone\nselenium-standalone install\nselenium-standalone start\n\n\n\n\nAlternatively \nSelenium Server\n with \nChromeDriver\n can be installed and started manually.\n\n\nRun\n\n\nExecute tests:\n\n\ncodeceptjs run --steps\n\n\n\n\n( \nsteps option will display test execution process in console.\n )\n\n\nIf everything is done right, you will see in console:\n\n\nMy First Test --\n  test something\n   \u2022 I am on page \n/\n\n   \u2022 I see \nWelcome\n\n \u2713 OK\n\n\n\n\nCongrats! Your first test is running\n\n\nWasn't so hard, right?", 
            "title": "Quickstart"
        }, 
        {
            "location": "/quickstart/#quickstart", 
            "text": "NodeJS v 8.9  and higher required to start.\nCodeceptJS is multi-backend testing framework. In this guide we will use webdriverio as backend but the same rules applies to other backends like Protractor or Nightmare.  Install Globally:  [sudo] npm install -g codeceptjs  Execute codeceptjs as:  codeceptjs  Install Locally  npm install codeceptjs --save-dev  Execute codeceptjs as:  ./node_modules/.bin/codeceptjs", 
            "title": "QuickStart"
        }, 
        {
            "location": "/quickstart/#setup", 
            "text": "Initialize CodeceptJS running:  codeceptjs init  It will create  codecept.json  config in current directory (or provide path in the first argument).  You will be asked for tests location (they will be searched in current dir by default).  On next step you are asked to select  Helpers . Helpers include actions which can be used in tests.\nWe recommend to start with  WebDriverIO  helper in order to write acceptance tests using webdriverio library and Selenium Server as test runner.  If you want to test AngularJS application, use Protractor helper, or if you are more familiar with official Selenium Webdriver JS library, choose it.\nNo matter what helper you've chosen they will be similar in use.  ? What helpers do you want to use?\n\u276f\u25c9 WebDriverIO\n \u25ef Protractor\n \u25ef Puppeteer\n \u25ef Appium\n \u25ef Nightmare\n \u25ef FileSystem  Then you will be asked for an output directory. Logs, reports, and failure screenshots will be placed there.  ? Where should logs, screenshots, and reports to be stored? ./output  If you are going to extend test suite by writing custom steps you should probably agree to create  steps_file.js  ? Would you like to extend I object with custom steps? Yes\n? Where would you like to place custom steps? ./steps_file.js  WebDriverIO helper will ask for additional configuration as well:  ? [WebDriverIO] Base url of site to be tested http://localhost\n? [WebDriverIO] Browser in which testing will be performed (chrome)  If you agree with defaults, finish the installation.", 
            "title": "Setup"
        }, 
        {
            "location": "/quickstart/#installing-backends", 
            "text": "To run CodeceptJS you will need to install a corresponding backend for the helepr you've choosen.  WebDriverIO  helper requires  webdriverio  package to be installed. The init command will notify you what libraries are missing so you could install it:   Global installation   Please install dependent packages globally: npm -g install  webdriverio@^4.0.0   Local installation   Please install dependent packages locally: npm install --save-dev webdriverio@^4.0.0  Please follow this steps and install required package.", 
            "title": "Installing Backends"
        }, 
        {
            "location": "/quickstart/#creating-first-test", 
            "text": "Tests can be easily created by running  codeceptjs gt  (or  generate test )  Provide a test name and open generated file in your favorite JavaScript editor (with ES6 support).  Feature('My First Test');\n\nScenario('test something', (I) =  {\n\n});  Inside the scenario block you can write your first test scenario by using  actions from WebDriverIO helper . Let's assume we have a web server on  localhost  is running and there is a  Welcome  text on the first page. The simplest test will look like this:  Feature('My First Test');\n\nScenario('test something', (I) =  {\n  I.amOnPage('/');\n  I.see('Welcome');\n});", 
            "title": "Creating First Test"
        }, 
        {
            "location": "/quickstart/#prepare-selenium-server", 
            "text": "To execute tests in Google Chrome browser running Selenium Server with ChromeDriver is required.  Use  selenium-standalone  from NPM to install and run them:  [sudo] npm install -g selenium-standalone\nselenium-standalone install\nselenium-standalone start  Alternatively  Selenium Server  with  ChromeDriver  can be installed and started manually.", 
            "title": "Prepare Selenium Server"
        }, 
        {
            "location": "/quickstart/#run", 
            "text": "Execute tests:  codeceptjs run --steps  (  steps option will display test execution process in console.  )  If everything is done right, you will see in console:  My First Test --\n  test something\n   \u2022 I am on page  / \n   \u2022 I see  Welcome \n \u2713 OK", 
            "title": "Run"
        }, 
        {
            "location": "/quickstart/#congrats-your-first-test-is-running", 
            "text": "Wasn't so hard, right?", 
            "title": "Congrats! Your first test is running"
        }, 
        {
            "location": "/video/", 
            "text": "Video\n\n\nEducational videos provided by our community member \n@ontytoom\n.\n\n\n1. Installation\n\n\n\n\n\n2. Creating a Test\n\n\n\n\n\n3. Using Page Objects", 
            "title": "Video"
        }, 
        {
            "location": "/video/#video", 
            "text": "Educational videos provided by our community member  @ontytoom .  1. Installation   2. Creating a Test   3. Using Page Objects", 
            "title": "Video"
        }, 
        {
            "location": "/basics/", 
            "text": "Basics\n\n\nCodeceptJS is a modern end to end testing framework with a special BDD-style syntax. The test is written as a linear scenario of user's action on a site.\n\n\nFeature('CodeceptJS demo');\n\nScenario('check Welcome page on site', (I) =\n {\n  I.amOnPage('/');\n  I.see('Welcome');\n})\n\n\n\n\nTests are expected to be written in ECMAScript 6.\nEach test is described inside a \nScenario\n function with \nI\n object passed into it.\nI object is an \nactor\n, an abstraction for a testing user. I is a proxy object for currently enabled \nHelpers\n.\n\n\n  \nhelpers\n: {\n    \nWebDriverIO\n: {\n      \nurl\n: \nhttp://localhost\n,\n      \nbrowser\n: \nchrome\n\n    }\n  }\n\n\n\n\nFor current config all methods of \nI\n will be taken from \nWebDriverIO\n helper.\nThis is done to allow easy switching of running backends so you could replace WebDriverIO with Protractor or Nightmare helpers.\n\n\nHow It Works\n\n\nTests are written in synchronous way. Test scenarios should be linear, so tests by themselves should not include promises or callbacks as well.\nHowever, behind the scene \nall actions are wrapped in promises\n inside the \nI\n object.\n\nGlobal promise\n chain is initialized before each test and all \nI.*\n calls will be appended to it as well as setup and teardown.\n\n\nIf you want to get information from a running test you can use \nawait\n inside \nasync function\n and special methods of helpers started with \ngrab\n prefix.\n\n\nScenario('try grabbers', async (I) =\n {\n  var title = await I.grabTitle();\n});\n\n\n\n\nthen you can use those variables in assertions:\n\n\nvar title = await I.grabTitle();\nvar assert = require('assert');\nassert.equal(title, 'CodeceptJS');\n\n\n\n\nDebug\n\n\nPause\n\n\nTest execution can be paused in any place of a test with \npause()\n call.\nThis also launches interactive console where you can call actions of \nI\n object.\n\n\n\n\nYou can also use \npause()\n to check the web application in a browser. Press \nENTER\n to resume test execution.\n\n\nTo \ndebug test step-by-step\n type \nnext\n and press Enter. The next step will be executed and interactive shell will be shown again.\n\n\nTo see all available commands press TAB two times to see list of all actions included in I.\n\n\nIf a test is failing you can prevent browser from closing by putting \npause()\n command into \nAfter()\n hook. This is very helpful to debug failing tests. This way you can keep the same session and try different actions on a page to get the idea what went wrong.\n\n\nAfter(pause);\n\n\n\n\nInteractive shell can be started outside the test context by running\n\n\ncodeceptjs shell\n\n\n\n\nScreenshot on failure\n\n\nBy default CodeceptJS saves a screenshot of a failed test.\nThis can be configured in \nscreenshotOnFail Plugin\n\n\nStep By Step Report\n\n\nTo see how the test was executed, use \nstepByStepReport Plugin\n. It saves a screenshot of each passed step and shows them in a nice slideshow.\n\n\nBefore\n\n\nCommon preparation steps like opening a web page, logging in a user, can be placed in \nBefore\n or \nBackground\n hook:\n\n\nFeature('CodeceptJS Demonstration');\n\nBefore((I) =\n { // or Background\n  I.amOnPage('/documentation');\n});\n\nScenario('test some forms', (I) =\n {\n  I.click('Create User');\n  I.see('User is valid');\n  I.dontSeeInCurrentUrl('/documentation');\n});\n\nScenario('test title', (I) =\n {\n  I.seeInTitle('Example application');\n});\n\n\n\n\nSame as \nBefore\n you can use \nAfter\n to run teardown for each scenario.\n\n\nBeforeSuite\n\n\nIf you need to run complex setup before all tests and teardown this afterwards you can use \nBeforeSuite\n and \nAfterSuite\n\nfunctions. \nBeforeSuite\n and \nAfterSuite\n have access to \nI\n object, but \nBeforeSuite/AfterSuite\n don't have an access to the browser because it's not running at this moment.\nYou can use them to execute handlers that will setup your environment. \nBeforeSuite/AfterSuite\n will work  only for a file where it was declared (so you can declare different setups for files)\n\n\nBeforeSuite((I) =\n {\n  I.syncDown('testfolder');\n});\n\nAfterSuite((I) =\n {\n  I.syncUp('testfolder');\n  I.clearDir('testfolder');\n});\n\n\n\n\nHere are some ideas\n where to use BeforeSuite hooks.\n\n\nWithin\n\n\nTo specify the exact area on a page where actions can be performed you can use \nwithin\n function.\nEverything executed in its context will be narrowed to context specified by locator:\n\n\nUsage: \nwithin('section', ()=\n{})\n\n\nI.amOnPage('https://github.com');\nwithin('.js-signup-form', () =\n {\n  I.fillField('user[login]', 'User');\n  I.fillField('user[email]', 'user@user.com');\n  I.fillField('user[password]', 'user@user.com');\n  I.click('button');\n});\nI.see('There were problems creating your account.');\n\n\n\n\nwithin\n can also work with \niframes\n\n\nWhen running steps inside a within block will be shown with a shift:\n\n\n\n\nWithin can return a value which can be used in a scenario:\n\n\n// inside async function\nconst val = await within('#sidebar', () =\n {\n  return I.grabTextFrom({ css: 'h1' });\n});\nI.fillField('Description', val);\n\n\n\n\nComments\n\n\nThere is a simple way to add additional comments to your test scenario.\nUse \nsay\n command to print information to screen:\n\n\nI.say('I am going to publish post');\nI.say('I enter title and body');\nI.say('I expect post is visible on site');\n\n\n\n\nIntelliSense\n\n\nIf you are using Visual Studio Code or other IDE that supports TypeScript Definitions,\nyou can generate step definitions with\n\n\ncodeceptjs def\n\n\n\n\nNow you should include \n/// \nreference path=\"./steps.d.ts\" /\n into your test files to get\nmethod autocompletion while writing tests.\n\n\nSkipping\n\n\nLike in Mocha you can use \nx\n and \nonly\n to skip tests or making a single test to run.\n\n\n\n\nxScenario\n - skips current test\n\n\nScenario.only\n - executes only the current test\n\n\n\n\nRetries\n\n\nRetry Step\n\n\nIf you have a step which often fails you can retry execution for this single step.\nUse \nretry()\n function before an action to ask CodeceptJS to retry this step on failure:\n\n\nI.retry().see('Welcome');\n\n\n\n\nIf you'd like to retry step more than once pass the amount as parameter:\n\n\nI.retry(3).see('Welcome');\n\n\n\n\nAdditional options can be provided to retry so you can set the additional options (defined in \npromise-retry\n library).\n\n\n// retry action 3 times waiting for 0.1 second before next try\nI.retry({ retries: 3, minTimeout: 100 }).see('Hello');\n\n// retry action 3 times waiting no more than 3 seconds for last retry\nI.retry({ retries: 3, maxTimeout: 3000 }).see('Hello');\n\n// retry 2 times if error with message 'Node not visible' happens\nI.retry({\n  retries: 2,\n  when: err =\n err.message === 'Node not visible'\n}).seeElement('#user');\n\n\n\n\nPass a function to \nwhen\n option to  retry only when error matches the expected one.\n\n\nRetry Scenario\n\n\nWhen you need to rerun scenarios few times just add \nretries\n option added to \nScenario\n declaration.\n\n\nCodeceptJS implements retries the same way \nMocha do\n;\nYou can set number of a retries for a feature:\n\n\nScenario('Really complex', (I) =\n {\n  // test goes here\n}).retry(2);\n\n// alternative\nScenario('Really complex', { retries: 2 }, (I) =\n {});\n\n\n\n\nThis scenario will be restarted two times on a failure.\n\n\nRetry Feature\n\n\nTo set this option for all scenarios in a file, add retry to a feature:\n\n\nFeature('Complex JS Stuff').retry(3);\n\n\n\n\nEvery Scenario inside this feature will be rerun 3 times.\nYou can make an exception for a specific scenario by passing \nretries\n option to a Scenario.\n\n\nTest Options\n\n\nFeatures and Scenarios have their options that can be set by passing a hash after their names:\n\n\nFeature('My feature', {key: val});\n\nScenario('My scenario', {key: val}, (I) =\n {});\n\n\n\n\nTimeout\n\n\nBy default there is no timeout for tests, however you can change this value for a specific suite:\n\n\nFeature('Stop me').timeout(5000); // set timeout to 5s\n\n\n\n\nor for the test:\n\n\n// set timeout to 1s\nScenario(\nStop me faster\n, (I) =\n {\n  // test goes here\n}).timeout(1000);\n\n// alternative\nScenario(\nStop me faster\n, {timeout: 1000}, (I) =\n {});\n\n// disable timeout for this scenario\nScenario(\nDon't stop me\n, {timeout: 0}, (I) =\n {});\n\n\n\n\n\n\ndone()", 
            "title": "Basics"
        }, 
        {
            "location": "/basics/#basics", 
            "text": "CodeceptJS is a modern end to end testing framework with a special BDD-style syntax. The test is written as a linear scenario of user's action on a site.  Feature('CodeceptJS demo');\n\nScenario('check Welcome page on site', (I) =  {\n  I.amOnPage('/');\n  I.see('Welcome');\n})  Tests are expected to be written in ECMAScript 6.\nEach test is described inside a  Scenario  function with  I  object passed into it.\nI object is an  actor , an abstraction for a testing user. I is a proxy object for currently enabled  Helpers .     helpers : {\n     WebDriverIO : {\n       url :  http://localhost ,\n       browser :  chrome \n    }\n  }  For current config all methods of  I  will be taken from  WebDriverIO  helper.\nThis is done to allow easy switching of running backends so you could replace WebDriverIO with Protractor or Nightmare helpers.", 
            "title": "Basics"
        }, 
        {
            "location": "/basics/#how-it-works", 
            "text": "Tests are written in synchronous way. Test scenarios should be linear, so tests by themselves should not include promises or callbacks as well.\nHowever, behind the scene  all actions are wrapped in promises  inside the  I  object. Global promise  chain is initialized before each test and all  I.*  calls will be appended to it as well as setup and teardown.  If you want to get information from a running test you can use  await  inside  async function  and special methods of helpers started with  grab  prefix.  Scenario('try grabbers', async (I) =  {\n  var title = await I.grabTitle();\n});  then you can use those variables in assertions:  var title = await I.grabTitle();\nvar assert = require('assert');\nassert.equal(title, 'CodeceptJS');", 
            "title": "How It Works"
        }, 
        {
            "location": "/basics/#debug", 
            "text": "Pause  Test execution can be paused in any place of a test with  pause()  call.\nThis also launches interactive console where you can call actions of  I  object.   You can also use  pause()  to check the web application in a browser. Press  ENTER  to resume test execution.  To  debug test step-by-step  type  next  and press Enter. The next step will be executed and interactive shell will be shown again.  To see all available commands press TAB two times to see list of all actions included in I.  If a test is failing you can prevent browser from closing by putting  pause()  command into  After()  hook. This is very helpful to debug failing tests. This way you can keep the same session and try different actions on a page to get the idea what went wrong.  After(pause);  Interactive shell can be started outside the test context by running  codeceptjs shell  Screenshot on failure  By default CodeceptJS saves a screenshot of a failed test.\nThis can be configured in  screenshotOnFail Plugin", 
            "title": "Debug"
        }, 
        {
            "location": "/basics/#step-by-step-report", 
            "text": "To see how the test was executed, use  stepByStepReport Plugin . It saves a screenshot of each passed step and shows them in a nice slideshow.", 
            "title": "Step By Step Report"
        }, 
        {
            "location": "/basics/#before", 
            "text": "Common preparation steps like opening a web page, logging in a user, can be placed in  Before  or  Background  hook:  Feature('CodeceptJS Demonstration');\n\nBefore((I) =  { // or Background\n  I.amOnPage('/documentation');\n});\n\nScenario('test some forms', (I) =  {\n  I.click('Create User');\n  I.see('User is valid');\n  I.dontSeeInCurrentUrl('/documentation');\n});\n\nScenario('test title', (I) =  {\n  I.seeInTitle('Example application');\n});  Same as  Before  you can use  After  to run teardown for each scenario.", 
            "title": "Before"
        }, 
        {
            "location": "/basics/#beforesuite", 
            "text": "If you need to run complex setup before all tests and teardown this afterwards you can use  BeforeSuite  and  AfterSuite \nfunctions.  BeforeSuite  and  AfterSuite  have access to  I  object, but  BeforeSuite/AfterSuite  don't have an access to the browser because it's not running at this moment.\nYou can use them to execute handlers that will setup your environment.  BeforeSuite/AfterSuite  will work  only for a file where it was declared (so you can declare different setups for files)  BeforeSuite((I) =  {\n  I.syncDown('testfolder');\n});\n\nAfterSuite((I) =  {\n  I.syncUp('testfolder');\n  I.clearDir('testfolder');\n});  Here are some ideas  where to use BeforeSuite hooks.", 
            "title": "BeforeSuite"
        }, 
        {
            "location": "/basics/#within", 
            "text": "To specify the exact area on a page where actions can be performed you can use  within  function.\nEverything executed in its context will be narrowed to context specified by locator:  Usage:  within('section', ()= {})  I.amOnPage('https://github.com');\nwithin('.js-signup-form', () =  {\n  I.fillField('user[login]', 'User');\n  I.fillField('user[email]', 'user@user.com');\n  I.fillField('user[password]', 'user@user.com');\n  I.click('button');\n});\nI.see('There were problems creating your account.');  within  can also work with  iframes  When running steps inside a within block will be shown with a shift:   Within can return a value which can be used in a scenario:  // inside async function\nconst val = await within('#sidebar', () =  {\n  return I.grabTextFrom({ css: 'h1' });\n});\nI.fillField('Description', val);", 
            "title": "Within"
        }, 
        {
            "location": "/basics/#comments", 
            "text": "There is a simple way to add additional comments to your test scenario.\nUse  say  command to print information to screen:  I.say('I am going to publish post');\nI.say('I enter title and body');\nI.say('I expect post is visible on site');", 
            "title": "Comments"
        }, 
        {
            "location": "/basics/#intellisense", 
            "text": "If you are using Visual Studio Code or other IDE that supports TypeScript Definitions,\nyou can generate step definitions with  codeceptjs def  Now you should include  ///  reference path=\"./steps.d.ts\" /  into your test files to get\nmethod autocompletion while writing tests.", 
            "title": "IntelliSense"
        }, 
        {
            "location": "/basics/#skipping", 
            "text": "Like in Mocha you can use  x  and  only  to skip tests or making a single test to run.   xScenario  - skips current test  Scenario.only  - executes only the current test", 
            "title": "Skipping"
        }, 
        {
            "location": "/basics/#retries", 
            "text": "Retry Step  If you have a step which often fails you can retry execution for this single step.\nUse  retry()  function before an action to ask CodeceptJS to retry this step on failure:  I.retry().see('Welcome');  If you'd like to retry step more than once pass the amount as parameter:  I.retry(3).see('Welcome');  Additional options can be provided to retry so you can set the additional options (defined in  promise-retry  library).  // retry action 3 times waiting for 0.1 second before next try\nI.retry({ retries: 3, minTimeout: 100 }).see('Hello');\n\n// retry action 3 times waiting no more than 3 seconds for last retry\nI.retry({ retries: 3, maxTimeout: 3000 }).see('Hello');\n\n// retry 2 times if error with message 'Node not visible' happens\nI.retry({\n  retries: 2,\n  when: err =  err.message === 'Node not visible'\n}).seeElement('#user');  Pass a function to  when  option to  retry only when error matches the expected one.  Retry Scenario  When you need to rerun scenarios few times just add  retries  option added to  Scenario  declaration.  CodeceptJS implements retries the same way  Mocha do ;\nYou can set number of a retries for a feature:  Scenario('Really complex', (I) =  {\n  // test goes here\n}).retry(2);\n\n// alternative\nScenario('Really complex', { retries: 2 }, (I) =  {});  This scenario will be restarted two times on a failure.  Retry Feature  To set this option for all scenarios in a file, add retry to a feature:  Feature('Complex JS Stuff').retry(3);  Every Scenario inside this feature will be rerun 3 times.\nYou can make an exception for a specific scenario by passing  retries  option to a Scenario.", 
            "title": "Retries"
        }, 
        {
            "location": "/basics/#test-options", 
            "text": "Features and Scenarios have their options that can be set by passing a hash after their names:  Feature('My feature', {key: val});\n\nScenario('My scenario', {key: val}, (I) =  {});  Timeout  By default there is no timeout for tests, however you can change this value for a specific suite:  Feature('Stop me').timeout(5000); // set timeout to 5s  or for the test:  // set timeout to 1s\nScenario( Stop me faster , (I) =  {\n  // test goes here\n}).timeout(1000);\n\n// alternative\nScenario( Stop me faster , {timeout: 1000}, (I) =  {});\n\n// disable timeout for this scenario\nScenario( Don't stop me , {timeout: 0}, (I) =  {});   done()", 
            "title": "Test Options"
        }, 
        {
            "location": "/acceptance/", 
            "text": "Acceptance Testing\n\n\nHow does your client, manager, or tester, or any other non-technical person, know your web application is working? By opening the browser, accessing a site, clicking on links, filling in the forms, and actually seeing the content on a web page.\n\n\nAcceptance (also called End to End) tests can cover standard but complex scenarios from a user's perspective. With acceptance tests you can be confident that users, following all defined scenarios, won't get errors. We check \nnot just functionality of application but a user interface\n (UI) as well.\n\n\nBy default CodeceptJS uses \nWebDriverIO\n helper and \nSelenium\n to automate browser. Within web page you can locate elements, interact with them, and check that expected elements are present on a page.\nHowever, you can also choose \nNightmare\n or \nProtractor\n helpers, driven by corresponding libraries.\nNo matter of helper and library you use for acceptance testing, CodeceptJS should execute same actions in similar manner.\n\n\nIn case of CodeceptJS you can be sure that in code it will be as easy as it sounds. You just describe a test scenario with JavaScript DSL and allow the framework to handle the rest.\n\n\nWithin web page you can locate elements, interact with them, and check that expected elements are present on a page. That is what a test look like.\nThat is what a test look like.\n\n\nI.amOnPage('/login');\nI.fillField('Username', 'john');\nI.fillField('Password', '123456');\nI.click('Login');\nI.see('Welcome, John');\n\n\n\n\nThis is how we can check that login form of a simple web application works. At first we opened \n/login\n page, then filled forms and in the end we saw the greetings text.\n\n\nLocating Element\n\n\nElement can be found by CSS or XPath locators. Practically every steps\nin WebDriverIO helper accept them both.\n\n\nI.seeElement('.user'); // element with CSS class user\nI.seeElement('//button[contains(., \npress me\n)]'); // button\n\n\n\n\nBy default CodeceptJS tries to guess the locator type.\nIn order to specify exact locator type you can pass a hash called \nstrict locator\n.\n\n\nI.seeElement({css: 'div.user'});\nI.seeElement({xpath: '//div[@class=user]'});\n\n\n\n\nStrict locators allow to specify additional locator types:\n\n\n// locate form element by name\nI.seeElement({name: 'password'});\n// locate element by id\nI.seeElement({id: 'users'});\n\n\n\n\nIn \nmobile testing\n you can use \n~\n to specify accessibility id to locate an element. In web application you can locate element by their \naria-label\n value.\n\n\n// locate element by [aria-label] attribute in web\n// or by accessibility id in mobile\nI.seeElement('~username');\n\n\n\n\nClicking\n\n\nCodeceptJS provides a flexible syntax to specify an element to click.\n\n\nBy default CodeceptJS tries to find button or link with exact text on it\n\n\n// search for link or button\nI.click('Login');\n\n\n\n\nIf none found, CodeceptJS tries to find link or button containing that text. In case an image is clickable its \nalt\n attribute will be checked for text inclusion. Form buttons will also be searched by name.\n\n\nTo narrow down the results you can specify a context in second parameter.\n\n\nI.click('Login', '.nav'); // search only in .nav\nI.click('Login', {css: 'footer'}); // search only in footer\n\n\n\n\nTo skip the global search pass exact strict locator (or start locator with \n//\n or \n.\n or \n#\n).\nIn this case you are not limited to buttons and links. Any element found by that locator is clicked.\n\n\n// click element by CSS\nI.click('#signup');\n// click element located by name inside a form\nI.click({name: 'submit'}, '#user\nform');\n\n\n\n\nFilling Fields\n\n\nClicking the links is not what takes the most time during testing a web site. If your site consists only of links you can skip test automation. The most routine waste of time goes into the testing of forms. CodeceptJS provides several ways of doing that.\n\n\nLet's submit this sample form for a test:\n\n\nform method=\npost\n action=\n/update\n id=\nupdate_form\n\n     \nlabel for=\nuser_name\nName\n/label\n\n     \ninput type=\ntext\n name=\nuser[name]\n id=\nuser_name\n /\n\n     \nlabel for=\nuser_email\nEmail\n/label\n\n     \ninput type=\ntext\n name=\nuser[email]\n id=\nuser_email\n /\n\n     \nlabel for=\nuser_gender\nGender\n/label\n\n     \nselect id=\nuser_gender\n name=\nuser[gender]\n\n          \noption value=\nm\nMale\n/option\n\n          \noption value=\nf\nFemale\n/option\n\n     \n/select\n\n     \ninput type=\nsubmit\n name=\nsubmitButton\n value=\nUpdate\n /\n\n\n/form\n\n\n\n\n\nWe need to fill in all those fields and click \"Update\" button. CodeceptJS matches form elements by their label, name, or by CSS or XPath locators.\n\n\n// we are using label to match user_name field\nI.fillField('Name', 'Miles');\n// we can use input name\nI.fillField('user[email]','miles@davis.com');\n// select element by label, choose option by text\nI.selectOption('Gender','Male');\n// click 'Update' button, found by text\nI.click('Update');\n\n\n\n\nAlternative scenario:\n\n\n// we are using CSS\nI.fillField('#user_name', 'Miles');\nI.fillField('#user_email','miles@davis.com');\n// select element by label, option by value\nI.selectOption('#user_gender','m');\n// click 'Update' button, found by name\nI.click('submitButton', '#update_form');\n\n\n\n\nAssertions\n\n\nIn order to verify the expected behavior of a web application, web page connects should be checked.\nCodeceptJS provides built-in assertions for that. They start with \nsee\n (or \ndontSee\n) prefix, as they describe user's current vision.\n\n\nThe most general and common assertion is \nsee\n:\n\n\n// Just a visible text on a page\nI.see('Hello');\n// text inside .msg element\nI.see('Hello', '.msg');\n// opposite\nI.dontSee('Bye');\n\n\n\n\nYou should provide a text as first argument, and optionally a locator to narrow the search context.\n\n\nYou can check that specific element exists (or not) on a page, as it was described in \nLocating Element\n section.\n\n\nI.seeElement('.notice');\nI.dontSeeElement('.error');\n\n\n\n\nAdditional assertions:\n\n\nI.seeInCurrentUrl('/user/miles');\nI.seeInField('user[name]', 'Miles');\nI.seeInTitle('My Website');\n\n\n\n\nTo see all possible assertions see the helper's reference.\n\n\nGrabbing\n\n\nSometimes you need to retrieve a data from a page to use it in next steps of a scenario.\nImagine, application generates a password and you want to ensure that user can login using this password.\n\n\nScenario('login with generated password', async (I) =\n {\n  I.fillField('email', 'miles@davis.com');\n  I.click('Generate Password');\n  const password = await I.grabTextFrom('#password');\n  I.click('Login');\n  I.fillField('email', 'miles@davis.com');\n  I.fillField('password', password);\n  I.click('Log in!');\n  I.see('Hello, Miles');\n});\n\n\n\n\ngrabTextFrom\n action is used here to retrieve text from an element. All actions starting with \ngrab\n prefix are expected to return data. In order to synchronize this step with a scenario you should pause test execution with \nawait\n keyword of ES6. To make it work your test should be written inside a async function (notice \nasync\n in its definition).\n\n\nScenario('use page title', async (I) =\n {\n  // ...\n  const password = await I.grabTextFrom('#password');\n  I.fillField('password', password);\n});\n\n\n\n\nWaiting\n\n\nIn modern web applications rendering is happen on client side.\nSometimes that may cause delays. A test may fail while trying to click an element which has not appeared on a page yet.\nTo handle this cases \nwait*\n methods introduced.\n\n\nI.waitForElement('#agree_button', 30); // secs\n// clicks a button only when it is visible\nI.click('#agree_button');\n\n\n\n\nMore wait actions can be found in helper's reference.\n\n\nSmartWait\n\n\nIt is possible to wait for elements pragmatically. If a test uses element which is not on a page yet, CodeceptJS will wait for few extra seconds before failing. This feature is based on \nImplicit Wait\n of Selenium. CodeceptJS enables implicit wait only when searching for a specific element and disables in all other cases. Thus, the performance of a test is not affected.\n\n\nSmartWait can be enabled by setting wait option in WebDriverIO config.\nAdd \n\"smartWait\": 5000\n to wait for additional 5s.\n\n\nSmartWait works with a CSS/XPath locators in \nclick\n, \nseeElement\n and other methods. See where it is enabled and where is not:\n\n\nI.click('Login'); // DISABLED, not a locator\nI.fillField('user', 'davert'); // DISABLED, not a specific locator\nI.fillField({name: 'password'}, '123456'); // ENABLED, strict locator\nI.click('#login'); // ENABLED, locator is CSS ID\nI.see('Hello, Davert'); // DISABLED, Not a locator\nI.seeElement('#userbar'); // ENABLED\nI.dontSeeElement('#login'); // DISABLED, can't wait for element to hide\nI.seeNumberOfElements('button.link', 5); // DISABLED, can wait only for one element\n\n\n\n\n\nSmartWait doesn't check element for visibility, so tests may fail even element is on a page.\n\n\nUsage example:\n\n\n// we use smartWait: 5000 instead of\n// I.waitForElement('#click-me', 5);\n// to wait for element on page\nI.click('#click-me');\n\n\n\n\nIf it's hard to define what to wait, it is recommended to use \nretries\n to rerun flaky steps.\n\n\nIFrames\n\n\nwithin\n operator can be used to work inside IFrames. Special \nframe\n locator is required to locate the iframe and get into its context.\n\n\nSee example:\n\n\nwithin({frame: \n#editor\n}, () =\n {\n  I.see('Page');\n});\n\n\n\n\nNested IFrames can be set by passing array \n(WebDriverIO, Nightmare \n Puppeteer only)\n:\n\n\nwithin({frame: [\n.content\n, \n#editor\n]}, () =\n {\n  I.see('Page');\n});\n\n\n\n\nMultiple Sessions\n\n\nCodeceptJS allows to run several browser sessions inside a test. This can be useful for testing communication between users inside a system, for instance in chats. To open another browser use \nsession()\n function as shown in example:\n\n\nScenario('test app', (I) =\n {\n  I.amOnPage('/chat');\n  I.fillField('name', 'davert');\n  I.click('Sign In');\n  I.see('Hello, davert');\n  session('john', () =\n {\n    // another session started\n    I.amOnPage('/chat');\n    I.fillField('name', 'john');\n    I.click('Sign In');\n    I.see('Hello, john');\n  });\n  // switching back to default session\n  I.fillField('message', 'Hi, john');\n  // there is a message from current user\n  I.see('me: Hi, john', '.messages');\n  session('john', () =\n {\n    // let's check if john received it\n    I.see('davert: Hi, john', '.messages');\n  });\n});\n\n\n\n\nsession\n function expects a first parameter to be a name of a session. You can switch back to session by using the same name.\n\n\nYou can override config for session by passing second parameter:\n\n\nsession('john', { browser: 'firefox' } , () =\n {\n  // run this steps in firefox\n  I.amOnPage('/');\n});\n\n\n\n\nor just start session without switching to it. Call \nsession\n passing only its name:\n\n\nScenario('test', (I) =\n {\n  // opens 3 additional browsers\n  session('john');\n  session('mary');\n  session('jane');\n\n  I.amOnPage('/');\n\n  // switch to session by its name\n  session('mary', () =\n {\n    I.amOnPage('/login');\n  });\n}\n\n\n\n\nsession\n can return value which can be used in scenario:\n\n\n// inside async function\nconst val = await session('john', () =\n {\n  I.amOnPage('/info');\n  return I.grabTextFrom({ css: 'h1' });\n});\nI.fillField('Description', val);\n\n\n\n\nFunction passed into session can use \nI\n, page objects, and any objects declared for the scenario.\nThis function can also be declared as async (but doesn't work as generator).\n\n\nAlso, you can use \nwithin\n inside a session but you can't call session from inside \nwithin\n.\n\n\n\n\ndone()\n\n\nCodeceptJS through helpers provides user friendly API to interact with a webpage. In this section we described using WebDriverIO helper which allows to control browser through Selenium WebDriver.", 
            "title": "Acceptance Testing"
        }, 
        {
            "location": "/acceptance/#acceptance-testing", 
            "text": "How does your client, manager, or tester, or any other non-technical person, know your web application is working? By opening the browser, accessing a site, clicking on links, filling in the forms, and actually seeing the content on a web page.  Acceptance (also called End to End) tests can cover standard but complex scenarios from a user's perspective. With acceptance tests you can be confident that users, following all defined scenarios, won't get errors. We check  not just functionality of application but a user interface  (UI) as well.  By default CodeceptJS uses  WebDriverIO  helper and  Selenium  to automate browser. Within web page you can locate elements, interact with them, and check that expected elements are present on a page.\nHowever, you can also choose  Nightmare  or  Protractor  helpers, driven by corresponding libraries.\nNo matter of helper and library you use for acceptance testing, CodeceptJS should execute same actions in similar manner.  In case of CodeceptJS you can be sure that in code it will be as easy as it sounds. You just describe a test scenario with JavaScript DSL and allow the framework to handle the rest.  Within web page you can locate elements, interact with them, and check that expected elements are present on a page. That is what a test look like.\nThat is what a test look like.  I.amOnPage('/login');\nI.fillField('Username', 'john');\nI.fillField('Password', '123456');\nI.click('Login');\nI.see('Welcome, John');  This is how we can check that login form of a simple web application works. At first we opened  /login  page, then filled forms and in the end we saw the greetings text.", 
            "title": "Acceptance Testing"
        }, 
        {
            "location": "/acceptance/#locating-element", 
            "text": "Element can be found by CSS or XPath locators. Practically every steps\nin WebDriverIO helper accept them both.  I.seeElement('.user'); // element with CSS class user\nI.seeElement('//button[contains(.,  press me )]'); // button  By default CodeceptJS tries to guess the locator type.\nIn order to specify exact locator type you can pass a hash called  strict locator .  I.seeElement({css: 'div.user'});\nI.seeElement({xpath: '//div[@class=user]'});  Strict locators allow to specify additional locator types:  // locate form element by name\nI.seeElement({name: 'password'});\n// locate element by id\nI.seeElement({id: 'users'});  In  mobile testing  you can use  ~  to specify accessibility id to locate an element. In web application you can locate element by their  aria-label  value.  // locate element by [aria-label] attribute in web\n// or by accessibility id in mobile\nI.seeElement('~username');", 
            "title": "Locating Element"
        }, 
        {
            "location": "/acceptance/#clicking", 
            "text": "CodeceptJS provides a flexible syntax to specify an element to click.  By default CodeceptJS tries to find button or link with exact text on it  // search for link or button\nI.click('Login');  If none found, CodeceptJS tries to find link or button containing that text. In case an image is clickable its  alt  attribute will be checked for text inclusion. Form buttons will also be searched by name.  To narrow down the results you can specify a context in second parameter.  I.click('Login', '.nav'); // search only in .nav\nI.click('Login', {css: 'footer'}); // search only in footer  To skip the global search pass exact strict locator (or start locator with  //  or  .  or  # ).\nIn this case you are not limited to buttons and links. Any element found by that locator is clicked.  // click element by CSS\nI.click('#signup');\n// click element located by name inside a form\nI.click({name: 'submit'}, '#user form');", 
            "title": "Clicking"
        }, 
        {
            "location": "/acceptance/#filling-fields", 
            "text": "Clicking the links is not what takes the most time during testing a web site. If your site consists only of links you can skip test automation. The most routine waste of time goes into the testing of forms. CodeceptJS provides several ways of doing that.  Let's submit this sample form for a test:  form method= post  action= /update  id= update_form \n      label for= user_name Name /label \n      input type= text  name= user[name]  id= user_name  / \n      label for= user_email Email /label \n      input type= text  name= user[email]  id= user_email  / \n      label for= user_gender Gender /label \n      select id= user_gender  name= user[gender] \n           option value= m Male /option \n           option value= f Female /option \n      /select \n      input type= submit  name= submitButton  value= Update  /  /form   We need to fill in all those fields and click \"Update\" button. CodeceptJS matches form elements by their label, name, or by CSS or XPath locators.  // we are using label to match user_name field\nI.fillField('Name', 'Miles');\n// we can use input name\nI.fillField('user[email]','miles@davis.com');\n// select element by label, choose option by text\nI.selectOption('Gender','Male');\n// click 'Update' button, found by text\nI.click('Update');  Alternative scenario:  // we are using CSS\nI.fillField('#user_name', 'Miles');\nI.fillField('#user_email','miles@davis.com');\n// select element by label, option by value\nI.selectOption('#user_gender','m');\n// click 'Update' button, found by name\nI.click('submitButton', '#update_form');", 
            "title": "Filling Fields"
        }, 
        {
            "location": "/acceptance/#assertions", 
            "text": "In order to verify the expected behavior of a web application, web page connects should be checked.\nCodeceptJS provides built-in assertions for that. They start with  see  (or  dontSee ) prefix, as they describe user's current vision.  The most general and common assertion is  see :  // Just a visible text on a page\nI.see('Hello');\n// text inside .msg element\nI.see('Hello', '.msg');\n// opposite\nI.dontSee('Bye');  You should provide a text as first argument, and optionally a locator to narrow the search context.  You can check that specific element exists (or not) on a page, as it was described in  Locating Element  section.  I.seeElement('.notice');\nI.dontSeeElement('.error');  Additional assertions:  I.seeInCurrentUrl('/user/miles');\nI.seeInField('user[name]', 'Miles');\nI.seeInTitle('My Website');  To see all possible assertions see the helper's reference.", 
            "title": "Assertions"
        }, 
        {
            "location": "/acceptance/#grabbing", 
            "text": "Sometimes you need to retrieve a data from a page to use it in next steps of a scenario.\nImagine, application generates a password and you want to ensure that user can login using this password.  Scenario('login with generated password', async (I) =  {\n  I.fillField('email', 'miles@davis.com');\n  I.click('Generate Password');\n  const password = await I.grabTextFrom('#password');\n  I.click('Login');\n  I.fillField('email', 'miles@davis.com');\n  I.fillField('password', password);\n  I.click('Log in!');\n  I.see('Hello, Miles');\n});  grabTextFrom  action is used here to retrieve text from an element. All actions starting with  grab  prefix are expected to return data. In order to synchronize this step with a scenario you should pause test execution with  await  keyword of ES6. To make it work your test should be written inside a async function (notice  async  in its definition).  Scenario('use page title', async (I) =  {\n  // ...\n  const password = await I.grabTextFrom('#password');\n  I.fillField('password', password);\n});", 
            "title": "Grabbing"
        }, 
        {
            "location": "/acceptance/#waiting", 
            "text": "In modern web applications rendering is happen on client side.\nSometimes that may cause delays. A test may fail while trying to click an element which has not appeared on a page yet.\nTo handle this cases  wait*  methods introduced.  I.waitForElement('#agree_button', 30); // secs\n// clicks a button only when it is visible\nI.click('#agree_button');  More wait actions can be found in helper's reference.", 
            "title": "Waiting"
        }, 
        {
            "location": "/acceptance/#smartwait", 
            "text": "It is possible to wait for elements pragmatically. If a test uses element which is not on a page yet, CodeceptJS will wait for few extra seconds before failing. This feature is based on  Implicit Wait  of Selenium. CodeceptJS enables implicit wait only when searching for a specific element and disables in all other cases. Thus, the performance of a test is not affected.  SmartWait can be enabled by setting wait option in WebDriverIO config.\nAdd  \"smartWait\": 5000  to wait for additional 5s.  SmartWait works with a CSS/XPath locators in  click ,  seeElement  and other methods. See where it is enabled and where is not:  I.click('Login'); // DISABLED, not a locator\nI.fillField('user', 'davert'); // DISABLED, not a specific locator\nI.fillField({name: 'password'}, '123456'); // ENABLED, strict locator\nI.click('#login'); // ENABLED, locator is CSS ID\nI.see('Hello, Davert'); // DISABLED, Not a locator\nI.seeElement('#userbar'); // ENABLED\nI.dontSeeElement('#login'); // DISABLED, can't wait for element to hide\nI.seeNumberOfElements('button.link', 5); // DISABLED, can wait only for one element  SmartWait doesn't check element for visibility, so tests may fail even element is on a page.  Usage example:  // we use smartWait: 5000 instead of\n// I.waitForElement('#click-me', 5);\n// to wait for element on page\nI.click('#click-me');  If it's hard to define what to wait, it is recommended to use  retries  to rerun flaky steps.", 
            "title": "SmartWait"
        }, 
        {
            "location": "/acceptance/#iframes", 
            "text": "within  operator can be used to work inside IFrames. Special  frame  locator is required to locate the iframe and get into its context.  See example:  within({frame:  #editor }, () =  {\n  I.see('Page');\n});  Nested IFrames can be set by passing array  (WebDriverIO, Nightmare   Puppeteer only) :  within({frame: [ .content ,  #editor ]}, () =  {\n  I.see('Page');\n});", 
            "title": "IFrames"
        }, 
        {
            "location": "/acceptance/#multiple-sessions", 
            "text": "CodeceptJS allows to run several browser sessions inside a test. This can be useful for testing communication between users inside a system, for instance in chats. To open another browser use  session()  function as shown in example:  Scenario('test app', (I) =  {\n  I.amOnPage('/chat');\n  I.fillField('name', 'davert');\n  I.click('Sign In');\n  I.see('Hello, davert');\n  session('john', () =  {\n    // another session started\n    I.amOnPage('/chat');\n    I.fillField('name', 'john');\n    I.click('Sign In');\n    I.see('Hello, john');\n  });\n  // switching back to default session\n  I.fillField('message', 'Hi, john');\n  // there is a message from current user\n  I.see('me: Hi, john', '.messages');\n  session('john', () =  {\n    // let's check if john received it\n    I.see('davert: Hi, john', '.messages');\n  });\n});  session  function expects a first parameter to be a name of a session. You can switch back to session by using the same name.  You can override config for session by passing second parameter:  session('john', { browser: 'firefox' } , () =  {\n  // run this steps in firefox\n  I.amOnPage('/');\n});  or just start session without switching to it. Call  session  passing only its name:  Scenario('test', (I) =  {\n  // opens 3 additional browsers\n  session('john');\n  session('mary');\n  session('jane');\n\n  I.amOnPage('/');\n\n  // switch to session by its name\n  session('mary', () =  {\n    I.amOnPage('/login');\n  });\n}  session  can return value which can be used in scenario:  // inside async function\nconst val = await session('john', () =  {\n  I.amOnPage('/info');\n  return I.grabTextFrom({ css: 'h1' });\n});\nI.fillField('Description', val);  Function passed into session can use  I , page objects, and any objects declared for the scenario.\nThis function can also be declared as async (but doesn't work as generator).  Also, you can use  within  inside a session but you can't call session from inside  within .   done()  CodeceptJS through helpers provides user friendly API to interact with a webpage. In this section we described using WebDriverIO helper which allows to control browser through Selenium WebDriver.", 
            "title": "Multiple Sessions"
        }, 
        {
            "location": "/pageobjects/", 
            "text": "Page Object\n\n\nUI of your web application has interaction areas which can be shared across different tests.\nTo avoid code duplication you can put common locators and methods into one place.\n\n\nActor\n\n\nAt initialization you were asked to create custom steps file. If you accepted this option you may use \ncustom_steps.js\n file to extend \nI\n. See how \nlogin\n method can be added to \nI\n:\n\n\nmodule.exports = function() {\n  return actor({\n\n    login: function(email, password) {\n      this.fillField('Email', email);\n      this.fillField('Password', password);\n      this.click('Submit');\n    }\n  });\n}\n\n\n\n\nPlease notice that instead of \nI\n you should use \nthis\n in current context.\n\n\nPageObject\n\n\nIn case an application has different pages (login, admin, etc) you should use a page object.\nCodeceptJS can generate a template for it with the command:\n\n\ncodeceptjs gpo\n\n\n\n\nThis will create a sample template for a page object and include it into \ncodecept.json\n config.\n\n\nconst I = actor();\n\nmodule.exports = {\n\n  // insert your locators and methods here\n}\n\n\n\n\nAs you see, \nI\n object is available there so you can use it as you do in tests.\nGeneral page object for a login page may look like this:\n\n\nconst I = actor();\n\nmodule.exports = {\n\n  // setting locators\n  fields: {\n    email: '#user_basic_email',\n    password: '#user_basic_password'\n  },\n  submitButton: {css: '#new_user_basic input[type=submit]'},\n\n  // introducing methods\n  sendForm(email, password) {\n    I.fillField(this.fields.email, email);\n    I.fillField(this.fields.password, password);\n    I.click(this.submitButton);\n  }\n}\n\n\n\n\nYou can include this pageobject in test by its name (defined in \ncodecept.json\n). In case you created a \nloginPage\n object\nit should be added to list of test arguments to be included in test:\n\n\nScenario('login', (I, loginPage) =\n {\n  loginPage.sendForm('john@doe.com','123456');\n  I.see('Hello, John');\n});\n\n\n\n\nAlso you can use \nasync/await\n inside PageObject:\n\n\nconst I = actor();\n\nmodule.exports = {\n\n  // setting locators\n  container: \n//div[@class = 'numbers']\n,\n  mainItem: {\n    number: \n.//div[contains(@class, 'numbers__main-number')]\n,\n    title: \n.//div[contains(@class, 'numbers__main-title-block')]\n\n  },\n\n  // introducing methods\n  openMainArticle: async () =\n {\n    I.waitForVisible(this.container)\n    let _this = this\n    let title;\n    await within(this.container, async () =\n {\n      title = await I.grabTextFrom(_this.mainItem.number);\n      let subtitle = await I.grabTextFrom(_this.mainItem.title);\n      title = title + \n \n + subtitle.charAt(0).toLowerCase() + subtitle.slice(1);\n      await I.click(_this.mainItem.title)\n    })\n    return title;\n  }\n}\n\n\n\n\nand use them in your tests:\n\n\nScenario('login2', async (I, loginPage, basePage) =\n {\n  let title = await mainPage.openMainArticle()\n  basePage.pageShouldBeOpened(title)\n});\n\n\n\n\nPage Fragments\n\n\nIn a similar manner CodeceptJS allows you to generate \nPageFragments\n and any other are abstraction\nby running \ngo\n command with \n--type\n (or \n-t\n) option:\n\n\ncodeceptjs go --type fragment\n\n\n\n\nPage Fragments represent autonomous parts of a page, like modal boxes, components, widgets.\nTechnically they are the same as PageObject but conceptually they are a bit different.\nFor instance, it is recommended that Page Fragment to include a root locator of a component.\nMethods of page fragment can use \nwithin\n block to narrow scope to a root locator:\n\n\nconst I = actor();\n// fragments/modal.js\nmodule.exports = {\n\n  root: '#modal',\n\n  // we are clicking \nAccept: inside a popup window\n  accept() {\n    within(this.root, function() {\n      I.click('Accept');\n    });\n  }\n}\n\n\n\n\nTo use a Page Fragment within a Test Scenario just inject it into your Scenario:\n\n\nScenario('failed_login', async (I, loginPage, modal) =\n {\n  loginPage.sendForm('john@doe.com','wrong password');\n  I.waitForVisible(modal.root);\n  within(modal.root, function () {\n    I.see('Login failed');\n  })\n});\n\n\n\n\nTo use a Page Fragment within a Page Object, you need to \nrequire\n it on top of the Page Object file:\n\n\nconst I = actor();\nconst modal = require('../fragments/modal');\n\nmodule.exports = { \n  doStuff() {\n    ...\n    modal.accept();\n    ...\n  }\n}\n\n\n\n\n\nStepObjects\n\n\nStepObjects represent complex actions which involve usage of multiple web pages. For instance, creating users in backend, changing permissions, etc.\nStepObject can be created similarly to PageObjects or PageFragments:\n\n\ncodeceptjs go --type step\n\n\n\n\nTechnically they are the same as PageObjects. StepObjects can inject PageObjects and use multiple POs to make a complex scenarios:\n\n\nconst I = actor();\nconst userPage = require('../pages/user');\nconst permissionPage = require('../pages/permissions');\n\nmodule.exports = {\n\n  createUser(name) {\n    // action composed from actions of page objects\n    userPage.open();\n    userPage.create(name);\n    permissionPage.activate(name);\n  }\n\n};\n\n\n\n\nDependency Injection\n\n\nConfiguration\n\n\nAll objects described here are injected with Dependency Injection. The similar way it happens in AngularJS framework.\nIf you want an object to be injected in scenario by its name add it to configuration:\n\n\n  \ninclude\n: {\n    \nI\n: \n./custom_steps.js\n,\n    \nSmth\n: \n./pages/Smth.js\n,\n    \nloginPage\n: \n./pages/Login.js\n,\n    \nsigninFragment\n: \n./fragments/Signin.js\n\n  }\n\n\n\n\nNow this objects can be retrieved by the name specified in configuration.\nCodeceptJS generator commands (like \ncodeceptjs gpo\n) will update configuration for you.\n\n\nDynamic Injection\n\n\nYou can inject objects per test by calling \ninjectDependencies\n function on Scenario:\n\n\nScenario('search @grop', (I, Data) =\n {\n  I.fillField('Username', Data.username);\n  I.pressKey('Enter');\n}).injectDependencies({ Data: require('./data.js') });\n\n\n\n\nThis requires \n./data.js\n module and assigns it to \nData\n argument in a test.\n\n\ndone()", 
            "title": "Page Objects"
        }, 
        {
            "location": "/pageobjects/#page-object", 
            "text": "UI of your web application has interaction areas which can be shared across different tests.\nTo avoid code duplication you can put common locators and methods into one place.", 
            "title": "Page Object"
        }, 
        {
            "location": "/pageobjects/#actor", 
            "text": "At initialization you were asked to create custom steps file. If you accepted this option you may use  custom_steps.js  file to extend  I . See how  login  method can be added to  I :  module.exports = function() {\n  return actor({\n\n    login: function(email, password) {\n      this.fillField('Email', email);\n      this.fillField('Password', password);\n      this.click('Submit');\n    }\n  });\n}  Please notice that instead of  I  you should use  this  in current context.", 
            "title": "Actor"
        }, 
        {
            "location": "/pageobjects/#pageobject", 
            "text": "In case an application has different pages (login, admin, etc) you should use a page object.\nCodeceptJS can generate a template for it with the command:  codeceptjs gpo  This will create a sample template for a page object and include it into  codecept.json  config.  const I = actor();\n\nmodule.exports = {\n\n  // insert your locators and methods here\n}  As you see,  I  object is available there so you can use it as you do in tests.\nGeneral page object for a login page may look like this:  const I = actor();\n\nmodule.exports = {\n\n  // setting locators\n  fields: {\n    email: '#user_basic_email',\n    password: '#user_basic_password'\n  },\n  submitButton: {css: '#new_user_basic input[type=submit]'},\n\n  // introducing methods\n  sendForm(email, password) {\n    I.fillField(this.fields.email, email);\n    I.fillField(this.fields.password, password);\n    I.click(this.submitButton);\n  }\n}  You can include this pageobject in test by its name (defined in  codecept.json ). In case you created a  loginPage  object\nit should be added to list of test arguments to be included in test:  Scenario('login', (I, loginPage) =  {\n  loginPage.sendForm('john@doe.com','123456');\n  I.see('Hello, John');\n});  Also you can use  async/await  inside PageObject:  const I = actor();\n\nmodule.exports = {\n\n  // setting locators\n  container:  //div[@class = 'numbers'] ,\n  mainItem: {\n    number:  .//div[contains(@class, 'numbers__main-number')] ,\n    title:  .//div[contains(@class, 'numbers__main-title-block')] \n  },\n\n  // introducing methods\n  openMainArticle: async () =  {\n    I.waitForVisible(this.container)\n    let _this = this\n    let title;\n    await within(this.container, async () =  {\n      title = await I.grabTextFrom(_this.mainItem.number);\n      let subtitle = await I.grabTextFrom(_this.mainItem.title);\n      title = title +     + subtitle.charAt(0).toLowerCase() + subtitle.slice(1);\n      await I.click(_this.mainItem.title)\n    })\n    return title;\n  }\n}  and use them in your tests:  Scenario('login2', async (I, loginPage, basePage) =  {\n  let title = await mainPage.openMainArticle()\n  basePage.pageShouldBeOpened(title)\n});", 
            "title": "PageObject"
        }, 
        {
            "location": "/pageobjects/#page-fragments", 
            "text": "In a similar manner CodeceptJS allows you to generate  PageFragments  and any other are abstraction\nby running  go  command with  --type  (or  -t ) option:  codeceptjs go --type fragment  Page Fragments represent autonomous parts of a page, like modal boxes, components, widgets.\nTechnically they are the same as PageObject but conceptually they are a bit different.\nFor instance, it is recommended that Page Fragment to include a root locator of a component.\nMethods of page fragment can use  within  block to narrow scope to a root locator:  const I = actor();\n// fragments/modal.js\nmodule.exports = {\n\n  root: '#modal',\n\n  // we are clicking  Accept: inside a popup window\n  accept() {\n    within(this.root, function() {\n      I.click('Accept');\n    });\n  }\n}  To use a Page Fragment within a Test Scenario just inject it into your Scenario:  Scenario('failed_login', async (I, loginPage, modal) =  {\n  loginPage.sendForm('john@doe.com','wrong password');\n  I.waitForVisible(modal.root);\n  within(modal.root, function () {\n    I.see('Login failed');\n  })\n});  To use a Page Fragment within a Page Object, you need to  require  it on top of the Page Object file:  const I = actor();\nconst modal = require('../fragments/modal');\n\nmodule.exports = { \n  doStuff() {\n    ...\n    modal.accept();\n    ...\n  }\n}", 
            "title": "Page Fragments"
        }, 
        {
            "location": "/pageobjects/#stepobjects", 
            "text": "StepObjects represent complex actions which involve usage of multiple web pages. For instance, creating users in backend, changing permissions, etc.\nStepObject can be created similarly to PageObjects or PageFragments:  codeceptjs go --type step  Technically they are the same as PageObjects. StepObjects can inject PageObjects and use multiple POs to make a complex scenarios:  const I = actor();\nconst userPage = require('../pages/user');\nconst permissionPage = require('../pages/permissions');\n\nmodule.exports = {\n\n  createUser(name) {\n    // action composed from actions of page objects\n    userPage.open();\n    userPage.create(name);\n    permissionPage.activate(name);\n  }\n\n};", 
            "title": "StepObjects"
        }, 
        {
            "location": "/pageobjects/#dependency-injection", 
            "text": "Configuration  All objects described here are injected with Dependency Injection. The similar way it happens in AngularJS framework.\nIf you want an object to be injected in scenario by its name add it to configuration:     include : {\n     I :  ./custom_steps.js ,\n     Smth :  ./pages/Smth.js ,\n     loginPage :  ./pages/Login.js ,\n     signinFragment :  ./fragments/Signin.js \n  }  Now this objects can be retrieved by the name specified in configuration.\nCodeceptJS generator commands (like  codeceptjs gpo ) will update configuration for you.  Dynamic Injection  You can inject objects per test by calling  injectDependencies  function on Scenario:  Scenario('search @grop', (I, Data) =  {\n  I.fillField('Username', Data.username);\n  I.pressKey('Enter');\n}).injectDependencies({ Data: require('./data.js') });  This requires  ./data.js  module and assigns it to  Data  argument in a test.  done()", 
            "title": "Dependency Injection"
        }, 
        {
            "location": "/puppeteer/", 
            "text": "Robust Chrome Testing with Puppeteer\n\n\nAmong all Selenium alternatives the most interesting emerging ones are tools developed around Google Chrome \nDevTools Protocol\n. And the most prominent one is \nPuppeteer\n.\nIt operates over Google Chrome directly without requireing additional tools like ChromeDriver. So tests setup with Puppeteer can be started with npm install only. If you want get faster and simpler to setup tests, Puppeteer would be your choice.\n\n\nCodeceptJS uses Puppeteer to improve end to end testing experience. No need to learn the syntax of a new tool, all drivers in CodeceptJS share the same API.\n\n\nTake a look at a sample test:\n\n\nI.amOnPage('https://github.com');\nI.click('Sign in', '//html/body/div[1]/header');\nI.see('Sign in to GitHub', 'h1');\nI.fillField('Username or email address', 'something@totest.com');\nI.fillField('Password', '123456');\nI.click('Sign in');\nI.see('Incorrect username or password.', '.flash-error');\n\n\n\n\nIt's readable and simple and works using Puppeteer API!\n\n\nSetup\n\n\nTo start you need CodeceptJS with Puppeteer packages installed\n\n\nnpm install -g codeceptjs puppeteer\n\n\n\n\nOr see \nalternative installation options\n\nIf you already have CodeceptJS project, just install \npuppeteer\n package and enable it in config.\n\n\nAnd a basic project initialized\n\n\ncodeceptjs init\n\n\n\n\nYou will be asked for a Helper to use, you should select Puppeteer and provide url of a website you are testing.\n\n\nConfiguring\n\n\nMake sure \nPuppeteer\n helper is enabled in \ncodecept.json\n config:\n\n\n{ // ..\n  \nhelpers\n: {\n    \nPuppeteer\n: {\n      \nurl\n: \nhttp://localhost\n,\n      \nshow\n: false\n    }\n  }\n  // ..\n}\n\n\n\n\nTurn on the \nshow\n option if you want to follow test progress in a window. This is very useful for debugging.\n\n\nPuppeteer uses different strategies to detect if a page is loaded. In configuration use \nwaitForNavigation\n option for that:\n\n\nBy default it is set to \ndomcontentloaded\n which waits for \nDOMContentLoaded\n event being fired. However, for Single Page Applications it's more useful to set this value to \nnetworkidle0\n which waits for all network connections to be finished.\n\n\n  \nhelpers\n: {\n    \nPuppeteer\n: {\n      \nurl\n: \nhttp://localhost\n,\n      \nwaitForNavigation\n: \nnetworkidle0\n\n    }\n  }\n\n\n\n\nWhen a test runs faster than application it is recommended to increase \nwaitForAction\n config value.\nIt will wait for a small amount of time (100ms) by default after each user action is taken.\n\n\nMore options are listed in \nhelper reference\n.\n\n\nWriting Tests\n\n\nCodeceptJS test should be created with \ngt\n command:\n\n\ncodeceptjs gt\n\n\n\n\nAs an example we will use \nToDoMvc\n app for testing.\n\n\nActions\n\n\nTests consist with a scenario of user's action taken on a page. The most widely used ones are:\n\n\n\n\namOnPage\n - to open a webpage (accepts relative or absolute url)\n\n\nclick\n - to locate a button or link and click on it\n\n\nfillField\n - to enter a text inside a field\n\n\nselectOption\n, \ncheckOption\n - to interact with a form\n\n\nwait*\n to wait for some parts of page to be fully rendered (important for testing SPA)\n\n\ngrab*\n to get values from page sources\n\n\nsee\n, \ndontSee\n - to check for a text on a page\n\n\nseeElement\n, \ndontSeeElement\n - to check for elements on a page\n\n\n\n\nAll actions are listed in \nhelper reference\n.\n\n\nAll actions whicn interact with elements \nsupport CSS and XPath locators\n. Actions like \nclick\n or \nfillField\n by locate elements by their name or value on a page:\n\n\n\n// search for link or button\nI.click('Login');\n// locate field by its label\nI.fillField('Name', 'Miles');\n// we can use input name\nI.fillField('user[email]','miles@davis.com');\n\n\n\n\nYou can also specify the exact locator type with strict locators:\n\n\nI.click({css: 'button.red'});\nI.fillField({name: 'user[email]'},'miles@davis.com');\nI.seeElement({xpath: '//body/header'});\n\n\n\n\nA complete ToDo-MVC test may look like:\n\n\nFeature('ToDo');\n\nScenario('create todo item', (I) =\n {\n  I.amOnPage('http://todomvc.com/examples/react/');\n  I.dontSeeElement('.todo-count');\n  I.fillField('What needs to be done?', 'Write a guide');\n  I.pressKey('Enter');\n  I.see('Write a guide', '.todo-list');\n  I.see('1 item left', '.todo-count');\n});\n\n\n\n\nGrabbers\n\n\nIf you need to get element's value inside a test you can use \ngrab*\n methods. They should be used with \nawait\n operator inside \nasync\n function:\n\n\nconst assert = require('assert');\nScenario('get value of current tasks', async (I) =\n {\n  I.createTodo('do 1');\n  I.createTodo('do 2');\n  let numTodos = await I.grabTextFrom('.todo-count strong');\n  assert.equal(2, numTodos);\n});\n\n\n\n\nWithin\n\n\nIn case some actions should be taken inside one element (a container or modal window) you can use \nwithin\n block to narrow the scope.\nPlease take a note that you can't use within inside another within in Puppeteer helper:\n\n\nwithin('.todoapp', () =\n {\n  I.createTodo('my new item');\n  I.see('1 item left', '.todo-count');\n  I.click('.todo-list input.toggle');\n});\nI.see('0 items left', '.todo-count');\n\n\n\n\nCodeceptJS allows you to implement custom actions like \nI.createTodo\n or use \nPageObjects\n. Learn how to improve your tests in \nPageObjects\n guide.\n\n\nwithin\n can also work with \niframes\n\n\nWhen running steps inside a within block will be shown with a shift:\n\n\n\n\nExtending\n\n\nPuppeteer has a very \nrich and flexible API\n. Sure, you can extend your test suites to use the methods listed there. CodeceptJS already prepares some objects for you and you can use them from your you helpers.\n\n\nStart with creating an \nMyPuppeteer\n helper using \ngenerate:helper\n or \ngh\n command:\n\n\ncodeceptjs gh\n\n\n\n\nThen inside a Helper you can access \nPuppeteer\n helper of CodeceptJS.\nLet's say you want to create \nI.renderPageToPdf\n action. In this case you need to call \npdf\n method of \npage\n object\n\n\n// inside a MyPuppeteer helper\nasync renderPageToPdf() {\n  const page = this.helpers['Puppeteer'].page;\n  await page.emulateMedia('screen');\n  return page.pdf({path: 'page.pdf'});\n}\n\n\n\n\nThe same way you can also access \nbrowser\n object to implement more actions or handle events. \nLearn more about Helpers\n in the corresponding guide.\n\n\ndone()\n\n\nYes, also the \ndemo project is available on GitHub", 
            "title": "Puppeteer Testing"
        }, 
        {
            "location": "/puppeteer/#robust-chrome-testing-with-puppeteer", 
            "text": "Among all Selenium alternatives the most interesting emerging ones are tools developed around Google Chrome  DevTools Protocol . And the most prominent one is  Puppeteer .\nIt operates over Google Chrome directly without requireing additional tools like ChromeDriver. So tests setup with Puppeteer can be started with npm install only. If you want get faster and simpler to setup tests, Puppeteer would be your choice.  CodeceptJS uses Puppeteer to improve end to end testing experience. No need to learn the syntax of a new tool, all drivers in CodeceptJS share the same API.  Take a look at a sample test:  I.amOnPage('https://github.com');\nI.click('Sign in', '//html/body/div[1]/header');\nI.see('Sign in to GitHub', 'h1');\nI.fillField('Username or email address', 'something@totest.com');\nI.fillField('Password', '123456');\nI.click('Sign in');\nI.see('Incorrect username or password.', '.flash-error');  It's readable and simple and works using Puppeteer API!", 
            "title": "Robust Chrome Testing with Puppeteer"
        }, 
        {
            "location": "/puppeteer/#setup", 
            "text": "To start you need CodeceptJS with Puppeteer packages installed  npm install -g codeceptjs puppeteer  Or see  alternative installation options \nIf you already have CodeceptJS project, just install  puppeteer  package and enable it in config.  And a basic project initialized  codeceptjs init  You will be asked for a Helper to use, you should select Puppeteer and provide url of a website you are testing.", 
            "title": "Setup"
        }, 
        {
            "location": "/puppeteer/#configuring", 
            "text": "Make sure  Puppeteer  helper is enabled in  codecept.json  config:  { // ..\n   helpers : {\n     Puppeteer : {\n       url :  http://localhost ,\n       show : false\n    }\n  }\n  // ..\n}  Turn on the  show  option if you want to follow test progress in a window. This is very useful for debugging.  Puppeteer uses different strategies to detect if a page is loaded. In configuration use  waitForNavigation  option for that:  By default it is set to  domcontentloaded  which waits for  DOMContentLoaded  event being fired. However, for Single Page Applications it's more useful to set this value to  networkidle0  which waits for all network connections to be finished.     helpers : {\n     Puppeteer : {\n       url :  http://localhost ,\n       waitForNavigation :  networkidle0 \n    }\n  }  When a test runs faster than application it is recommended to increase  waitForAction  config value.\nIt will wait for a small amount of time (100ms) by default after each user action is taken.  More options are listed in  helper reference .", 
            "title": "Configuring"
        }, 
        {
            "location": "/puppeteer/#writing-tests", 
            "text": "CodeceptJS test should be created with  gt  command:  codeceptjs gt  As an example we will use  ToDoMvc  app for testing.  Actions  Tests consist with a scenario of user's action taken on a page. The most widely used ones are:   amOnPage  - to open a webpage (accepts relative or absolute url)  click  - to locate a button or link and click on it  fillField  - to enter a text inside a field  selectOption ,  checkOption  - to interact with a form  wait*  to wait for some parts of page to be fully rendered (important for testing SPA)  grab*  to get values from page sources  see ,  dontSee  - to check for a text on a page  seeElement ,  dontSeeElement  - to check for elements on a page   All actions are listed in  helper reference .  All actions whicn interact with elements  support CSS and XPath locators . Actions like  click  or  fillField  by locate elements by their name or value on a page:  \n// search for link or button\nI.click('Login');\n// locate field by its label\nI.fillField('Name', 'Miles');\n// we can use input name\nI.fillField('user[email]','miles@davis.com');  You can also specify the exact locator type with strict locators:  I.click({css: 'button.red'});\nI.fillField({name: 'user[email]'},'miles@davis.com');\nI.seeElement({xpath: '//body/header'});  A complete ToDo-MVC test may look like:  Feature('ToDo');\n\nScenario('create todo item', (I) =  {\n  I.amOnPage('http://todomvc.com/examples/react/');\n  I.dontSeeElement('.todo-count');\n  I.fillField('What needs to be done?', 'Write a guide');\n  I.pressKey('Enter');\n  I.see('Write a guide', '.todo-list');\n  I.see('1 item left', '.todo-count');\n});  Grabbers  If you need to get element's value inside a test you can use  grab*  methods. They should be used with  await  operator inside  async  function:  const assert = require('assert');\nScenario('get value of current tasks', async (I) =  {\n  I.createTodo('do 1');\n  I.createTodo('do 2');\n  let numTodos = await I.grabTextFrom('.todo-count strong');\n  assert.equal(2, numTodos);\n});  Within  In case some actions should be taken inside one element (a container or modal window) you can use  within  block to narrow the scope.\nPlease take a note that you can't use within inside another within in Puppeteer helper:  within('.todoapp', () =  {\n  I.createTodo('my new item');\n  I.see('1 item left', '.todo-count');\n  I.click('.todo-list input.toggle');\n});\nI.see('0 items left', '.todo-count');  CodeceptJS allows you to implement custom actions like  I.createTodo  or use  PageObjects . Learn how to improve your tests in  PageObjects  guide.  within  can also work with  iframes  When running steps inside a within block will be shown with a shift:", 
            "title": "Writing Tests"
        }, 
        {
            "location": "/puppeteer/#extending", 
            "text": "Puppeteer has a very  rich and flexible API . Sure, you can extend your test suites to use the methods listed there. CodeceptJS already prepares some objects for you and you can use them from your you helpers.  Start with creating an  MyPuppeteer  helper using  generate:helper  or  gh  command:  codeceptjs gh  Then inside a Helper you can access  Puppeteer  helper of CodeceptJS.\nLet's say you want to create  I.renderPageToPdf  action. In this case you need to call  pdf  method of  page  object  // inside a MyPuppeteer helper\nasync renderPageToPdf() {\n  const page = this.helpers['Puppeteer'].page;\n  await page.emulateMedia('screen');\n  return page.pdf({path: 'page.pdf'});\n}  The same way you can also access  browser  object to implement more actions or handle events.  Learn more about Helpers  in the corresponding guide.", 
            "title": "Extending"
        }, 
        {
            "location": "/puppeteer/#done", 
            "text": "Yes, also the  demo project is available on GitHub", 
            "title": "done()"
        }, 
        {
            "location": "/nightmare/", 
            "text": "Blazing Fast Tests with Nightmare\n\n\nSelenium WebDriver is considered to be standard for end to end testing of web applications.\nDespite its popularity it have its drawbacks, it requires a real browser and Selenium server to control it.\nThis hardens setting it up testing environment for CI server and slows down test execution.\n\n\nIs there a sane alternative to Selenium?\n\n\nYes, how about \nNightmareJS\n?\n\n\nIt is modern Electron based testing framework which allows to execute tests in headless mode as well as in window mode for debug purposes.\nThis makes Nightmare very useful, much more handy than PhantomJS. Nightmare is in active development and has nice API for writing acceptance tests.\nUnfortunately, as all other JavaScript testing frameworks it has its own very custom API.\nWhat if you choose it for a project and suddenly you realize that you need something more powerful, like Selenium?\nYes, that might be a problem if you are not using CodeceptJS.\nThe one idea behind CodeceptJS is to unify different testing backends under one API, so you could easily write tests the same way no matter what engines you use: webdriverio, Protractor, or Nightmare.\n\n\nCompare a test written using Nightmare API:\n\n\nnightmare\n  .goto('http://yahoo.com')\n  .type('form[action*=\n/search\n] [name=p]', 'github nightmare')\n  .click('form[action*=\n/search\n] [type=submit]')\n  .wait('#main')\n  .evaluate(function () {\n    return document.querySelector('#main .searchCenterMiddle li a').href\n  })\n\n\n\n\nwith a similar CodeceptJS test:\n\n\n  I.amOnPage('http://yahoo.com');\n  I.fillField('p', 'github nightmare');\n  I.click('Search Web');\n  I.waitForElement('#main');\n  I.seeElement('#main .searchCenterMiddle li a');\n  I.seeElement(\n//a[contains(@href,'github.com/segmentio/nightmare')]\n);\n  I.see('segmentio/nightmare','#main li a');\n\n\n\n\nNightmareJS support only CSS locators for web elements, while CodeceptJS improves it to use XPath as well.\nThis is how form can be located by labels, and buttons by text in examples above. It is done by injecting\nclient-side scrips (for element location) to every loaded page. Also all events like click, doubleClick, keyPress are \nsimulated\n by JavaScript,\nthis makes testing less relevant, as they are not native to operating systems.\n\n\nHow Fast Is Nightmare JS?\n\n\nLet's execute the test above within WebDriverIO using headless Firefox + Selenium Server packed in Docker container.\n\n\ndocker run -d -p 4444:4444 selenium/standalone-firefox:2.53.0\ncodeceptjs run yahoo_test.js --steps\n\n\n\n\nThis provides use with output:\n\n\n Yahoo basic test\n \n WebDriverIO._before\n \u2022 I am on page \nhttp://yahoo.com\n\n \u2022 I fill field \np\n, \ngithub nightmare\n\n \u2022 I click \nSearch Web\n\n \u2022 I wait for element \n#main\n, 2\n \u2022 I see element \n#main .searchCenterMiddle li a\n\n \u2022 I see \nsegmentio/nightmare\n, \nli a\n\n \u2713 OK in 17591ms\n\n\n\n\nWhen we switch helper to Nightmare:\n\n\n Yahoo basic test\n \n Nightmare._before\n \u2022 I am on page \nhttp://yahoo.com\n\n \u2022 I fill field \np\n, \ngithub nightmare\n\n \u2022 I click \nSearch Web\n\n \u2022 I wait for element \n#main\n, 2\n \u2022 I see element \n#main .searchCenterMiddle li a\n\n \u2022 I see \nsegmentio/nightmare\n, \nli a\n\n \u2713 OK in 5490ms\n\n\n\n\nAs you see the Nightmare test was almost \n3 times faster\n than Selenium test.\nSure, this can't be taken as a valuable benchmark but more like a proof of concept.\n\n\nSetup\n\n\nTo start you need CodeceptJS with nightmare package installed.\n\n\nnpm install -g nightmare\n\n\n\n\nAnd a basic project initialized\n\n\ncodeceptjs init\n\n\n\n\nYou will be asked for a Helper to use, you should select Nightmare and provide url of a website you are testing.\nSetup process is explained on \nQuickStart page\n.\n\n\n(If you already have CodeceptJS project, just install nightmare globally or locally and enable it in config)\n\n\nConfiguring Nightmare\n\n\nEnable \nNightmare\n helper in \ncodecept.json\n config:\n\n\n{ // ..\n  \nhelpers\n: {\n    \nNightmare\n: {\n      \nurl\n: \nhttp://localhost\n,\n      \nshow\n: false,\n      \nrestart\n: false\n    }\n  }\n  // ..\n}\n\n\n\n\nTurn on the \nshow\n option if you want to follow test progress in a window. This is very useful for debugging.\nAll other options can be taken from \nNightmareJS API\n.\n\n\nTurn off the \nrestart\n option if you want to run your suite in a single browser instance.\n\n\nOption \nwaitForAction\n defines how long to wait after a click, doubleClick or pressKey action is performed.\nTest execution may happen much faster than the response is rendered, so make sure you set a proper delay value.\nBy default CodeceptJS waits for 500ms.\n\n\nOpening a Web Page\n\n\nNightmare provides you with more control to browser engine than Selenium does.\nThis allows you to use headers in your tests. For instance, CodeceptJS provides \nhaveHeader\n method\nto set default headers for all your HTTP requests:\n\n\nI.haveHeader('x-tested-with', 'codeceptjs');\n\n\n\n\nWhen opening a web page you can set headers as well. \namOnPage\n methods can take headers as second parameter:\n\n\n// use basic http auth\nI.amOnPage('/admin', { 'Authorization': 'Basic '+token });\n\n\n\n\nAs a small bonus: all \nconsole.log\n calls on a page will be also shown in \n--debug\n mode.\n\n\nManipulating Web Page\n\n\nNightmare helper is supposed to work in the same manner as WebDriverIO or Protractor.\nThis means that all CodeceptJS actions like \nclick\n, \nfillField\n, \nselectOption\n and others are supposed to work in the very same manner.\nThey are expressive and flexible to accept CSS, XPath, names, values, or strict locators. Follow the helper reference for detailed description.\n\n\nAssertions start with \nsee\n prefix. You can check text on a page, elements on page and others.\n\n\nExtending Nightmare Helper\n\n\nCodeceptJS allows you to define and connect own helpers. If some functionality of\nNightmare helper is missing you can easily create \nExtendedNightmare\n helper by running:\n\n\ncodeceptjs gh\n\n\n\n\nLearn more about \nHelpers\n.\n\n\nNightmare instance can be accessed by custom helper:\n\n\n// returns current nightmare instance\nthis.helpers['Nightmare'].browser;\n\n\n\n\nThis way you can call \nnative Nightmare commands\n.\n\n\nIt is important to understand that Nightmare executes JavaScript on client and on server side.\nIf you need to find an element you should search for it using client side script, but if you want\nto do an assertion you should return a data to server side.\n\n\nNightmare provides \nevaluate\n method to execute client-side JavaScript. CodeceptJS registers \ncodeceptjs\n\nobject globally on client side with \nfindElement\n and \nfindElements\n methods in it. They return IDs of matched elements\nso you can access them in next calls to \nevaluate\n:\n\n\n// inside a custom helper class\nasync seeAttributeContains(locator, attribute, expectedValue) {\n  // let's use chai assertion library\n  const assert = require('chai').assert;\n  // get nightmare instance\n  const browser = this.helpers['Nightmare'].browser;\n  // find an element by CSS or XPath:\n  const els = await this.helpers['Nightmare']._locate(locator);\n    // we received an array with IDs of matched elements\n    // now let's execute client-side script to get attribute for the first element\n  const attributeValue = await browser.evaluate(function(el, attribute) {\n      // this is executed inside a web page!\n      return codeceptjs.fetchElement(el).getAttribute(attribute);\n  }, els[0], attribute); // function + its params\n\n    // get attribute value and back to server side\n    // execute an assertion\n  assert.include(attributeValue, expectedValue);\n}\n\n\n\n\nIt can be used in tests like:\n\n\nI.seeAttributeContains('#main img', 'src', '/cat.jpg');\n\n\n\n\nThis sample assertion used \n_locate\n helper method which searched for elements\nby CSS/XPath or a strict locator. Then \nbrowser.evaluate\n method was called to\nuse locate found elements on a page and return attribute from the first of them.\n\n\nAdditional Links\n\n\n\n\nNightmare Tutorial\n by jploskonka.\n\n\n\n\ndone()", 
            "title": "Nightmare Testing"
        }, 
        {
            "location": "/nightmare/#blazing-fast-tests-with-nightmare", 
            "text": "Selenium WebDriver is considered to be standard for end to end testing of web applications.\nDespite its popularity it have its drawbacks, it requires a real browser and Selenium server to control it.\nThis hardens setting it up testing environment for CI server and slows down test execution.  Is there a sane alternative to Selenium?  Yes, how about  NightmareJS ?  It is modern Electron based testing framework which allows to execute tests in headless mode as well as in window mode for debug purposes.\nThis makes Nightmare very useful, much more handy than PhantomJS. Nightmare is in active development and has nice API for writing acceptance tests.\nUnfortunately, as all other JavaScript testing frameworks it has its own very custom API.\nWhat if you choose it for a project and suddenly you realize that you need something more powerful, like Selenium?\nYes, that might be a problem if you are not using CodeceptJS.\nThe one idea behind CodeceptJS is to unify different testing backends under one API, so you could easily write tests the same way no matter what engines you use: webdriverio, Protractor, or Nightmare.  Compare a test written using Nightmare API:  nightmare\n  .goto('http://yahoo.com')\n  .type('form[action*= /search ] [name=p]', 'github nightmare')\n  .click('form[action*= /search ] [type=submit]')\n  .wait('#main')\n  .evaluate(function () {\n    return document.querySelector('#main .searchCenterMiddle li a').href\n  })  with a similar CodeceptJS test:    I.amOnPage('http://yahoo.com');\n  I.fillField('p', 'github nightmare');\n  I.click('Search Web');\n  I.waitForElement('#main');\n  I.seeElement('#main .searchCenterMiddle li a');\n  I.seeElement( //a[contains(@href,'github.com/segmentio/nightmare')] );\n  I.see('segmentio/nightmare','#main li a');  NightmareJS support only CSS locators for web elements, while CodeceptJS improves it to use XPath as well.\nThis is how form can be located by labels, and buttons by text in examples above. It is done by injecting\nclient-side scrips (for element location) to every loaded page. Also all events like click, doubleClick, keyPress are  simulated  by JavaScript,\nthis makes testing less relevant, as they are not native to operating systems.", 
            "title": "Blazing Fast Tests with Nightmare"
        }, 
        {
            "location": "/nightmare/#how-fast-is-nightmare-js", 
            "text": "Let's execute the test above within WebDriverIO using headless Firefox + Selenium Server packed in Docker container.  docker run -d -p 4444:4444 selenium/standalone-firefox:2.53.0\ncodeceptjs run yahoo_test.js --steps  This provides use with output:   Yahoo basic test\n   WebDriverIO._before\n \u2022 I am on page  http://yahoo.com \n \u2022 I fill field  p ,  github nightmare \n \u2022 I click  Search Web \n \u2022 I wait for element  #main , 2\n \u2022 I see element  #main .searchCenterMiddle li a \n \u2022 I see  segmentio/nightmare ,  li a \n \u2713 OK in 17591ms  When we switch helper to Nightmare:   Yahoo basic test\n   Nightmare._before\n \u2022 I am on page  http://yahoo.com \n \u2022 I fill field  p ,  github nightmare \n \u2022 I click  Search Web \n \u2022 I wait for element  #main , 2\n \u2022 I see element  #main .searchCenterMiddle li a \n \u2022 I see  segmentio/nightmare ,  li a \n \u2713 OK in 5490ms  As you see the Nightmare test was almost  3 times faster  than Selenium test.\nSure, this can't be taken as a valuable benchmark but more like a proof of concept.", 
            "title": "How Fast Is Nightmare JS?"
        }, 
        {
            "location": "/nightmare/#setup", 
            "text": "To start you need CodeceptJS with nightmare package installed.  npm install -g nightmare  And a basic project initialized  codeceptjs init  You will be asked for a Helper to use, you should select Nightmare and provide url of a website you are testing.\nSetup process is explained on  QuickStart page .  (If you already have CodeceptJS project, just install nightmare globally or locally and enable it in config)", 
            "title": "Setup"
        }, 
        {
            "location": "/nightmare/#configuring-nightmare", 
            "text": "Enable  Nightmare  helper in  codecept.json  config:  { // ..\n   helpers : {\n     Nightmare : {\n       url :  http://localhost ,\n       show : false,\n       restart : false\n    }\n  }\n  // ..\n}  Turn on the  show  option if you want to follow test progress in a window. This is very useful for debugging.\nAll other options can be taken from  NightmareJS API .  Turn off the  restart  option if you want to run your suite in a single browser instance.  Option  waitForAction  defines how long to wait after a click, doubleClick or pressKey action is performed.\nTest execution may happen much faster than the response is rendered, so make sure you set a proper delay value.\nBy default CodeceptJS waits for 500ms.", 
            "title": "Configuring Nightmare"
        }, 
        {
            "location": "/nightmare/#opening-a-web-page", 
            "text": "Nightmare provides you with more control to browser engine than Selenium does.\nThis allows you to use headers in your tests. For instance, CodeceptJS provides  haveHeader  method\nto set default headers for all your HTTP requests:  I.haveHeader('x-tested-with', 'codeceptjs');  When opening a web page you can set headers as well.  amOnPage  methods can take headers as second parameter:  // use basic http auth\nI.amOnPage('/admin', { 'Authorization': 'Basic '+token });  As a small bonus: all  console.log  calls on a page will be also shown in  --debug  mode.", 
            "title": "Opening a Web Page"
        }, 
        {
            "location": "/nightmare/#manipulating-web-page", 
            "text": "Nightmare helper is supposed to work in the same manner as WebDriverIO or Protractor.\nThis means that all CodeceptJS actions like  click ,  fillField ,  selectOption  and others are supposed to work in the very same manner.\nThey are expressive and flexible to accept CSS, XPath, names, values, or strict locators. Follow the helper reference for detailed description.  Assertions start with  see  prefix. You can check text on a page, elements on page and others.", 
            "title": "Manipulating Web Page"
        }, 
        {
            "location": "/nightmare/#extending-nightmare-helper", 
            "text": "CodeceptJS allows you to define and connect own helpers. If some functionality of\nNightmare helper is missing you can easily create  ExtendedNightmare  helper by running:  codeceptjs gh  Learn more about  Helpers .  Nightmare instance can be accessed by custom helper:  // returns current nightmare instance\nthis.helpers['Nightmare'].browser;  This way you can call  native Nightmare commands .  It is important to understand that Nightmare executes JavaScript on client and on server side.\nIf you need to find an element you should search for it using client side script, but if you want\nto do an assertion you should return a data to server side.  Nightmare provides  evaluate  method to execute client-side JavaScript. CodeceptJS registers  codeceptjs \nobject globally on client side with  findElement  and  findElements  methods in it. They return IDs of matched elements\nso you can access them in next calls to  evaluate :  // inside a custom helper class\nasync seeAttributeContains(locator, attribute, expectedValue) {\n  // let's use chai assertion library\n  const assert = require('chai').assert;\n  // get nightmare instance\n  const browser = this.helpers['Nightmare'].browser;\n  // find an element by CSS or XPath:\n  const els = await this.helpers['Nightmare']._locate(locator);\n    // we received an array with IDs of matched elements\n    // now let's execute client-side script to get attribute for the first element\n  const attributeValue = await browser.evaluate(function(el, attribute) {\n      // this is executed inside a web page!\n      return codeceptjs.fetchElement(el).getAttribute(attribute);\n  }, els[0], attribute); // function + its params\n\n    // get attribute value and back to server side\n    // execute an assertion\n  assert.include(attributeValue, expectedValue);\n}  It can be used in tests like:  I.seeAttributeContains('#main img', 'src', '/cat.jpg');  This sample assertion used  _locate  helper method which searched for elements\nby CSS/XPath or a strict locator. Then  browser.evaluate  method was called to\nuse locate found elements on a page and return attribute from the first of them.", 
            "title": "Extending Nightmare Helper"
        }, 
        {
            "location": "/nightmare/#additional-links", 
            "text": "Nightmare Tutorial  by jploskonka.", 
            "title": "Additional Links"
        }, 
        {
            "location": "/nightmare/#done", 
            "text": "", 
            "title": "done()"
        }, 
        {
            "location": "/angular/", 
            "text": "Protractor Testing with CodeceptJS\n\n\nIntroduction\n\n\nCodeceptJS is an acceptance testing framework. In diversified world of JavaScript testing libraries it aims to create a unified high level API for end-to-end testing, powered by different backends.\nCodeceptJS allows you to write a test and switch in config execution drivers: will it be \nwedriverio\n, \npuppeteer\n, or \nprotractor\n depends on you.\nThis way you aren't be bound to implementation, and your acceptance tests will work no matter of framework running them.\n\n\nAs you know, \nProtractor\n is an official tool for testing AngularJS applications.\nCodeceptJS should not be considered as alternative to Protractor but a testing framework utilizing this powerful library.\n\n\n\n\nSo there is no magic in testing of AngularJS application in CodeceptJS.\nYou just execute regular Protractor commands, packed in a simple high-level API.\n\n\n\n\nAs an example we will use popular \nTodoMVC application\n.\nHow would we test creating a new todo item in CodeceptJS?\n\n\nScenario('create todo item', (I) =\n {\n  I.amOnPage('/');\n  I.dontSeeElement('#todo-count');\n  I.fillField({model: 'newTodo'}, 'Write a guide');\n  I.pressKey('Enter');\n  I.see('Write a guide', {repeater: \ntodo in todos\n});\n  I.see('1 item left', '#todo-count');\n});\n\n\n\n\nThe similar test written in native syntax of Protractor (inherited from selenium-webdriver) would look like this:\n\n\nit('should create todo item', (I) =\n {\n  browser.get(\nhttp://todomvc.com/examples/angularjs/#/\n);\n  expect(element(by.css(\n#todo-count\n)).isPresent()).toBeFalsy();\n  var inputField = element(by.model(\nnewTodo\n));\n  inputField.sendKeys(\nWrite a guide\n);\n  inputField.sendKeys(protractor.Key.ENTER);\n  var todos = element.all(by.repeater(\ntodo in todos\n));\n  expect(todos.last().getText()).toEqual(\nWrite a guide\n));\n  element(by.css(\n#todo-count\n)).getText()).toContain('1 items left');\n});\n\n\n\n\nComparing to the API proposed by CodeceptJS, this code looks a bit more complicated.\nBut what the more important, it's really really hard to read and follow its logic.\nReadability is the most crucial part in acceptance testing.\nYou should easily change tests when changes specification or design.\nProbably, only a person who writes Protractor tests in your company,\ncould do those changes, while CodeceptJS allows anyone to work with tests.\nContrary, CodeceptJS provides CodeceptJS provides scenario-driven approach, so test is just a step-by-step representation of real user actions.\nThis way you can easily read, and follow test scenario, and edit it when you need it to be changed.\n\n\nIn this way CodeceptJS is more similar to Cucumber, so if you run a test with \n--steps\n option you will see this output:\n\n\nTodoMvc --\n create todo item\n \u2022 I am on page \n/\n\n \u2022 I dont see element \n#todo-count\n\n \u2022 I fill field {\nmodel\n:\nnewTodo\n}, \nWrite a guide\n\n \u2022 I press key \nEnter\n\n \u2022 I see \nWrite a guide\n, {\nrepeater\n:\ntodo in todos\n}\n \u2022 I see \n1 item left\n, \n#todo-count\n\n \u2713 OK in 968ms\n\n\n\n\nUnlike Cucumber, CodeceptJS is not about writing test scenarios above for business rules.\nTo say it again, its \ngoal is to provide standard action steps you can use for testing applications\n.\nSurely, it can't cover 100% of cases but it aims for 90%, for others you can write your own steps inside a \ncustom Helper\n using API of Protractor\n\n\nSetting up CodeceptJS with Protractor\n\n\nTo start using CodeceptJS you will need to install it via NPM and initialize it in directory with tests.\n\n\nnpm install -g codeceptjs\ncodeceptjs init\n\n\n\n\nYou will be asked questions about initial configuration, make sure you select Protractor helper.\nIf you didn't have Protractor library it \nwill be installed\n.\nPlease agree to extend steps, and use \nhttp://todomvc.com/examples/angularjs/\n as a url for Protractor helper.\n\n\nFor TodoMVC application you will have following config created in \ncodecept.json\n file:\n\n\n{\n  \ntests\n: \n./*_test.js\n,\n  \ntimeout\n: 10000,\n  \noutput\n: \n./output\n,\n  \nhelpers\n: {\n    \nProtractor\n: {\n      \nurl\n: \nhttp://todomvc.com/examples/angularjs/\n,\n      \ndriver\n: \nhosted\n,\n      \nbrowser\n: \nchrome\n,\n      \nrootElement\n: \nbody\n\n    }\n  },\n  \ninclude\n: {\n    \nI\n: \n./steps_file.js\n\n  },\n  \nbootstrap\n: false,\n  \nmocha\n: {},\n  \nname\n: \ntodoangular\n\n}\n\n\n\n\nFirst test can be generated with \ngt\n command:\n\n\ncodeceptjs gt\n\n\n\n\nAfter that you can start writing your first CodeceptJS/Angular tests.\nPlease look into the reference of \nProtractor helper\n for all available actions.\nYou can also run \nlist\n command to see methods of I:\n\n\ncodeceptjs list\n\n\n\n\nTesting non-Angular Applications\n\n\nSure, Protractor can be used to test applications built without AngularJS. In this case you need to disable angular synchronization feature in config:\n\n\nhelpers\n: {\n  \nProtractor\n: {\n    \nurl\n: \nhttp://todomvc.com/examples/angularjs/\n,\n    \ndriver\n: \nhosted\n,\n    \nbrowser\n: \nfirefox\n,\n    \nangular\n: false\n  }\n}\n\n\n\n\nWriting First Test\n\n\nTest scenario should always use \nI\n object to execute commands.\nThis is important as all methods of \nI\n are running in global promise chain, this way CodeceptJS makes sure everything is executed in right order.\nAt first a page should be opened to proceed, we use \namOnPage\n command for that. As we already specified full URL to TodoMVC app,\nwe can pass relative path into it instead of absolute url:\n\n\nFeature('Todo MVC');\n\nScenario('create todo item', (I) =\n {\n  I.amOnPage('/');\n});\n\n\n\n\nAll scenarios should describe actions on site and assertions taken in the end. In CodeceptJS assertion commands have \nsee\n or \ndontSee\n prefix:\n\n\nFeature('Todo MVC');\n\nScenario('create todo item', (I) =\n {\n  I.amOnPage('/');\n  I.dontSeeElement('#todo-count');\n});\n\n\n\n\nA test can be executed with \nrun\n command, we recommend to use \n--steps\n options to follow step-by-step execution:\n\n\n$ codeceptjs run --steps\n\nCodeceptJS 1.2.0\nTest root is assumed to be /home/davert/demos/todoangular\nUsing the selenium server at http://localhost:4444/wd/hub\n\nTodoMvc --\n create todo item\n \u2022 I am on page \n/\n\n \u2022 I dont see element \n#todo-count\n\n\n\n\n\nRunning Several Scenarios\n\n\nBy writing a test in similar manner we will have a test shown in the beginning of this guide. Probably we would like not to finish with one test,\nbut have more, for testing editing of todo items, checking todo items, and more.\n\n\nLet's prepare our test for multiple scenarios. All test scenarios will need to open main page of application, so \namOnPage\n can be moved into the \nBefore\n hook:\nScenarios will probably deal with created todo items, so we can move logic of crating new todo into a function.\n\n\nFeature('TodoMvc');\n\nBefore((I) =\n {\n  I.amOnPage('/');\n});\n\nconst createTodo = function (I, name) {\n  I.fillField({model: 'newTodo'}, name);\n  I.pressKey('Enter');\n}\n\nScenario('create todo item', (I) =\n {\n  I.dontSeeElement('#todo-count');\n  createTodo(I, 'Write a guide');\n  I.see('Write a guide', {repeater: \ntodo in todos\n});\n  I.see('1 item left', '#todo-count');\n});\n\n\n\n\nand so we can add even more tests!\n\n\nScenario('edit todo', (I) =\n {\n  createTodo(I, 'write a review');\n  I.see('write a review', {repeater: \ntodo in todos\n});\n  I.doubleClick('write a review');\n  I.pressKey(['Control', 'a']);\n  I.pressKey('write old review');\n  I.pressKey('Enter');\n  I.see('write old review', {repeater: \ntodo in todos\n});\n});\n\nScenario('check todo item', (I) =\n {\n  createTodo(I, 'my new item');\n  I.see('1 item left', '#todo-count');\n  I.checkOption({model: 'todo.completed'});\n  I.see('0 items left', '#todo-count');\n});\n\n\n\n\nLocators\n\n\nLike you may have noticed, CodeceptJS doesn't use \nby.*\n locators similar to Protractor or Selenium Webdriver.\nInstead most of methods expect you to pass valid CSS or XPath. In case you don't want CodeceptJS to guess the type of locator,\nyou can specify them using so-called strict locators. This is an absolute analogy of \nby\n, so you can use angular specific locators (like models, repeaters, bindings, etc) in it:\n\n\n{css: 'button'}\n{repeater: \ntodo in todos\n}\n{binding: 'latest'}\n\n\n\n\nWhen we deal with clicks, CodeceptJS can take a text and search a web page for a valid clickable element with that text.\nSo links and buttons can be searched by their text.\n\n\nSame thing happens for form fields: they are searched by field names, labels, and so on.\n\n\nUsing such smart locators makes tests easy to write, however, searching an element by text is slower than using CSS|XPath and much slower than using strict locators.\n\n\nRefactoring\n\n\nIn previous examples, we've moved actions into \ncreateTodo\n function. Is there a more elegant way of refactoring?\nCan we have something like \nI.createTodo()\n to be used in code? Sure, we can do so by editing \nsteps_file.js\n created by init command.\n\n\n// in this file you can append custom step methods to 'I' object\n\nmodule.exports = function() {\n  return actor({\n    createTodo: function(title) {\n      this.fillField({model: 'newTodo'}, title);\n      this.pressKey('Enter');\n    }\n  });\n}\n\n\n\n\nAnd that's all, method is available to use as \nI.createTodo(title)\n:\n\n\nScenario('create todo item', (I) =\n {\n  I.dontSeeElement('#todo-count');\n  I.createTodo('Write a guide');\n  I.see('Write a guide', {repeater: \ntodo in todos\n});\n  I.see('1 item left', '#todo-count');\n});\n\n\n\n\nTo learn more about refactoring options in CodeceptJS read \nPageObjects guide\n.\n\n\nMultiple Sessions\n\n\nTo run several browsers in one test see \nmultiple session\n chapter.\n\n\nExtending\n\n\nWhat if CodeceptJS doesn't provide some of Protractor functionality you actually need? Sure its API is to general,\nand this case is possible. If you don't know how to do something with CodeceptJS - revert back to Protractor syntax!\n\n\nCreate custom helper, define methods for it, and use it inside the I object. Your Helper can access \nbrowser\n from Protractor\nby accessing Protractor helper:\n\n\nlet browser = this.helpers['Protractor'].browser;\n\n\n\n\nor use global \nelement\n and \nby\n variables to locate elements:\n\n\nelement.all(by.repeater('result in memory'));\n\n\n\n\nThis way we recommend to implement all custom logic using low-level Protractor syntax and using it inside scenario tests.\nPlease see an \nexample of such helper\n.\n\n\ndone()\n\n\nAlmost ) This example is \navailable on GitHub\n.", 
            "title": "Protractor Testing"
        }, 
        {
            "location": "/angular/#protractor-testing-with-codeceptjs", 
            "text": "", 
            "title": "Protractor Testing with CodeceptJS"
        }, 
        {
            "location": "/angular/#introduction", 
            "text": "CodeceptJS is an acceptance testing framework. In diversified world of JavaScript testing libraries it aims to create a unified high level API for end-to-end testing, powered by different backends.\nCodeceptJS allows you to write a test and switch in config execution drivers: will it be  wedriverio ,  puppeteer , or  protractor  depends on you.\nThis way you aren't be bound to implementation, and your acceptance tests will work no matter of framework running them.  As you know,  Protractor  is an official tool for testing AngularJS applications.\nCodeceptJS should not be considered as alternative to Protractor but a testing framework utilizing this powerful library.   So there is no magic in testing of AngularJS application in CodeceptJS.\nYou just execute regular Protractor commands, packed in a simple high-level API.   As an example we will use popular  TodoMVC application .\nHow would we test creating a new todo item in CodeceptJS?  Scenario('create todo item', (I) =  {\n  I.amOnPage('/');\n  I.dontSeeElement('#todo-count');\n  I.fillField({model: 'newTodo'}, 'Write a guide');\n  I.pressKey('Enter');\n  I.see('Write a guide', {repeater:  todo in todos });\n  I.see('1 item left', '#todo-count');\n});  The similar test written in native syntax of Protractor (inherited from selenium-webdriver) would look like this:  it('should create todo item', (I) =  {\n  browser.get( http://todomvc.com/examples/angularjs/#/ );\n  expect(element(by.css( #todo-count )).isPresent()).toBeFalsy();\n  var inputField = element(by.model( newTodo ));\n  inputField.sendKeys( Write a guide );\n  inputField.sendKeys(protractor.Key.ENTER);\n  var todos = element.all(by.repeater( todo in todos ));\n  expect(todos.last().getText()).toEqual( Write a guide ));\n  element(by.css( #todo-count )).getText()).toContain('1 items left');\n});  Comparing to the API proposed by CodeceptJS, this code looks a bit more complicated.\nBut what the more important, it's really really hard to read and follow its logic.\nReadability is the most crucial part in acceptance testing.\nYou should easily change tests when changes specification or design.\nProbably, only a person who writes Protractor tests in your company,\ncould do those changes, while CodeceptJS allows anyone to work with tests.\nContrary, CodeceptJS provides CodeceptJS provides scenario-driven approach, so test is just a step-by-step representation of real user actions.\nThis way you can easily read, and follow test scenario, and edit it when you need it to be changed.  In this way CodeceptJS is more similar to Cucumber, so if you run a test with  --steps  option you will see this output:  TodoMvc --\n create todo item\n \u2022 I am on page  / \n \u2022 I dont see element  #todo-count \n \u2022 I fill field { model : newTodo },  Write a guide \n \u2022 I press key  Enter \n \u2022 I see  Write a guide , { repeater : todo in todos }\n \u2022 I see  1 item left ,  #todo-count \n \u2713 OK in 968ms  Unlike Cucumber, CodeceptJS is not about writing test scenarios above for business rules.\nTo say it again, its  goal is to provide standard action steps you can use for testing applications .\nSurely, it can't cover 100% of cases but it aims for 90%, for others you can write your own steps inside a  custom Helper  using API of Protractor  Setting up CodeceptJS with Protractor  To start using CodeceptJS you will need to install it via NPM and initialize it in directory with tests.  npm install -g codeceptjs\ncodeceptjs init  You will be asked questions about initial configuration, make sure you select Protractor helper.\nIf you didn't have Protractor library it  will be installed .\nPlease agree to extend steps, and use  http://todomvc.com/examples/angularjs/  as a url for Protractor helper.  For TodoMVC application you will have following config created in  codecept.json  file:  {\n   tests :  ./*_test.js ,\n   timeout : 10000,\n   output :  ./output ,\n   helpers : {\n     Protractor : {\n       url :  http://todomvc.com/examples/angularjs/ ,\n       driver :  hosted ,\n       browser :  chrome ,\n       rootElement :  body \n    }\n  },\n   include : {\n     I :  ./steps_file.js \n  },\n   bootstrap : false,\n   mocha : {},\n   name :  todoangular \n}  First test can be generated with  gt  command:  codeceptjs gt  After that you can start writing your first CodeceptJS/Angular tests.\nPlease look into the reference of  Protractor helper  for all available actions.\nYou can also run  list  command to see methods of I:  codeceptjs list", 
            "title": "Introduction"
        }, 
        {
            "location": "/angular/#testing-non-angular-applications", 
            "text": "Sure, Protractor can be used to test applications built without AngularJS. In this case you need to disable angular synchronization feature in config:  helpers : {\n   Protractor : {\n     url :  http://todomvc.com/examples/angularjs/ ,\n     driver :  hosted ,\n     browser :  firefox ,\n     angular : false\n  }\n}", 
            "title": "Testing non-Angular Applications"
        }, 
        {
            "location": "/angular/#writing-first-test", 
            "text": "Test scenario should always use  I  object to execute commands.\nThis is important as all methods of  I  are running in global promise chain, this way CodeceptJS makes sure everything is executed in right order.\nAt first a page should be opened to proceed, we use  amOnPage  command for that. As we already specified full URL to TodoMVC app,\nwe can pass relative path into it instead of absolute url:  Feature('Todo MVC');\n\nScenario('create todo item', (I) =  {\n  I.amOnPage('/');\n});  All scenarios should describe actions on site and assertions taken in the end. In CodeceptJS assertion commands have  see  or  dontSee  prefix:  Feature('Todo MVC');\n\nScenario('create todo item', (I) =  {\n  I.amOnPage('/');\n  I.dontSeeElement('#todo-count');\n});  A test can be executed with  run  command, we recommend to use  --steps  options to follow step-by-step execution:  $ codeceptjs run --steps\n\nCodeceptJS 1.2.0\nTest root is assumed to be /home/davert/demos/todoangular\nUsing the selenium server at http://localhost:4444/wd/hub\n\nTodoMvc --\n create todo item\n \u2022 I am on page  / \n \u2022 I dont see element  #todo-count", 
            "title": "Writing First Test"
        }, 
        {
            "location": "/angular/#running-several-scenarios", 
            "text": "By writing a test in similar manner we will have a test shown in the beginning of this guide. Probably we would like not to finish with one test,\nbut have more, for testing editing of todo items, checking todo items, and more.  Let's prepare our test for multiple scenarios. All test scenarios will need to open main page of application, so  amOnPage  can be moved into the  Before  hook:\nScenarios will probably deal with created todo items, so we can move logic of crating new todo into a function.  Feature('TodoMvc');\n\nBefore((I) =  {\n  I.amOnPage('/');\n});\n\nconst createTodo = function (I, name) {\n  I.fillField({model: 'newTodo'}, name);\n  I.pressKey('Enter');\n}\n\nScenario('create todo item', (I) =  {\n  I.dontSeeElement('#todo-count');\n  createTodo(I, 'Write a guide');\n  I.see('Write a guide', {repeater:  todo in todos });\n  I.see('1 item left', '#todo-count');\n});  and so we can add even more tests!  Scenario('edit todo', (I) =  {\n  createTodo(I, 'write a review');\n  I.see('write a review', {repeater:  todo in todos });\n  I.doubleClick('write a review');\n  I.pressKey(['Control', 'a']);\n  I.pressKey('write old review');\n  I.pressKey('Enter');\n  I.see('write old review', {repeater:  todo in todos });\n});\n\nScenario('check todo item', (I) =  {\n  createTodo(I, 'my new item');\n  I.see('1 item left', '#todo-count');\n  I.checkOption({model: 'todo.completed'});\n  I.see('0 items left', '#todo-count');\n});", 
            "title": "Running Several Scenarios"
        }, 
        {
            "location": "/angular/#locators", 
            "text": "Like you may have noticed, CodeceptJS doesn't use  by.*  locators similar to Protractor or Selenium Webdriver.\nInstead most of methods expect you to pass valid CSS or XPath. In case you don't want CodeceptJS to guess the type of locator,\nyou can specify them using so-called strict locators. This is an absolute analogy of  by , so you can use angular specific locators (like models, repeaters, bindings, etc) in it:  {css: 'button'}\n{repeater:  todo in todos }\n{binding: 'latest'}  When we deal with clicks, CodeceptJS can take a text and search a web page for a valid clickable element with that text.\nSo links and buttons can be searched by their text.  Same thing happens for form fields: they are searched by field names, labels, and so on.  Using such smart locators makes tests easy to write, however, searching an element by text is slower than using CSS|XPath and much slower than using strict locators.", 
            "title": "Locators"
        }, 
        {
            "location": "/angular/#refactoring", 
            "text": "In previous examples, we've moved actions into  createTodo  function. Is there a more elegant way of refactoring?\nCan we have something like  I.createTodo()  to be used in code? Sure, we can do so by editing  steps_file.js  created by init command.  // in this file you can append custom step methods to 'I' object\n\nmodule.exports = function() {\n  return actor({\n    createTodo: function(title) {\n      this.fillField({model: 'newTodo'}, title);\n      this.pressKey('Enter');\n    }\n  });\n}  And that's all, method is available to use as  I.createTodo(title) :  Scenario('create todo item', (I) =  {\n  I.dontSeeElement('#todo-count');\n  I.createTodo('Write a guide');\n  I.see('Write a guide', {repeater:  todo in todos });\n  I.see('1 item left', '#todo-count');\n});  To learn more about refactoring options in CodeceptJS read  PageObjects guide .", 
            "title": "Refactoring"
        }, 
        {
            "location": "/angular/#multiple-sessions", 
            "text": "To run several browsers in one test see  multiple session  chapter.", 
            "title": "Multiple Sessions"
        }, 
        {
            "location": "/angular/#extending", 
            "text": "What if CodeceptJS doesn't provide some of Protractor functionality you actually need? Sure its API is to general,\nand this case is possible. If you don't know how to do something with CodeceptJS - revert back to Protractor syntax!  Create custom helper, define methods for it, and use it inside the I object. Your Helper can access  browser  from Protractor\nby accessing Protractor helper:  let browser = this.helpers['Protractor'].browser;  or use global  element  and  by  variables to locate elements:  element.all(by.repeater('result in memory'));  This way we recommend to implement all custom logic using low-level Protractor syntax and using it inside scenario tests.\nPlease see an  example of such helper .  done()  Almost ) This example is  available on GitHub .", 
            "title": "Extending"
        }, 
        {
            "location": "/mobile/", 
            "text": "Mobile Testing\n\n\nCodeceptJS allows to test mobile and hybrid apps in a similar manner web applications are tested.\nSuch tests are executed using \nAppium\n on emulated or physical devices. Also, Appium allows to test web application on mobile devices.\n\n\nWhat makes CodeceptJS better for mobile testing?\nTake a look. Here is the sample test for a native mobile application written in CodeceptJS:\n\n\nI.seeAppIsInstalled(\nio.super.app\n);\nI.click('~startUserRegistrationCD');\nI.fillField('~email of the customer', 'Nothing special'));\nI.see('davert@codecept.io', '~email of the customer'));\nI.clearField('~email of the customer'));\nI.dontSee('Nothing special', '~email of the customer'));\nI.seeElement({\n  android: 'android.widget.Button',\n  ios: '//UIAApplication[1]/UIAWindow[1]/UIAButton[1]'\n});\n\n\n\n\nThis test is easy to read and write. Also it will work both on iOS and Android devices.\nDoesn't it sound cool?\n\n\nSetting Up\n\n\nEnsure that you have \nCodeceptJS installed\n.\nYou will also need to install \nAppium\n.\nWe suggest to use \nappium-doctor\n to check if your system is ready for mobile testing.\n\n\nnpm i -g appium-doctor\n\n\n\n\nIf everything is OK, continue with installing Appium. If not, consider using cloud based alternatives like \nSauceLabs\n or \nBrowserStack\n. Cloud services provide hosted appium with real and emulated mobile devices.\n\n\nTo install Appium use npm:\n\n\nnpm i -g appium\n\n\n\n\nThen you need to prepare application for execution.\nIt should be packed into apk (for Android) or .ipa (for iOS) or zip.\n\n\nNext, is to launch the emulator or connect physical device.\nOnce they are prepared, launch Appium:\n\n\nappium\n\n\n\n\nTo run mobile test you need either an device emulator (available with Android SDK or iOS), real device connected for mobile testing. Alternatively, you may execute Appium with device emulator inside Docker container.\n\n\nCodeceptJS should be installed with webdriverio support:\n\n\nnpm install -g codeceptjs webdriverio\n\n\n\n\nConfiguring\n\n\nInitialize CodeceptJS with \ninit\n command:\n\n\ncodeceptjs init\n\n\n\n\nSelect \nAppium helper\n when asked.\n\n\n? What helpers do you want to use?\n \u25ef WebDriverIO\n \u25ef Protractor\n \u25ef Puppeteer\n \u25ef Nightmare\n\u276f\u25c9 Appium\n \u25ef REST\n\n\n\n\nYou will also be asked for the platform and the application package.\n\n\n? [Appium] Application package. Path to file or url\n\n\n\n\nCheck the newly created \ncodecept.json\n configuration file.\nYou may want to set some additional Appium settings via \ndesiredCapabilities\n\n\nhelpers\n: {\n  \nAppium\n: {\n    \napp\n: \nmy_app.apk\n,\n    \nplatform\n: \nAndroid\n,\n    \ndesiredCapabilities\n: {}\n  }\n}\n\n\n\n\nOnce you configured Appium, create the first test by running\n\n\ncodeceptjs gt\n\n\n\n\nBrowserStack Configuration\n\n\nIf you wish to use BrowserStack's \nAutomated Mobile App Testing\n platform. Configure the Appium helper like this:\n\n\nhelpers\n: {\n  \nAppium\n:\n    \napp\n: \nbs://\nhashed app-id\n,\n    \nhost\n: \nhub-cloud.browserstack.com\n,\n    \nport\n: 4444,\n    \nuser\n: \nBROWSERSTACK_USER\n,\n    \nkey\n: \nBROWSERSTACK_KEY\n,\n    \ndevice\n: \niPhone 7\n\n}\n\n\n\n\nHere is the full list of \ncapabilities\n.\n\n\nYou need to upload your Android app (.apk) or iOS app (.ipa) to the BrowserStack servers using the REST API before running your tests. The App URL (\nbs://hashed appid\n) is returned in the response of this call.\n\n\ncurl -u \nUSERNAME:ACCESS_KEY\n \\\n-X POST \nhttps://api-cloud.browserstack.com/app-automate/upload\n \\\n-F \nfile=@/path/to/app/file/Application-debug.apk\n\n\n\n\n\nWriting a Test\n\n\nA test is written in a scenario-driven manner, listing an actions taken by a user.\nThis is the sample test for a native mobile application:\n\n\nScenario('test registration', (I) =\n {\n  I.click('~startUserRegistrationCD');\n  I.fillField('~inputUsername', 'davert');\n  I.fillField('~inputEmail', 'davert@codecept.io');\n  I.fillField('~inputPassword', '123456');\n  I.hideDeviceKeyboard();\n  I.click('~input_preferredProgrammingLanguage');\n  I.click('Javascript');\n  I.checkOption('#io.demo.testapp:id/input_adds');\n  I.click('Register User (verify)');\n  I.swipeUp(\n#io.selendroid.testapp:id/LinearLayout1\n);\n  I.see('Javascript'); // see on the screen\n  I.see('davert', '~label_username_data'); // see in element\n});\n\n\n\n\nMobile test is pretty similar to a web test. And it is much the same, if you test hybrid app with a web view context inside.\nHowever, mobile apps do not have URLs, Cookies, they have other features which may vary on a running platform.\n\n\nThere are mobile-only methods like:\n\n\n\n\nswipeUp\n, \nswipeLeft\n, ...\n\n\nhideDeviceKeyboard\n,\n\n\nseeAppIsInstalled\n, \ninstallApp\n, \nremoveApp\n, \nseeAppIsNotInstalled\n - Android only\n\n\n\n\nand \nothers\n.\n\n\nLocating Elements\n\n\nTo start writing a test it is important to understand how to locate elements for native mobile applications.\nIn both Android and iPhone elements are defined in XML format and can be searched by XPath locators.\n\n\nI.seeElement('//android.widget.ScrollView/android.widget.LinearLayout')'\n\n\n\n\nCSS locators are not supported in native mobile apps, you need to switch to web context to use them.\n\n\nElements can also be located by their accessability id, available both at Android and iOS.\nAccessibility id is recommended to use for locating element, as it rarely changed.\n\n\n\n\niOS uses \nUIAccessibilityIdentification\n\n\nAndroid \naccessibility id\n matches the content-description\n\n\nWeb view uses \n[aria-label]\n attribute as accessibility id\n\n\n\n\nAdd \n~\n prefix to search for element by its accessibility id:\n\n\nI.seeElement('~startUserRegistrationButton');\n\n\n\n\nElements can also have ids, which can be located with \n#\n prefix.\nOn Android it it is important to keep full package name in id locator:\n\n\nI.seeElement('#io.selendroid.testapp:id/inputUsername');\n\n\n\n\nButtons can be matched by their visible text:\n\n\nI.tap('Click me!');\nI.click('Click me!');\n\n\n\n\nNative iOS/Android locators can be used with \nandroid=\n and \nios=\n prefixes. \nLearn more\n.\n\n\nBut how to get all those locators? We recommend to use \nAppium Inspector\n.\n\n\nFor Android you can use \nUI Automator Viewer\n bundled with Android SDK:\n\n\n\n\nHybrid Apps and Contexts\n\n\nMobile applications may have different contexts. For instance, there can be native view and web view with a browser instance in it.\n\n\nTo execute commands in context of a webview use \nwithin('webview')\n function:\n\n\nI.click('~startWebView');\nwithin('webview', () =\n {\n  I.see('Preferred car');\n  I.click('Send me your name!');\n});\n\n\n\n\nIt will locate first available webview, switch to it, and switch back to native application after.\nInside WebView all browser features are enabled: CSS locators, JavaScript, etc.\n\n\nTo set a specific context use \n{ web: 'webview.context' }\n instead:\n\n\nwithin({webview: 'MyWEBVIEW_com.my.app'}, () =\n );\n\n\n\n\nAlternatively use \nswitchToWeb\n or \nswitchToNative\n methods to switch between contexts.\n\n\nI.click('~startWebView');\nI.switchToWeb();\nI.see('Preferred car');\nI.click('Send me your name!');\nI.switchToNative();\n\n\n\n\nTo get a list of all contexts use \ngrabAllContexts\n method:\n\n\nlet contexts = await I.grabAllContexts();\n\n\n\n\nCross-Platform Testing\n\n\nIt is often happen that mobile applications behave similarly on different platforms. Can we build one test for them? Yes!\nCodeceptJS provides a way to specify different locators for Android and iOS platforms:\n\n\nI.click({android: '//android.widget.Button', ios: '//UIAApplication[1]/UIAWindow[1]/UIAButton[1]'});\n\n\n\n\nIn case some code should be executed on one platform and ignored on others use \nrunOnAndroid\n and \nrunOnIOS\n methods:\n\n\nI.runOnAndroid(() =\n {\n  I.click('Hello Android');\n});\nI.runOnIOS(() =\n {\n  I.click('Hello iOS');\n});\n\n\n\n\nThe same code can be shared for web applications as well. To execute some code in web browser only, use \nI.runInWeb\n:\n\n\nI.runInWeb(() =\n {\n  I.amOnPage('/login'); // not available for mobile\n  I.fillField('name', 'jon');\n  I.fillField('password', '123456');\n  I.click('Login');\n  I.waitForElement('#success'); // no available for mobile\n});\n\n\n\n\nJust as you can specify android, and ios-specific locators, you can do so for web:\n\n\nI.click({web: '#login', ios: '//UIAApplication[1]/UIAWindow[1]/UIAButton[1]'});\n\n\n\n\ndone()", 
            "title": "Mobile Testing"
        }, 
        {
            "location": "/mobile/#mobile-testing", 
            "text": "CodeceptJS allows to test mobile and hybrid apps in a similar manner web applications are tested.\nSuch tests are executed using  Appium  on emulated or physical devices. Also, Appium allows to test web application on mobile devices.  What makes CodeceptJS better for mobile testing?\nTake a look. Here is the sample test for a native mobile application written in CodeceptJS:  I.seeAppIsInstalled( io.super.app );\nI.click('~startUserRegistrationCD');\nI.fillField('~email of the customer', 'Nothing special'));\nI.see('davert@codecept.io', '~email of the customer'));\nI.clearField('~email of the customer'));\nI.dontSee('Nothing special', '~email of the customer'));\nI.seeElement({\n  android: 'android.widget.Button',\n  ios: '//UIAApplication[1]/UIAWindow[1]/UIAButton[1]'\n});  This test is easy to read and write. Also it will work both on iOS and Android devices.\nDoesn't it sound cool?", 
            "title": "Mobile Testing"
        }, 
        {
            "location": "/mobile/#setting-up", 
            "text": "Ensure that you have  CodeceptJS installed .\nYou will also need to install  Appium .\nWe suggest to use  appium-doctor  to check if your system is ready for mobile testing.  npm i -g appium-doctor  If everything is OK, continue with installing Appium. If not, consider using cloud based alternatives like  SauceLabs  or  BrowserStack . Cloud services provide hosted appium with real and emulated mobile devices.  To install Appium use npm:  npm i -g appium  Then you need to prepare application for execution.\nIt should be packed into apk (for Android) or .ipa (for iOS) or zip.  Next, is to launch the emulator or connect physical device.\nOnce they are prepared, launch Appium:  appium  To run mobile test you need either an device emulator (available with Android SDK or iOS), real device connected for mobile testing. Alternatively, you may execute Appium with device emulator inside Docker container.  CodeceptJS should be installed with webdriverio support:  npm install -g codeceptjs webdriverio", 
            "title": "Setting Up"
        }, 
        {
            "location": "/mobile/#configuring", 
            "text": "Initialize CodeceptJS with  init  command:  codeceptjs init  Select  Appium helper  when asked.  ? What helpers do you want to use?\n \u25ef WebDriverIO\n \u25ef Protractor\n \u25ef Puppeteer\n \u25ef Nightmare\n\u276f\u25c9 Appium\n \u25ef REST  You will also be asked for the platform and the application package.  ? [Appium] Application package. Path to file or url  Check the newly created  codecept.json  configuration file.\nYou may want to set some additional Appium settings via  desiredCapabilities  helpers : {\n   Appium : {\n     app :  my_app.apk ,\n     platform :  Android ,\n     desiredCapabilities : {}\n  }\n}  Once you configured Appium, create the first test by running  codeceptjs gt", 
            "title": "Configuring"
        }, 
        {
            "location": "/mobile/#browserstack-configuration", 
            "text": "If you wish to use BrowserStack's  Automated Mobile App Testing  platform. Configure the Appium helper like this:  helpers : {\n   Appium :\n     app :  bs:// hashed app-id ,\n     host :  hub-cloud.browserstack.com ,\n     port : 4444,\n     user :  BROWSERSTACK_USER ,\n     key :  BROWSERSTACK_KEY ,\n     device :  iPhone 7 \n}  Here is the full list of  capabilities .  You need to upload your Android app (.apk) or iOS app (.ipa) to the BrowserStack servers using the REST API before running your tests. The App URL ( bs://hashed appid ) is returned in the response of this call.  curl -u  USERNAME:ACCESS_KEY  \\\n-X POST  https://api-cloud.browserstack.com/app-automate/upload  \\\n-F  file=@/path/to/app/file/Application-debug.apk", 
            "title": "BrowserStack Configuration"
        }, 
        {
            "location": "/mobile/#writing-a-test", 
            "text": "A test is written in a scenario-driven manner, listing an actions taken by a user.\nThis is the sample test for a native mobile application:  Scenario('test registration', (I) =  {\n  I.click('~startUserRegistrationCD');\n  I.fillField('~inputUsername', 'davert');\n  I.fillField('~inputEmail', 'davert@codecept.io');\n  I.fillField('~inputPassword', '123456');\n  I.hideDeviceKeyboard();\n  I.click('~input_preferredProgrammingLanguage');\n  I.click('Javascript');\n  I.checkOption('#io.demo.testapp:id/input_adds');\n  I.click('Register User (verify)');\n  I.swipeUp( #io.selendroid.testapp:id/LinearLayout1 );\n  I.see('Javascript'); // see on the screen\n  I.see('davert', '~label_username_data'); // see in element\n});  Mobile test is pretty similar to a web test. And it is much the same, if you test hybrid app with a web view context inside.\nHowever, mobile apps do not have URLs, Cookies, they have other features which may vary on a running platform.  There are mobile-only methods like:   swipeUp ,  swipeLeft , ...  hideDeviceKeyboard ,  seeAppIsInstalled ,  installApp ,  removeApp ,  seeAppIsNotInstalled  - Android only   and  others .", 
            "title": "Writing a Test"
        }, 
        {
            "location": "/mobile/#locating-elements", 
            "text": "To start writing a test it is important to understand how to locate elements for native mobile applications.\nIn both Android and iPhone elements are defined in XML format and can be searched by XPath locators.  I.seeElement('//android.widget.ScrollView/android.widget.LinearLayout')'  CSS locators are not supported in native mobile apps, you need to switch to web context to use them.  Elements can also be located by their accessability id, available both at Android and iOS.\nAccessibility id is recommended to use for locating element, as it rarely changed.   iOS uses  UIAccessibilityIdentification  Android  accessibility id  matches the content-description  Web view uses  [aria-label]  attribute as accessibility id   Add  ~  prefix to search for element by its accessibility id:  I.seeElement('~startUserRegistrationButton');  Elements can also have ids, which can be located with  #  prefix.\nOn Android it it is important to keep full package name in id locator:  I.seeElement('#io.selendroid.testapp:id/inputUsername');  Buttons can be matched by their visible text:  I.tap('Click me!');\nI.click('Click me!');  Native iOS/Android locators can be used with  android=  and  ios=  prefixes.  Learn more .  But how to get all those locators? We recommend to use  Appium Inspector .  For Android you can use  UI Automator Viewer  bundled with Android SDK:", 
            "title": "Locating Elements"
        }, 
        {
            "location": "/mobile/#hybrid-apps-and-contexts", 
            "text": "Mobile applications may have different contexts. For instance, there can be native view and web view with a browser instance in it.  To execute commands in context of a webview use  within('webview')  function:  I.click('~startWebView');\nwithin('webview', () =  {\n  I.see('Preferred car');\n  I.click('Send me your name!');\n});  It will locate first available webview, switch to it, and switch back to native application after.\nInside WebView all browser features are enabled: CSS locators, JavaScript, etc.  To set a specific context use  { web: 'webview.context' }  instead:  within({webview: 'MyWEBVIEW_com.my.app'}, () =  );  Alternatively use  switchToWeb  or  switchToNative  methods to switch between contexts.  I.click('~startWebView');\nI.switchToWeb();\nI.see('Preferred car');\nI.click('Send me your name!');\nI.switchToNative();  To get a list of all contexts use  grabAllContexts  method:  let contexts = await I.grabAllContexts();", 
            "title": "Hybrid Apps and Contexts"
        }, 
        {
            "location": "/mobile/#cross-platform-testing", 
            "text": "It is often happen that mobile applications behave similarly on different platforms. Can we build one test for them? Yes!\nCodeceptJS provides a way to specify different locators for Android and iOS platforms:  I.click({android: '//android.widget.Button', ios: '//UIAApplication[1]/UIAWindow[1]/UIAButton[1]'});  In case some code should be executed on one platform and ignored on others use  runOnAndroid  and  runOnIOS  methods:  I.runOnAndroid(() =  {\n  I.click('Hello Android');\n});\nI.runOnIOS(() =  {\n  I.click('Hello iOS');\n});  The same code can be shared for web applications as well. To execute some code in web browser only, use  I.runInWeb :  I.runInWeb(() =  {\n  I.amOnPage('/login'); // not available for mobile\n  I.fillField('name', 'jon');\n  I.fillField('password', '123456');\n  I.click('Login');\n  I.waitForElement('#success'); // no available for mobile\n});  Just as you can specify android, and ios-specific locators, you can do so for web:  I.click({web: '#login', ios: '//UIAApplication[1]/UIAWindow[1]/UIAButton[1]'});", 
            "title": "Cross-Platform Testing"
        }, 
        {
            "location": "/mobile/#done", 
            "text": "", 
            "title": "done()"
        }, 
        {
            "location": "/helpers/", 
            "text": "Helpers\n\n\nHelpers is a core concept of CodeceptJS. Helper is a wrapper around various libraries providing unified interface around them.\nMethods of Helper class will be available in tests in \nI\n object. This abstracts test scenarios from the implementation and allows easy switching between backends.\nFunctionality of CodeceptJS should be extended by writing a custom helpers.\n\n\nHelpers can also be installed as Node packages and required by corresponding Node modules\n\n\nYou can either access core Helpers (and underlying libraries) or create a new from scratch.\n\n\nDevelopment\n\n\nHelpers can be created by running a generator command:\n\n\ncodeceptjs gh\n\n\n\n\n(or \ngenerate helper\n)\n\n\nThis command generates a basic helper and appends it to \nhelpers\n section of config file:\n\n\nhelpers\n: {\n  \nWebDriverIO\n: {  },\n  \nMyHelper\n: {\n    \nrequire\n: \n./path/to/module.js\n\n  }\n}\n\n\n\n\nHelpers are ES6 classes inherited from \ncorresponding abstract class\n.\nGenerated Helper will be added to \ncodecept.json\n config. It should look like this:\n\n\n'use strict';\n\nlet Helper = codecept_helper;\n\nclass MyHelper extends Helper {\n\n  // before/after hooks\n  _before() {\n    // remove if not used\n  }\n\n  _after() {\n    // remove if not used\n  }\n\n  // add custom methods here\n  // If you need to access other helpers\n  // use: this.helpers['helperName']\n\n}\n\nmodule.exports = MyHelper;\n\n\n\n\nAll methods except those starting from \n_\n will be added to \nI\n object and treated as test actions.\nEvery method should return a value in order to be appended into promise chain.\n\n\nAfter writing your own custom helpers here you can always update CodeceptJS TypeScript Type Definitions running:\n\n\ncodeceptjs def .\n\n\n\n\nThis way, if your tests are written with TypeScript, your IDE will be able to leverage features like autocomplete and so on.\n\n\nWebDriverIO Example\n\n\nNext example demonstrates how to use WebDriverIO library to create your own test action.\nMethod \nseeAuthentication\n will use \nclient\n instance of WebDriverIO to get access to cookies.\nStandard NodeJS assertion library will be used (you can use any).\n\n\n'use strict';\nlet Helper = codecept_helper;\n\n// use any assertion library you like\nlet assert = require('assert');\n\nclass MyHelper extends Helper {\n  /**\n   * checks that authentication cookie is set\n   */\n  async seeAuthentication() {\n    // access current client of WebDriverIO helper\n    let client = this.helpers['WebDriverIO'].browser;\n\n    // get all cookies according to http://webdriver.io/api/protocol/cookie.html\n    // any helper method should return a value in order to be added to promise chain\n    const res = await client.cookie();\n    // get values\n    let cookies = res.value;\n    for (let k in cookies) {\n      // check for a cookie\n      if (cookies[k].name != 'logged_in') continue;\n      assert.equal(cookies[k].value, 'yes');\n      return;\n    }\n    assert.fail(cookies, 'logged_in', \nAuth cookie not set\n);\n  }\n}\n\nmodule.exports = MyHelper;\n\n\n\n\nProtractor Example\n\n\nProtractor example demonstrates usage of global \nelement\n and \nby\n objects.\nHowever \nbrowser\n should be accessed from a helper instance via \nthis.helpers['Protractor']\n;\nWe also use \nchai-as-promised\n library to have nice assertions with promises.\n\n\n'use strict';\nlet Helper = codecept_helper;\n\n// use any assertion library you like\nvar chai = require('chai');\nvar chaiAsPromised = require('chai-as-promised');\nchai.use(chaiAsPromised);\nvar expect = chai.expect;\n\nclass MyHelper extends Helper {\n  /**\n   * checks that authentication cookie is set\n   */\n  seeInHistory(historyPosition, value) {\n    // access browser instance from Protractor helper\n    this.helpers['Protractor'].browser.refresh();\n\n    // you can use `element` as well as in protractor\n    var history = element.all(by.repeater('result in memory'));\n\n    // use chai as promised for better assertions\n    // end your method with `return` to handle promises\n    return expect(history.get(historyPosition).getText()).to.eventually.equal(value);\n  }\n}\n\nmodule.exports = MyHelper;\n\n\n\n\nConfiguration\n\n\nHelpers should be enabled inside \ncodecept.json\n or \ncodecept.conf.js\n files. Command \ngenerate helper\n\ndoes that for you, however you can enable them manually by placing helper to \nhelpers\n section inside config file.\nYou can also pass additional config options to your helper from a config - \n(please note, this example contains comments, while JSON format doesn't support them)\n:\n\n\nhelpers\n: {\n  // here goes standard helpers:\n  // WebDriverIO, Protractor, Nightmare, etc...\n  // and their configuration\n  \nMyHelper\n: {\n    \nrequire\n: \n./my_helper.js\n, // path to module\n    \ndefaultHost\n: \nhttp://mysite.com\n // custom config param\n  }\n\n}\n\n\n\n\nConfig values will be stored inside helper in \nthis.config\n. To get \ndefaultHost\n value you can use\n\n\nthis.config.defaultHost\n\n\n\n\nin any place of your helper. You can also redefine config options inside a constructor:\n\n\nconstructor(config) {\n  config.defaultHost += '/api';\n  console.log(config.defaultHost); // http://mysite.com/api\n  super(config);\n}\n\n\n\n\nHooks\n\n\nHelpers may contain several hooks you can use to handle events of a test.\nImplement corresponding methods to them.\n\n\n\n\n_init\n - before all tests\n\n\n_before\n - before a test\n\n\n_beforeStep\n - before each step\n\n\n_afterStep\n - after each step\n\n\n_beforeSuite\n - before each suite\n\n\n_afterSuite\n - after each suite\n\n\n_passed\n - after a test passed\n\n\n_failed\n - after a test failed\n\n\n\n\nEach implemented method should return a value as they will be added to global promise chain as well.\n\n\nHook Usage Examples\n\n\n1)  Failing if JS error occur in WebDriverIO:\n\n\nclass JSFailure extends codecept_helper {\n\n  _before() {\n    this.err = null;\n    this.helpers['WebDriverIO'].browser.on('error', (e) =\n this.err = e);\n  }\n\n  _afterStep() {\n    if (this.err) throw new Error('Browser JS error '+this.err);\n  }\n}\n\nmodule.exports = JSFailure;\n\n\n\n\n2)  Wait for Ajax requests to complete after \nclick\n:\n\n\nclass JSWait extends codecept_helper {\n\n  _afterStep(step) {\n    if (step.name == 'click') {\n      var jqueryActive = () =\n jQuery.active == 0;\n      return this.helpers['WebDriverIO'].waitUntil(jqueryActive);\n    }\n  }\n}\n\nmodule.exports = JSWait;\n\n\n\n\nConditional Retries\n\n\nIt is possible to execute global conditional retries to handle unforseen errors.\nLost connections and network issues are good candidates to be retried whenever they appear.\n\n\nThis can be done inside a helper using the global \npromise recorder\n:\n\n\nExample: Retrying rendering errors in Puppeteer.\n\n\n_before() {\n  const recorder = require('codeceptjs').recorder;\n  recorder.retry({\n    retries: 2,\n    when: err =\n err.message.indexOf('Cannot find context with specified id') \n -1,\n  });\n}\n\n\n\n\nrecorder.retry\n acts similarly to \nI.retry()\n and accepts the same parameters. It expects the \nwhen\n parameter to be set so it would handle only specific errors and not to retry for every failed step.\n\n\nRetry rules are available in array \nrecorder.retries\n. The last retry rule can be disabled by running \nrecorder.retries.pop()\n;\n\n\ndone()", 
            "title": "Helpers"
        }, 
        {
            "location": "/helpers/#helpers", 
            "text": "Helpers is a core concept of CodeceptJS. Helper is a wrapper around various libraries providing unified interface around them.\nMethods of Helper class will be available in tests in  I  object. This abstracts test scenarios from the implementation and allows easy switching between backends.\nFunctionality of CodeceptJS should be extended by writing a custom helpers.  Helpers can also be installed as Node packages and required by corresponding Node modules  You can either access core Helpers (and underlying libraries) or create a new from scratch.", 
            "title": "Helpers"
        }, 
        {
            "location": "/helpers/#development", 
            "text": "Helpers can be created by running a generator command:  codeceptjs gh  (or  generate helper )  This command generates a basic helper and appends it to  helpers  section of config file:  helpers : {\n   WebDriverIO : {  },\n   MyHelper : {\n     require :  ./path/to/module.js \n  }\n}  Helpers are ES6 classes inherited from  corresponding abstract class .\nGenerated Helper will be added to  codecept.json  config. It should look like this:  'use strict';\n\nlet Helper = codecept_helper;\n\nclass MyHelper extends Helper {\n\n  // before/after hooks\n  _before() {\n    // remove if not used\n  }\n\n  _after() {\n    // remove if not used\n  }\n\n  // add custom methods here\n  // If you need to access other helpers\n  // use: this.helpers['helperName']\n\n}\n\nmodule.exports = MyHelper;  All methods except those starting from  _  will be added to  I  object and treated as test actions.\nEvery method should return a value in order to be appended into promise chain.  After writing your own custom helpers here you can always update CodeceptJS TypeScript Type Definitions running:  codeceptjs def .  This way, if your tests are written with TypeScript, your IDE will be able to leverage features like autocomplete and so on.", 
            "title": "Development"
        }, 
        {
            "location": "/helpers/#webdriverio-example", 
            "text": "Next example demonstrates how to use WebDriverIO library to create your own test action.\nMethod  seeAuthentication  will use  client  instance of WebDriverIO to get access to cookies.\nStandard NodeJS assertion library will be used (you can use any).  'use strict';\nlet Helper = codecept_helper;\n\n// use any assertion library you like\nlet assert = require('assert');\n\nclass MyHelper extends Helper {\n  /**\n   * checks that authentication cookie is set\n   */\n  async seeAuthentication() {\n    // access current client of WebDriverIO helper\n    let client = this.helpers['WebDriverIO'].browser;\n\n    // get all cookies according to http://webdriver.io/api/protocol/cookie.html\n    // any helper method should return a value in order to be added to promise chain\n    const res = await client.cookie();\n    // get values\n    let cookies = res.value;\n    for (let k in cookies) {\n      // check for a cookie\n      if (cookies[k].name != 'logged_in') continue;\n      assert.equal(cookies[k].value, 'yes');\n      return;\n    }\n    assert.fail(cookies, 'logged_in',  Auth cookie not set );\n  }\n}\n\nmodule.exports = MyHelper;", 
            "title": "WebDriverIO Example"
        }, 
        {
            "location": "/helpers/#protractor-example", 
            "text": "Protractor example demonstrates usage of global  element  and  by  objects.\nHowever  browser  should be accessed from a helper instance via  this.helpers['Protractor'] ;\nWe also use  chai-as-promised  library to have nice assertions with promises.  'use strict';\nlet Helper = codecept_helper;\n\n// use any assertion library you like\nvar chai = require('chai');\nvar chaiAsPromised = require('chai-as-promised');\nchai.use(chaiAsPromised);\nvar expect = chai.expect;\n\nclass MyHelper extends Helper {\n  /**\n   * checks that authentication cookie is set\n   */\n  seeInHistory(historyPosition, value) {\n    // access browser instance from Protractor helper\n    this.helpers['Protractor'].browser.refresh();\n\n    // you can use `element` as well as in protractor\n    var history = element.all(by.repeater('result in memory'));\n\n    // use chai as promised for better assertions\n    // end your method with `return` to handle promises\n    return expect(history.get(historyPosition).getText()).to.eventually.equal(value);\n  }\n}\n\nmodule.exports = MyHelper;", 
            "title": "Protractor Example"
        }, 
        {
            "location": "/helpers/#configuration", 
            "text": "Helpers should be enabled inside  codecept.json  or  codecept.conf.js  files. Command  generate helper \ndoes that for you, however you can enable them manually by placing helper to  helpers  section inside config file.\nYou can also pass additional config options to your helper from a config -  (please note, this example contains comments, while JSON format doesn't support them) :  helpers : {\n  // here goes standard helpers:\n  // WebDriverIO, Protractor, Nightmare, etc...\n  // and their configuration\n   MyHelper : {\n     require :  ./my_helper.js , // path to module\n     defaultHost :  http://mysite.com  // custom config param\n  }\n\n}  Config values will be stored inside helper in  this.config . To get  defaultHost  value you can use  this.config.defaultHost  in any place of your helper. You can also redefine config options inside a constructor:  constructor(config) {\n  config.defaultHost += '/api';\n  console.log(config.defaultHost); // http://mysite.com/api\n  super(config);\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/helpers/#hooks", 
            "text": "Helpers may contain several hooks you can use to handle events of a test.\nImplement corresponding methods to them.   _init  - before all tests  _before  - before a test  _beforeStep  - before each step  _afterStep  - after each step  _beforeSuite  - before each suite  _afterSuite  - after each suite  _passed  - after a test passed  _failed  - after a test failed   Each implemented method should return a value as they will be added to global promise chain as well.  Hook Usage Examples  1)  Failing if JS error occur in WebDriverIO:  class JSFailure extends codecept_helper {\n\n  _before() {\n    this.err = null;\n    this.helpers['WebDriverIO'].browser.on('error', (e) =  this.err = e);\n  }\n\n  _afterStep() {\n    if (this.err) throw new Error('Browser JS error '+this.err);\n  }\n}\n\nmodule.exports = JSFailure;  2)  Wait for Ajax requests to complete after  click :  class JSWait extends codecept_helper {\n\n  _afterStep(step) {\n    if (step.name == 'click') {\n      var jqueryActive = () =  jQuery.active == 0;\n      return this.helpers['WebDriverIO'].waitUntil(jqueryActive);\n    }\n  }\n}\n\nmodule.exports = JSWait;", 
            "title": "Hooks"
        }, 
        {
            "location": "/helpers/#conditional-retries", 
            "text": "It is possible to execute global conditional retries to handle unforseen errors.\nLost connections and network issues are good candidates to be retried whenever they appear.  This can be done inside a helper using the global  promise recorder :  Example: Retrying rendering errors in Puppeteer.  _before() {\n  const recorder = require('codeceptjs').recorder;\n  recorder.retry({\n    retries: 2,\n    when: err =  err.message.indexOf('Cannot find context with specified id')   -1,\n  });\n}  recorder.retry  acts similarly to  I.retry()  and accepts the same parameters. It expects the  when  parameter to be set so it would handle only specific errors and not to retry for every failed step.  Retry rules are available in array  recorder.retries . The last retry rule can be disabled by running  recorder.retries.pop() ;  done()", 
            "title": "Conditional Retries"
        }, 
        {
            "location": "/data/", 
            "text": "Data Management\n\n\nThis chapter describes data management for external sources. If you are looking for using Data Sets in tests, see \nData Driven Tests\n section\n\n\nManaging data for tests is always a tricky issue. How isolate data between tests, how to prepare data for different tests, etc.\nThere are different approaches to solve it:\n\n\n\n\nreset database completely between tests\n\n\ncreate unique non-intersecting data sets per each test\n\n\ncreate and delete data for a test\n\n\n\n\nThe most efficient way would be to allow test to control its data, i.e. the 3rd option.\nHowever, accessing database directly is not a good idea as database vendor, schema and data are used by application internally and are out of scope of acceptance test.\n\n\nToday all modern web applications have REST API. So it is a good idea to use it to create data for a test and delete it after.\nAPI supposed to be a stable interface and it can be used by acceptance tests. CodeceptJS provides 2 helpers for Data Management via REST API.\n\n\nREST\n\n\nREST helper\n uses \nUnirest\n library to send HTTP requests to application.\nHowever, it doesn't provide tools for testing APIs, so it should be paired with WebDriverIO, Nightmare or Protractor helpers for browser testing.\n\n\nEnable REST helper in global config. It is recommended to set \nendpoint\n, a base URL for all API requests.\nIf you need some authorization you can optionally set default headers too.\n\n\nSee the sample config:\n\n\nhelpers\n: {\n  \nREST\n: {\n    \nendpoint\n: \nhttp://localhost/api/v1/\n,\n    \ndefaultHeaders\n: {\n      \nAuth\n: \n11111\n\n    }\n  },\n\n  \nWebDriverIO\n : {\n    \nbrowser\n: \nchrome\n\n  }\n}\n\n\n\n\nREST helper provides basic methods to send requests to application:\n\n\nI.sendGetRequest()\nI.sendPostRequest()\nI.sendPutRequest()\nI.sendPatchRequest()\nI.sendDeleteRequest()\n\n\n\n\nAs well as a method for setting headers: \nhaveRequestHeaders\n.\n\n\nHere is a usage example:\n\n\nlet postId = null;\n\nScenario('check post page', async (I)  =\n {\n  // valid access token\n  I.haveRequestHeaders({auth: '1111111'});\n  // get the first user\n  let user = await I.sendGetRequest('/api/users/1');\n  // create a post and save its Id\n  postId = await I.sendPostRequest('/api/posts', { author: user.id, body: 'some text' });\n  // open browser page of new post\n  I.amOnPage('/posts/2.html');\n  I.see('some text', 'p.body');\n});\n\n// cleanup created data\nAfter((I) =\n {\n  I.sendDeleteRequest('/api/posts/'+postId);\n});\n\n\n\n\nThis can also be used to emulate Ajax requests:\n\n\nI.sendPostRequest('/update-status', {}, { http_x_requested_with: 'xmlhttprequest' });\n\n\n\n\nData Generation with Factories\n\n\nThis concept is extended by \nApiDataFactory\n helper.\nIt builds data according to defined rules and uses API to store them and automatically clean them up after a test,\nThis way setting data for a test is as simple as writing:\n\n\nlet post = yield I.have('post');\nI.haveMultiple('comment', 5, { postId: post.id});\n\n\n\n\nJust define how many items of any kind you need and ApiDataFactory will create them for you.\nHowever, to make this work some preparations required.\n\n\nAt first, you need data generation libraries which are \nRosie\n and \nFaker\n. Faker can generate random names, emails, texts, and Rosie uses them\nto generate objects using factories.\n\n\nInstall rosie and faker to create a first factory:\n\n\nnpm i rosie faker --save-dev\n\n\n\n\nThen create a module which will export a factory for an entity.\n\n\nSee the example providing a factory for User generation:\n\n\n// factories/post.js\nvar Factory = require('rosie').Factory;\nvar faker = require('faker');\n\nmodule.exports = new Factory()\n  .attr('name', () =\n faker.name.findName())\n  .attr('email', () =\n faker.internet.email());\n\n\n\n\nNext is to configure helper to match factories with API:\n\n\n \nApiDataFactory\n: {\n   \nendpoint\n: \nhttp://user.com/api\n,\n   \nfactories\n: {\n     \nuser\n: {\n        \nuri\n: \n/users\n\n        \nfactory\n: \n./factories/user\n\n     }\n   }\n }\n\n\n\n\nThen, calling \nI.have('user')\n inside a test will create a new user for you.\nThis is done by sending POST request to \n/api/users\n URL. Response is returned and can be used in tests.\n\n\nAt the end of a test ApiDataFactory will clean up created record for you. This is done by collecting\nids from crated records and running \nDELETE /api/users/{id}\n requests at the end of a test.\nThis rules can be customized in helper configuration.\n\n\n\n\ndone()", 
            "title": "Data Management"
        }, 
        {
            "location": "/data/#data-management", 
            "text": "This chapter describes data management for external sources. If you are looking for using Data Sets in tests, see  Data Driven Tests  section  Managing data for tests is always a tricky issue. How isolate data between tests, how to prepare data for different tests, etc.\nThere are different approaches to solve it:   reset database completely between tests  create unique non-intersecting data sets per each test  create and delete data for a test   The most efficient way would be to allow test to control its data, i.e. the 3rd option.\nHowever, accessing database directly is not a good idea as database vendor, schema and data are used by application internally and are out of scope of acceptance test.  Today all modern web applications have REST API. So it is a good idea to use it to create data for a test and delete it after.\nAPI supposed to be a stable interface and it can be used by acceptance tests. CodeceptJS provides 2 helpers for Data Management via REST API.", 
            "title": "Data Management"
        }, 
        {
            "location": "/data/#rest", 
            "text": "REST helper  uses  Unirest  library to send HTTP requests to application.\nHowever, it doesn't provide tools for testing APIs, so it should be paired with WebDriverIO, Nightmare or Protractor helpers for browser testing.  Enable REST helper in global config. It is recommended to set  endpoint , a base URL for all API requests.\nIf you need some authorization you can optionally set default headers too.  See the sample config:  helpers : {\n   REST : {\n     endpoint :  http://localhost/api/v1/ ,\n     defaultHeaders : {\n       Auth :  11111 \n    }\n  },\n\n   WebDriverIO  : {\n     browser :  chrome \n  }\n}  REST helper provides basic methods to send requests to application:  I.sendGetRequest()\nI.sendPostRequest()\nI.sendPutRequest()\nI.sendPatchRequest()\nI.sendDeleteRequest()  As well as a method for setting headers:  haveRequestHeaders .  Here is a usage example:  let postId = null;\n\nScenario('check post page', async (I)  =  {\n  // valid access token\n  I.haveRequestHeaders({auth: '1111111'});\n  // get the first user\n  let user = await I.sendGetRequest('/api/users/1');\n  // create a post and save its Id\n  postId = await I.sendPostRequest('/api/posts', { author: user.id, body: 'some text' });\n  // open browser page of new post\n  I.amOnPage('/posts/2.html');\n  I.see('some text', 'p.body');\n});\n\n// cleanup created data\nAfter((I) =  {\n  I.sendDeleteRequest('/api/posts/'+postId);\n});  This can also be used to emulate Ajax requests:  I.sendPostRequest('/update-status', {}, { http_x_requested_with: 'xmlhttprequest' });", 
            "title": "REST"
        }, 
        {
            "location": "/data/#data-generation-with-factories", 
            "text": "This concept is extended by  ApiDataFactory  helper.\nIt builds data according to defined rules and uses API to store them and automatically clean them up after a test,\nThis way setting data for a test is as simple as writing:  let post = yield I.have('post');\nI.haveMultiple('comment', 5, { postId: post.id});  Just define how many items of any kind you need and ApiDataFactory will create them for you.\nHowever, to make this work some preparations required.  At first, you need data generation libraries which are  Rosie  and  Faker . Faker can generate random names, emails, texts, and Rosie uses them\nto generate objects using factories.  Install rosie and faker to create a first factory:  npm i rosie faker --save-dev  Then create a module which will export a factory for an entity.  See the example providing a factory for User generation:  // factories/post.js\nvar Factory = require('rosie').Factory;\nvar faker = require('faker');\n\nmodule.exports = new Factory()\n  .attr('name', () =  faker.name.findName())\n  .attr('email', () =  faker.internet.email());  Next is to configure helper to match factories with API:    ApiDataFactory : {\n    endpoint :  http://user.com/api ,\n    factories : {\n      user : {\n         uri :  /users \n         factory :  ./factories/user \n     }\n   }\n }  Then, calling  I.have('user')  inside a test will create a new user for you.\nThis is done by sending POST request to  /api/users  URL. Response is returned and can be used in tests.  At the end of a test ApiDataFactory will clean up created record for you. This is done by collecting\nids from crated records and running  DELETE /api/users/{id}  requests at the end of a test.\nThis rules can be customized in helper configuration.   done()", 
            "title": "Data Generation with Factories"
        }, 
        {
            "location": "/bdd/", 
            "text": "Behavior Driven Development\n\n\nBehavior Driven Development (BDD) is a popular software development methodology. BDD is considered an extension of TDD, and is greatly inspired by \nAgile\n practices. The primary reason to choose BDD as your development process is to break down communication barriers between business and technical teams. BDD encourages the use of automated testing to verify all documented features of a project from the very beginning. This is why it is common to talk about BDD in the context of test frameworks (like CodeceptJS). The BDD approach, however, is about much more than testing - it is a common language for all team members to use during the development process.\n\n\nWhat is Behavior Driven Development\n\n\nBDD was introduced by \nDan North\n. He described it as:\n\n\n\n\noutside-in, pull-based, multiple-stakeholder, multiple-scale, high-automation, agile methodology. It describes a cycle of interactions with well-defined outputs, resulting in the delivery of working, tested software that matters.\n\n\n\n\nBDD has its own evolution from the days it was born, started by replacing \"test\" to \"should\" in unit tests, and moving towards powerful tools like Cucumber and Behat, which made user stories (human readable text) to be executed as an acceptance test.\n\n\nThe idea of story BDD can be narrowed to:\n\n\n\n\ndescribe features in a scenario with a formal text\n\n\nuse examples to make abstract things concrete\n\n\nimplement each step of a scenario for testing\n\n\nwrite actual code implementing the feature\n\n\n\n\nBy writing every feature in User Story format that is automatically executable as a test we ensure that: business, developers, QAs and managers are in the same boat.\n\n\nBDD encourages exploration and debate in order to formalize the requirements and the features that needs to be implemented by requesting to write the User Stories in a way that everyone can understand.\n\n\nBy making tests to be a part of User Story, BDD allows non-technical personnel to write (or edit) Acceptance tests.\n\n\nWith this procedure we also ensure that everyone in a team knows what has been developed, what has not, what has been tested and what has not.\n\n\nUbiquitous Language\n\n\nThe ubiquitous language is always referred as \ncommon\n language. That is it's main benefit. It is not a couple of our business specification's words, and not a couple of developer's technical terms. It is a common words and terms that can be understood by people for whom we are building the software and should be understood by developers. Establishing correct communication between this two groups people is vital for building successful project that will fit the domain and fulfill all business needs.\n\n\nEach feature of a product should be born from a talk between\n\n\n\n\nbusiness (analysts, product owner)\n\n\ndevelopers\n\n\nQAs\n\n\n\n\nwhich are known in BDD as \"three amigos\".\n\n\nSuch talks should produce written stories. There should be an actor that doing some things, the feature that should be fulfilled within the story and the result achieved.\n\n\nWe can try to write such simple story:\n\n\nAs a customer I want to buy several products\nI put first product with $600 price to my cart\nAnd then another one with $1000 price\nWhen I go to checkout process\nI should see that total number of products I want to buy is 2\nAnd my order amount is $1600\n\n\n\n\nAs we can see this simple story highlights core concepts that are called \ncontracts\n. We should fulfill those contracts to model software correctly. But how we can verify that those contracts are being satisfied? \nCucumber\n introduced a special language for such stories called \nGherkin\n. Same story transformed to Gherkin will look like this:\n\n\nFeature: checkout process\n  In order to buy products\n  As a customer\n  I want to be able to buy several products\n\n  Scenario:\n    Given I have product with $600 price in my cart\n    And I have product with $1000 price\n    When I go to checkout process\n    Then I should see that total number of products is 2\n    And my order amount is $1600\n\n\n\n\nCodeceptJS can execute this scenario step by step as an automated test\n.\nEvery step in this scenario requires a code which defines it.\n\n\nGherkin\n\n\nLet's learn some more about Gherkin format and then we will see how to execute it with CodeceptJS. We can enable Gherkin for current project by running \ngherkin:init\n command on \nalready initialized project\n:\n\n\ncodeceptjs gherkin:init\n\n\n\n\nIt will add \ngherkin\n section to the current config. It will also prepare directories for features and step definition. And it will create the first feature file for you.\n\n\nFeatures\n\n\nWhenever you start writing a story you are describing a specific feature of an application, with a set of scenarios and examples describing this feature. Let's open a feature file created by \ngherkin:init\n command, which is \nfeature/basic.feature\n.\n\n\nFeature: Business rules\n  In order to achieve my goals\n  As a persona\n  I want to be able to interact with a system\n\n  Scenario: do something\n    Given I have a defined step\n\n\n\n\nThis text should be rewritten to follow your buisness rules. Don't think about a web interface for a while.\nThink about how user interacts with your system and what goals they want to achieve. Then write interaction scenarios.\n\n\nScenarios\n\n\nScenarios are live examples of feature usage. Inside a feature file it should be written inside a \nFeature\n block. Each scenario should contain its title:\n\n\nFeature: checkout\n  In order to buy product\n  As a customer\n  I need to be able to checkout the selected products\n\nScenario: order several products\n\n\n\n\nScenarios are written in step-by-step manner using Given-When-Then approach. At start, scenario should describe its context with \nGiven\n keyword:\n\n\n  Given I have product with $600 price in my cart\n  And I have product with $1000 price in my cart\n\n\n\n\nHere we also use word \nAnd\n to extend the Given and not to repeat it in each line.\n\n\nThis is how we described the initial conditions. Next, we perform some action. We use \nWhen\n keyword for it:\n\n\n  When I go to checkout process\n\n\n\n\nAnd in the end we are verifying our expectation using \nThen\n keyword. The action changed the initial given state, and produced some results. Let's check that those results are what we actually expect.\n\n\n  Then I should see that total number of products is 2\n  And my order amount is $1600\n\n\n\n\nThis scenarios are nice as live documentation but they do not test anything yet. What we need next is to define how to run those steps.\nSteps can be defined by executing \ngherkin:snippets\n command:\n\n\ncodeceptjs gherkin:snippets\n\n\n\n\nThis will produce code templates for all undefined steps in all feature files of this suite.\nIt will also place stub definitions into \nstep_definitions/steps.js\n file.\nOur next step will be to define those steps and transforming feature-file into a valid test.\n\n\nStep Definitions\n\n\nStep definitions are placed in JavaScript file with Given/When/Then functions that map strings from feature file to functions:\n\n\nconst I = actor();\n\n// you can provide RegEx to match corresponding steps\nGiven(/I have product with \\$(\\d+) price/, (price) =\n {\n  I.amOnPage('/products');\n  I.click(`.product[data-price=${price}]`);\n  I.click('Add to cart');\n});\n\n// or a simple string\nWhen('I go to checkout process', () =\n {\n  I.click('Checkout');\n});\n\n// parameters are passed in via Cucumber expressions\nThen('I should see that total number of products is {int}', (num) =\n {\n  I.see(num, '.cart');\n});\nThen('my order amount is ${int}', (sum) =\n { // eslint-disable-line\n  I.see('Total: ' + sum);\n});\n\n\n\n\nSteps can be either strings or regular expressions. Parameters from string are passed as function arguments. To define parameters in a string we use \nCucumber expressions\n\n\nTo list all defined steps run \ngherkin:steps\n command:\n\n\ncodeceptjs gherkin:steps\n\n\n\n\nTo run tests and see step-by step output use \n--steps\n optoin:\n\n\ncodeceptjs run --steps\n\n\n\n\nTo see not only business steps but an actual performed steps use \n--debug\n flag:\n\n\ncodeceptjs run --debug\n\n\n\n\nAdvanced Gherkin\n\n\nLet's improve our BDD suite by using the advanced features of Gherkin language.\n\n\nBackground\n\n\nIf a group of scenarios have the same initial steps, let's that for dashboard we need always need to be logged in as administrator. We can use \nBackground\n section to do the required preparations and not to repeat same steps across scenarios.\n\n\nFeature: Dashboard\n  In order to view current state of business\n  As an owner\n  I need to be able to see reports on dashboard\n\n  Background:\n    Given I am logged in as administrator\n    And I open dashboard page\n\n\n\n\nSteps in background are defined the same way as in scenarios.\n\n\nTables\n\n\nScenarios can become more descriptive when you represent repeating data as tables. Instead of writing several steps \"I have product with :num1 $ price in my cart\" we can have one step with multiple values in it.\n\n\n  Given i have products in my cart\n    | name         | category    | price  |\n    | Harry Potter | Books       | 5      |\n    | iPhone 5     | Smartphones | 1200   |\n    | Nuclear Bomb | Weapons     | 100000 |\n\n\n\n\nTables is a recommended ways to pass arrays into test scenarios.\nInside a step definition data is stored in argument passed as \nDataTable\n JavaScript object.\nYou can iterate on it like this:\n\n\nGiven('I have products in my cart', (table) =\n { // eslint-disable-line\n  for (const id in table.rows) {\n    if (id \n 1) {\n      continue; // skip a header of a table\n    }\n\n    // go by row cells\n    const cells = table.rows[id].cells;\n\n    // take values\n    const name = cells[0].value;\n    const category = cells[1].value;\n    const price = cells[1].value;\n    // ...\n  }\n});\n\n\n\n\nExamples\n\n\nIn case scenarios represent the same logic but differ on data, we can use \nScenario Outline\n to provide different examples for the same behavior. Scenario outline is just like a basic scenario with some values replaced with placeholders, which are filled from a table. Each set of values is executed as a different test.\n\n\n  Scenario Outline: order discount\n    Given I have product with price \nprice\n$ in my cart\n    And discount for orders greater than $20 is 10 %\n    When I go to checkout\n    Then I should see overall price is \ntotal\n $\n\n    Examples:\n      | price | total |\n      | 10    | 10    |\n      | 20    | 20    |\n      | 21    | 18.9  |\n      | 30    | 27    |\n      | 50    | 45    |\n\n\n\n\nLong Strings\n\n\nText values inside a scenarios can be set inside a \n\"\"\"\n block:\n\n\n  Then i see in file \ncodecept.json\n\n\n\n{\n  \noutput\n: \n./output\n,\n  \nhelpers\n: {\n    \nPuppeteer\n: {\n      \nurl\n: \nhttp://localhost\n,\n      \nrestart\n: true,\n      \nwindowSize\n: \n1600x1200\n\n    }\n\n\n\n\n\n\nThis string can be accessed inside a \ncontent\n property of a last argument:\n\n\nThen('Then i see in file {string}', (file, text) =\n {\n  // file is a value of {string} from a title\n  const fileContent = fs.readFileSync(file).toString();\n  fileContent.should.include(text.content); // text.content is a value\n});\n\n\n\n\nTags\n\n\nGherkin scenarios and features can contain tags marked with \n@\n. Tags are appended to feature titles so you can easily filter by them when running tests:\n\n\ncodeceptjs run --grep \n@important\n\n\n\n\n\nTag should be placed before \nScenario:\n or before \nFeature:\n keyword. In the last case all scenarios of that feature will be added to corresponding group.\n\n\nConfiguration\n\n\n\n\ngherkin\n\n\nfeatures\n - path to feature files\n\n\nsteps\n - array of files with step definitions\n\n\n\n\ngherkin\n: {\n  \nfeatures\n: \n./features/*.feature\n,\n  \nsteps\n: [\n    \n./step_definitions/steps.js\n\n  ]\n}\n\n\n\n\nTests vs Features\n\n\nIt is common to think that BDD scenario is equal to test. But it's actually not. Not every test should be described as a feature. Not every test is written to test real business value. For instance, regression tests or negative scenario tests are not bringing any value to business. Business analysts don't care about scenario reproducing bug #13, or what error message is displayed when user tries to enter wrong password on login screen. Writing all the tests inside a feature files creates informational overflow.\n\n\nIn CodeceptJS you can combine tests written in Gherkin format with classical acceptance tests. This way you can keep your feature files compact with minimal set of scenarios, and write regular tests to cover all cases. Please note, feature files will be executed before tests.\n\n\nTo run only features use \n--features\n option:\n\n\ncodeceptjs run --features\n\n\n\n\nYou can run a specific feature file by its filename or by grepping by name or tag.\n\n\nTo run only tests without features use \n--tests\n option:\n\n\ncodeceptjs run --tests\n\n\n\n\ndone()", 
            "title": "Behavior Driven Development"
        }, 
        {
            "location": "/bdd/#behavior-driven-development", 
            "text": "Behavior Driven Development (BDD) is a popular software development methodology. BDD is considered an extension of TDD, and is greatly inspired by  Agile  practices. The primary reason to choose BDD as your development process is to break down communication barriers between business and technical teams. BDD encourages the use of automated testing to verify all documented features of a project from the very beginning. This is why it is common to talk about BDD in the context of test frameworks (like CodeceptJS). The BDD approach, however, is about much more than testing - it is a common language for all team members to use during the development process.", 
            "title": "Behavior Driven Development"
        }, 
        {
            "location": "/bdd/#what-is-behavior-driven-development", 
            "text": "BDD was introduced by  Dan North . He described it as:   outside-in, pull-based, multiple-stakeholder, multiple-scale, high-automation, agile methodology. It describes a cycle of interactions with well-defined outputs, resulting in the delivery of working, tested software that matters.   BDD has its own evolution from the days it was born, started by replacing \"test\" to \"should\" in unit tests, and moving towards powerful tools like Cucumber and Behat, which made user stories (human readable text) to be executed as an acceptance test.  The idea of story BDD can be narrowed to:   describe features in a scenario with a formal text  use examples to make abstract things concrete  implement each step of a scenario for testing  write actual code implementing the feature   By writing every feature in User Story format that is automatically executable as a test we ensure that: business, developers, QAs and managers are in the same boat.  BDD encourages exploration and debate in order to formalize the requirements and the features that needs to be implemented by requesting to write the User Stories in a way that everyone can understand.  By making tests to be a part of User Story, BDD allows non-technical personnel to write (or edit) Acceptance tests.  With this procedure we also ensure that everyone in a team knows what has been developed, what has not, what has been tested and what has not.  Ubiquitous Language  The ubiquitous language is always referred as  common  language. That is it's main benefit. It is not a couple of our business specification's words, and not a couple of developer's technical terms. It is a common words and terms that can be understood by people for whom we are building the software and should be understood by developers. Establishing correct communication between this two groups people is vital for building successful project that will fit the domain and fulfill all business needs.  Each feature of a product should be born from a talk between   business (analysts, product owner)  developers  QAs   which are known in BDD as \"three amigos\".  Such talks should produce written stories. There should be an actor that doing some things, the feature that should be fulfilled within the story and the result achieved.  We can try to write such simple story:  As a customer I want to buy several products\nI put first product with $600 price to my cart\nAnd then another one with $1000 price\nWhen I go to checkout process\nI should see that total number of products I want to buy is 2\nAnd my order amount is $1600  As we can see this simple story highlights core concepts that are called  contracts . We should fulfill those contracts to model software correctly. But how we can verify that those contracts are being satisfied?  Cucumber  introduced a special language for such stories called  Gherkin . Same story transformed to Gherkin will look like this:  Feature: checkout process\n  In order to buy products\n  As a customer\n  I want to be able to buy several products\n\n  Scenario:\n    Given I have product with $600 price in my cart\n    And I have product with $1000 price\n    When I go to checkout process\n    Then I should see that total number of products is 2\n    And my order amount is $1600  CodeceptJS can execute this scenario step by step as an automated test .\nEvery step in this scenario requires a code which defines it.", 
            "title": "What is Behavior Driven Development"
        }, 
        {
            "location": "/bdd/#gherkin", 
            "text": "Let's learn some more about Gherkin format and then we will see how to execute it with CodeceptJS. We can enable Gherkin for current project by running  gherkin:init  command on  already initialized project :  codeceptjs gherkin:init  It will add  gherkin  section to the current config. It will also prepare directories for features and step definition. And it will create the first feature file for you.  Features  Whenever you start writing a story you are describing a specific feature of an application, with a set of scenarios and examples describing this feature. Let's open a feature file created by  gherkin:init  command, which is  feature/basic.feature .  Feature: Business rules\n  In order to achieve my goals\n  As a persona\n  I want to be able to interact with a system\n\n  Scenario: do something\n    Given I have a defined step  This text should be rewritten to follow your buisness rules. Don't think about a web interface for a while.\nThink about how user interacts with your system and what goals they want to achieve. Then write interaction scenarios.  Scenarios  Scenarios are live examples of feature usage. Inside a feature file it should be written inside a  Feature  block. Each scenario should contain its title:  Feature: checkout\n  In order to buy product\n  As a customer\n  I need to be able to checkout the selected products\n\nScenario: order several products  Scenarios are written in step-by-step manner using Given-When-Then approach. At start, scenario should describe its context with  Given  keyword:    Given I have product with $600 price in my cart\n  And I have product with $1000 price in my cart  Here we also use word  And  to extend the Given and not to repeat it in each line.  This is how we described the initial conditions. Next, we perform some action. We use  When  keyword for it:    When I go to checkout process  And in the end we are verifying our expectation using  Then  keyword. The action changed the initial given state, and produced some results. Let's check that those results are what we actually expect.    Then I should see that total number of products is 2\n  And my order amount is $1600  This scenarios are nice as live documentation but they do not test anything yet. What we need next is to define how to run those steps.\nSteps can be defined by executing  gherkin:snippets  command:  codeceptjs gherkin:snippets  This will produce code templates for all undefined steps in all feature files of this suite.\nIt will also place stub definitions into  step_definitions/steps.js  file.\nOur next step will be to define those steps and transforming feature-file into a valid test.  Step Definitions  Step definitions are placed in JavaScript file with Given/When/Then functions that map strings from feature file to functions:  const I = actor();\n\n// you can provide RegEx to match corresponding steps\nGiven(/I have product with \\$(\\d+) price/, (price) =  {\n  I.amOnPage('/products');\n  I.click(`.product[data-price=${price}]`);\n  I.click('Add to cart');\n});\n\n// or a simple string\nWhen('I go to checkout process', () =  {\n  I.click('Checkout');\n});\n\n// parameters are passed in via Cucumber expressions\nThen('I should see that total number of products is {int}', (num) =  {\n  I.see(num, '.cart');\n});\nThen('my order amount is ${int}', (sum) =  { // eslint-disable-line\n  I.see('Total: ' + sum);\n});  Steps can be either strings or regular expressions. Parameters from string are passed as function arguments. To define parameters in a string we use  Cucumber expressions  To list all defined steps run  gherkin:steps  command:  codeceptjs gherkin:steps  To run tests and see step-by step output use  --steps  optoin:  codeceptjs run --steps  To see not only business steps but an actual performed steps use  --debug  flag:  codeceptjs run --debug", 
            "title": "Gherkin"
        }, 
        {
            "location": "/bdd/#advanced-gherkin", 
            "text": "Let's improve our BDD suite by using the advanced features of Gherkin language.  Background  If a group of scenarios have the same initial steps, let's that for dashboard we need always need to be logged in as administrator. We can use  Background  section to do the required preparations and not to repeat same steps across scenarios.  Feature: Dashboard\n  In order to view current state of business\n  As an owner\n  I need to be able to see reports on dashboard\n\n  Background:\n    Given I am logged in as administrator\n    And I open dashboard page  Steps in background are defined the same way as in scenarios.  Tables  Scenarios can become more descriptive when you represent repeating data as tables. Instead of writing several steps \"I have product with :num1 $ price in my cart\" we can have one step with multiple values in it.    Given i have products in my cart\n    | name         | category    | price  |\n    | Harry Potter | Books       | 5      |\n    | iPhone 5     | Smartphones | 1200   |\n    | Nuclear Bomb | Weapons     | 100000 |  Tables is a recommended ways to pass arrays into test scenarios.\nInside a step definition data is stored in argument passed as  DataTable  JavaScript object.\nYou can iterate on it like this:  Given('I have products in my cart', (table) =  { // eslint-disable-line\n  for (const id in table.rows) {\n    if (id   1) {\n      continue; // skip a header of a table\n    }\n\n    // go by row cells\n    const cells = table.rows[id].cells;\n\n    // take values\n    const name = cells[0].value;\n    const category = cells[1].value;\n    const price = cells[1].value;\n    // ...\n  }\n});  Examples  In case scenarios represent the same logic but differ on data, we can use  Scenario Outline  to provide different examples for the same behavior. Scenario outline is just like a basic scenario with some values replaced with placeholders, which are filled from a table. Each set of values is executed as a different test.    Scenario Outline: order discount\n    Given I have product with price  price $ in my cart\n    And discount for orders greater than $20 is 10 %\n    When I go to checkout\n    Then I should see overall price is  total  $\n\n    Examples:\n      | price | total |\n      | 10    | 10    |\n      | 20    | 20    |\n      | 21    | 18.9  |\n      | 30    | 27    |\n      | 50    | 45    |  Long Strings  Text values inside a scenarios can be set inside a  \"\"\"  block:    Then i see in file  codecept.json  \n{\n   output :  ./output ,\n   helpers : {\n     Puppeteer : {\n       url :  http://localhost ,\n       restart : true,\n       windowSize :  1600x1200 \n    }   This string can be accessed inside a  content  property of a last argument:  Then('Then i see in file {string}', (file, text) =  {\n  // file is a value of {string} from a title\n  const fileContent = fs.readFileSync(file).toString();\n  fileContent.should.include(text.content); // text.content is a value\n});  Tags  Gherkin scenarios and features can contain tags marked with  @ . Tags are appended to feature titles so you can easily filter by them when running tests:  codeceptjs run --grep  @important   Tag should be placed before  Scenario:  or before  Feature:  keyword. In the last case all scenarios of that feature will be added to corresponding group.", 
            "title": "Advanced Gherkin"
        }, 
        {
            "location": "/bdd/#configuration", 
            "text": "gherkin  features  - path to feature files  steps  - array of files with step definitions   gherkin : {\n   features :  ./features/*.feature ,\n   steps : [\n     ./step_definitions/steps.js \n  ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/bdd/#tests-vs-features", 
            "text": "It is common to think that BDD scenario is equal to test. But it's actually not. Not every test should be described as a feature. Not every test is written to test real business value. For instance, regression tests or negative scenario tests are not bringing any value to business. Business analysts don't care about scenario reproducing bug #13, or what error message is displayed when user tries to enter wrong password on login screen. Writing all the tests inside a feature files creates informational overflow.  In CodeceptJS you can combine tests written in Gherkin format with classical acceptance tests. This way you can keep your feature files compact with minimal set of scenarios, and write regular tests to cover all cases. Please note, feature files will be executed before tests.  To run only features use  --features  option:  codeceptjs run --features  You can run a specific feature file by its filename or by grepping by name or tag.  To run only tests without features use  --tests  option:  codeceptjs run --tests", 
            "title": "Tests vs Features"
        }, 
        {
            "location": "/bdd/#done", 
            "text": "", 
            "title": "done()"
        }, 
        {
            "location": "/advanced/", 
            "text": "Advanced Usage\n\n\nData Driven Tests\n\n\nExecute the same scenario on a different data set.\n\n\nLet's say you want to test login for different user accounts.\nIn this case, you need to create a datatable and fill it in with credentials.\nThen use \nData().Scenario\n to include this data and generate multiple scenarios:\n\n\n// Define data table inside a test or load from another module\nlet accounts = new DataTable(['login', 'password']); //\naccounts.add(['davert', '123456']); // adding records to a table\naccounts.add(['admin', '123456']);\n\n// You can skip some data. But add them to report as skipped (just like with usual scenarios):\naccounts.xadd(['admin', '23456'])\n\n// Pass dataTable to Data()\n// Use special param `current` to get current data set\nData(accounts).Scenario('Test Login', (I, current) =\n {\n  I.fillField('Username', current.login); // current is reserved!\n  I.fillField('Password', current.password);\n  I.click('Sign In');\n  I.see('Welcome '+ current.login);\n});\n\n\n// Also you can set only for Data tests. It will launch executes only the current test but with all data options\nData(accounts).only.Scenario('Test Login', (I, current) =\n {\n  I.fillField('Username', current.login); // current is reserved!\n  I.fillField('Password', current.password);\n  I.click('Sign In');\n  I.see('Welcome '+ current.login);\n});\n\n\n\n\nImportant: you can't use name \ncurrent\n for pageObjects or helpers in data scenarios\n\n\nThis will produce 2 tests with different data sets.\nCurrent data set is appended to a test name in output:\n\n\n\u2713 Test Login | {\nlogin\n:\ndavert\n,\npassword\n:\n123456\n}\n\u2713 Test Login | {\nlogin\n:\nadmin\n,\npassword\n:\n123456\n}\nS Test Login | {\nlogin\n:\nadmin\n,\npassword\n:\n23456\n}\n\n\n\n\n// You can filter your data table\nData(accounts.filter(account =\n account.login == 'admin')\n.Scenario('Test Login', (I, current) =\n {\n  I.fillField('Username', current.login);\n  I.fillField('Password', current.password);\n  I.click('Sign In');\n  I.see('Welcome '+ current.login);\n});\n\n\n\n\nThis will limit data sets accoring passed function:\n\n\n\u2713 Test Login | {\nlogin\n:\nadmin\n,\npassword\n:\n123456\n}\nS Test Login | {\nlogin\n:\nadmin\n,\npassword\n:\n23456\n}\n\n\n\n\nData sets can also be defined with array, generator, or a function.\n\n\nData(function*() {\n  yield { user: 'davert'};\n  yield { user: 'andrey'};\n}).Scenario() // ...\n\n\n\n\nHINT: If you don't use DataTable. add \ntoString()\n method to each object added to data set, so the data could be pretty printed in a test name\n\n\nGroups\n\n\nAppend \n@tag\n to your test name, so\nall tests with \n@tag\n could be executed with \n--grep @tag\n option.\n\n\nScenario('update user profile @slow')\n\n\n\n\ncodeceptjs run --grep @slow\n\n\n\n\nUse regex for more flexible filtering:\n\n\n\n\n--grep '(?=.*@smoke2)(?=.*@smoke3)'\n - run tests with @smoke2 and @smoke3 in name\n\n\n--grep '@smoke2|@smoke3'\n - run tests with @smoke2 or @smoke3 in name\n\n\n--grep '((?=.*@smoke2)(?=.*@smoke3))|@smoke4'\n - run tests with (@smoke2 and @smoke3) or @smoke4 in name\n\n\n--grep '(?=.*@smoke2)^(?!.*@smoke3)'\n - run tests with @smoke2 but without @smoke3 in name\n\n\n--grep '(?=.*)^(?!.*@smoke4)'\n - run all tests except @smoke4\n\n\n\n\nDebug\n\n\nCodeceptJS provides a debug mode in which additional information is printed.\nIt can be turned on with \n--debug\n flag.\n\n\ncodeceptjs run --debug\n\n\n\n\nto receive even more information turn on \n--verbose\n flag:\n\n\ncodeceptjs run --verbose\n\n\n\n\nAnd don't forget that you can pause execution and enter \ninteractive console\n mode by calling \npause()\n inside your test.\n\n\nFor advanced debugging use NodeJS debugger. In WebStorm IDE:\n\n\nnode $NODE_DEBUG_OPTION ./node_modules/.bin/codeceptjs run\n\n\n\n\nFor Visual Studio Code, add the following configuration in launch.json:\n\n\n{\n  \ntype\n: \nnode\n,\n  \nrequest\n: \nlaunch\n,\n  \nname\n: \ncodeceptjs\n,\n  \nargs\n: [\nrun\n, \n--grep\n, \n@your_test_tag\n],\n  \nprogram\n: \n${workspaceFolder}/node_modules/.bin/codeceptjs\n\n}\n\n\n\n\nParallel Execution\n\n\nCodeceptJS can be configured to run tests in parallel.\n\n\nWhen enabled, it collects all test files and executes them in parallel by the specified amount of chunks. Given we have five test scenarios (\na_test.js\n,\nb_test.js\n,\nc_test.js\n,\nd_test.js\n and \ne_test.js\n), by setting \n\"chunks\": 2\n we tell the runner to run two suites in parallel. The first suite will run \na_test.js\n,\nb_test.js\n and \nc_test.js\n, the second suite will run \nd_test.js\n and \ne_test.js\n.\n\n\nmultiple\n: {\n  \nparallel\n: {\n    // Splits tests into 2 chunks\n    \nchunks\n: 2\n  }\n}\n\n\n\n\nTo execute them use \nrun-multiple\n command passing configured suite, which is \nparallel\n in this example:\n\n\ncodeceptjs run-multiple parallel\n\n\n\n\nGrep and multiple browsers are supported. Passing more than one browser will multiply the amount of suites by the amount of browsers passed. The following example will lead to four parallel runs.\n\n\nmultiple\n: {\n  // 2x chunks + 2x browsers = 4\n  \nparallel\n: {\n    // Splits tests into chunks\n    \nchunks\n: 2,\n    // run all tests in chrome and firefox\n    \nbrowsers\n: [\nchrome\n, \nfirefox\n]\n  },\n}\n\n\n\n\nPassing a function will enable you to provide your own chunking algorithm. The first argument passed to you function is an array of all test files, if you enabled grep the test files passed are already filtered to match the grep pattern.\n\n\nmultiple\n: {\n  \nparallel\n: {\n    // Splits tests into chunks by passing an anonymous function,\n    // only execute first and last found test file\n    \nchunks\n: (files) =\n {\n      return [\n        [ files[0] ], // chunk 1\n        [ files[files.length-1] ], // chunk 2\n      ]\n    },\n    // run all tests in chrome and firefox\n    \nbrowsers\n: [\nchrome\n, \nfirefox\n]\n  },\n}\n\n\n\n\nNote: Chunking will be most effective if you have many individual test files that contain only a small amount of scenarios. Otherwise the combined execution time of many scenarios or big scenarios in one single test file potentially lead to an uneven execution time.\n\n\nMultiple Browsers Execution\n\n\nThis is useful if you want to execute same tests but on different browsers and with different configurations or different tests on same browsers in parallel.\n\n\nmultiple\n: {\n  \nbasic\n: {\n    // run all tests in chrome and firefox\n    \nbrowsers\n: [\nchrome\n, \nfirefox\n]\n  },\n\n  \nsmoke\n: {\n    // run only tests containing \n@smoke\n in name\n    \ngrep\n: \n@smoke\n,\n\n    // store results into `output/smoke` directory\n    \noutputName\n: \nsmoke\n,\n\n    // use firefox and different chrome configurations\n    \nbrowsers\n: [\n      \nfirefox\n,\n      {\nbrowser\n: \nchrome\n, \nwindowSize\n: \nmaximize\n},\n      // replace any config values from WebDriverIO helper\n      {\nbrowser\n: \nchrome\n, \nwindowSize\n: \n1200x840\n}\n    ]\n  },\n\n  \nparallel\n: {\n    // Splits tests into chunks\n    \nchunks\n: 2,\n    // run all tests in chrome\n    \nbrowsers\n: [\nchrome\n]\n  },\n\n}\n\n\n\n\nThen tests can be executed using \nrun-multiple\n command.\n\n\nRun all suites for all browsers:\n\n\ncodeceptjs run-multiple --all\n\n\n\n\nRun \nbasic\n suite for all browsers\n\n\ncodeceptjs run-multiple basic\n\n\n\n\nRun \nbasic\n suite for chrome only:\n\n\ncodeceptjs run-multiple basic:chrome\n\n\n\n\nRun \nbasic\n suite for chrome and \nsmoke\n for firefox\n\n\ncodeceptjs run-multiple basic:chrome smoke:firefox\n\n\n\n\nRun basic tests with grep and junit reporter\n\n\ncodeceptjs run-multiple basic --grep signin --reporter mocha-junit-reporter\n\n\n\n\nRun regression tests specifying different config path:\n\n\ncodeceptjs run-multiple regression -c path/to/config\n\n\n\n\nEach executed process uses custom folder for reports and output. It is stored in subfolder inside an output directory. Subfolders will be named in \nsuite_browser\n format.\n\n\nOutput is printed for all running processes. Each line is tagged with a suite and browser name:\n\n\n[basic:firefox] GitHub --\n[basic:chrome] GitHub --\n[basic:chrome]    it should not enter\n[basic:chrome]  \u2713 signin in 2869ms\n\n[basic:chrome]   OK  | 1 passed   // 30s\n[basic:firefox]    it should not enter\n[basic:firefox]  \u2716 signin in 2743ms\n\n[basic:firefox] -- FAILURES:\n\n\n\n\nHooks\n\n\nHooks are available when using the \nrun-multiple\n command to perform actions before the test suites start and after the test suites have finished. See \nHooks\n for an example.\n\n\nDynamic Configuration\n\n\nHelpers can be reconfigured per scenario or per feature.\nThis might be useful when some tests should be executed with different settings than others.\nIn order to reconfigure tests use \n.config()\n method of \nScenario\n or \nFeature\n.\n\n\nScenario('should be executed in firefox', (I) =\n {\n  // I.amOnPage(..)\n}).config({ browser: 'firefox' })\n\n\n\n\nIn this case \nconfig\n overrides current config of the first helper.\nTo change config of specific helper pass two arguments: helper name and config values:\n\n\nScenario('should create data via v2 version of API', (I) =\n {\n  // I.amOnPage(..)\n}).config('REST', { endpoint: 'https://api.mysite.com/v2' })\n\n\n\n\nConfig can also be set by a function, in this case you can get a test object and specify config values based on it.\nThis is very useful when running tests against cloud providers, like BrowserStack.\n\n\nScenario('should report to BrowserStack', (I) =\n {\n  // I.amOnPage(..)\n}).config((test) =\n {\n  return { desiredCapabilities: {\n    project: test.suite.title,\n    name: test.title,\n  }}\n});\n\n\n\n\nConfig changes can be applied to all tests in suite:\n\n\nFeature('Admin Panel').config({ url: 'https://mysite.com/admin' });\n\n\n\n\nPlease note that some config changes can't be applied on the fly. For instance, if you set \nrestart: false\n in your config and then changing value \nbrowser\n won't take an effect as browser is already started and won't be closed untill all tests finish.\n\n\nConfiguration changes will be reverted after a test or a suite.\n\n\ndone()", 
            "title": "Advanced Usage"
        }, 
        {
            "location": "/advanced/#advanced-usage", 
            "text": "", 
            "title": "Advanced Usage"
        }, 
        {
            "location": "/advanced/#data-driven-tests", 
            "text": "Execute the same scenario on a different data set.  Let's say you want to test login for different user accounts.\nIn this case, you need to create a datatable and fill it in with credentials.\nThen use  Data().Scenario  to include this data and generate multiple scenarios:  // Define data table inside a test or load from another module\nlet accounts = new DataTable(['login', 'password']); //\naccounts.add(['davert', '123456']); // adding records to a table\naccounts.add(['admin', '123456']);\n\n// You can skip some data. But add them to report as skipped (just like with usual scenarios):\naccounts.xadd(['admin', '23456'])\n\n// Pass dataTable to Data()\n// Use special param `current` to get current data set\nData(accounts).Scenario('Test Login', (I, current) =  {\n  I.fillField('Username', current.login); // current is reserved!\n  I.fillField('Password', current.password);\n  I.click('Sign In');\n  I.see('Welcome '+ current.login);\n});\n\n\n// Also you can set only for Data tests. It will launch executes only the current test but with all data options\nData(accounts).only.Scenario('Test Login', (I, current) =  {\n  I.fillField('Username', current.login); // current is reserved!\n  I.fillField('Password', current.password);\n  I.click('Sign In');\n  I.see('Welcome '+ current.login);\n});  Important: you can't use name  current  for pageObjects or helpers in data scenarios  This will produce 2 tests with different data sets.\nCurrent data set is appended to a test name in output:  \u2713 Test Login | { login : davert , password : 123456 }\n\u2713 Test Login | { login : admin , password : 123456 }\nS Test Login | { login : admin , password : 23456 }  // You can filter your data table\nData(accounts.filter(account =  account.login == 'admin')\n.Scenario('Test Login', (I, current) =  {\n  I.fillField('Username', current.login);\n  I.fillField('Password', current.password);\n  I.click('Sign In');\n  I.see('Welcome '+ current.login);\n});  This will limit data sets accoring passed function:  \u2713 Test Login | { login : admin , password : 123456 }\nS Test Login | { login : admin , password : 23456 }  Data sets can also be defined with array, generator, or a function.  Data(function*() {\n  yield { user: 'davert'};\n  yield { user: 'andrey'};\n}).Scenario() // ...  HINT: If you don't use DataTable. add  toString()  method to each object added to data set, so the data could be pretty printed in a test name", 
            "title": "Data Driven Tests"
        }, 
        {
            "location": "/advanced/#groups", 
            "text": "Append  @tag  to your test name, so\nall tests with  @tag  could be executed with  --grep @tag  option.  Scenario('update user profile @slow')  codeceptjs run --grep @slow  Use regex for more flexible filtering:   --grep '(?=.*@smoke2)(?=.*@smoke3)'  - run tests with @smoke2 and @smoke3 in name  --grep '@smoke2|@smoke3'  - run tests with @smoke2 or @smoke3 in name  --grep '((?=.*@smoke2)(?=.*@smoke3))|@smoke4'  - run tests with (@smoke2 and @smoke3) or @smoke4 in name  --grep '(?=.*@smoke2)^(?!.*@smoke3)'  - run tests with @smoke2 but without @smoke3 in name  --grep '(?=.*)^(?!.*@smoke4)'  - run all tests except @smoke4", 
            "title": "Groups"
        }, 
        {
            "location": "/advanced/#debug", 
            "text": "CodeceptJS provides a debug mode in which additional information is printed.\nIt can be turned on with  --debug  flag.  codeceptjs run --debug  to receive even more information turn on  --verbose  flag:  codeceptjs run --verbose  And don't forget that you can pause execution and enter  interactive console  mode by calling  pause()  inside your test.  For advanced debugging use NodeJS debugger. In WebStorm IDE:  node $NODE_DEBUG_OPTION ./node_modules/.bin/codeceptjs run  For Visual Studio Code, add the following configuration in launch.json:  {\n   type :  node ,\n   request :  launch ,\n   name :  codeceptjs ,\n   args : [ run ,  --grep ,  @your_test_tag ],\n   program :  ${workspaceFolder}/node_modules/.bin/codeceptjs \n}", 
            "title": "Debug"
        }, 
        {
            "location": "/advanced/#parallel-execution", 
            "text": "CodeceptJS can be configured to run tests in parallel.  When enabled, it collects all test files and executes them in parallel by the specified amount of chunks. Given we have five test scenarios ( a_test.js , b_test.js , c_test.js , d_test.js  and  e_test.js ), by setting  \"chunks\": 2  we tell the runner to run two suites in parallel. The first suite will run  a_test.js , b_test.js  and  c_test.js , the second suite will run  d_test.js  and  e_test.js .  multiple : {\n   parallel : {\n    // Splits tests into 2 chunks\n     chunks : 2\n  }\n}  To execute them use  run-multiple  command passing configured suite, which is  parallel  in this example:  codeceptjs run-multiple parallel  Grep and multiple browsers are supported. Passing more than one browser will multiply the amount of suites by the amount of browsers passed. The following example will lead to four parallel runs.  multiple : {\n  // 2x chunks + 2x browsers = 4\n   parallel : {\n    // Splits tests into chunks\n     chunks : 2,\n    // run all tests in chrome and firefox\n     browsers : [ chrome ,  firefox ]\n  },\n}  Passing a function will enable you to provide your own chunking algorithm. The first argument passed to you function is an array of all test files, if you enabled grep the test files passed are already filtered to match the grep pattern.  multiple : {\n   parallel : {\n    // Splits tests into chunks by passing an anonymous function,\n    // only execute first and last found test file\n     chunks : (files) =  {\n      return [\n        [ files[0] ], // chunk 1\n        [ files[files.length-1] ], // chunk 2\n      ]\n    },\n    // run all tests in chrome and firefox\n     browsers : [ chrome ,  firefox ]\n  },\n}  Note: Chunking will be most effective if you have many individual test files that contain only a small amount of scenarios. Otherwise the combined execution time of many scenarios or big scenarios in one single test file potentially lead to an uneven execution time.", 
            "title": "Parallel Execution"
        }, 
        {
            "location": "/advanced/#multiple-browsers-execution", 
            "text": "This is useful if you want to execute same tests but on different browsers and with different configurations or different tests on same browsers in parallel.  multiple : {\n   basic : {\n    // run all tests in chrome and firefox\n     browsers : [ chrome ,  firefox ]\n  },\n\n   smoke : {\n    // run only tests containing  @smoke  in name\n     grep :  @smoke ,\n\n    // store results into `output/smoke` directory\n     outputName :  smoke ,\n\n    // use firefox and different chrome configurations\n     browsers : [\n       firefox ,\n      { browser :  chrome ,  windowSize :  maximize },\n      // replace any config values from WebDriverIO helper\n      { browser :  chrome ,  windowSize :  1200x840 }\n    ]\n  },\n\n   parallel : {\n    // Splits tests into chunks\n     chunks : 2,\n    // run all tests in chrome\n     browsers : [ chrome ]\n  },\n\n}  Then tests can be executed using  run-multiple  command.  Run all suites for all browsers:  codeceptjs run-multiple --all  Run  basic  suite for all browsers  codeceptjs run-multiple basic  Run  basic  suite for chrome only:  codeceptjs run-multiple basic:chrome  Run  basic  suite for chrome and  smoke  for firefox  codeceptjs run-multiple basic:chrome smoke:firefox  Run basic tests with grep and junit reporter  codeceptjs run-multiple basic --grep signin --reporter mocha-junit-reporter  Run regression tests specifying different config path:  codeceptjs run-multiple regression -c path/to/config  Each executed process uses custom folder for reports and output. It is stored in subfolder inside an output directory. Subfolders will be named in  suite_browser  format.  Output is printed for all running processes. Each line is tagged with a suite and browser name:  [basic:firefox] GitHub --\n[basic:chrome] GitHub --\n[basic:chrome]    it should not enter\n[basic:chrome]  \u2713 signin in 2869ms\n\n[basic:chrome]   OK  | 1 passed   // 30s\n[basic:firefox]    it should not enter\n[basic:firefox]  \u2716 signin in 2743ms\n\n[basic:firefox] -- FAILURES:  Hooks  Hooks are available when using the  run-multiple  command to perform actions before the test suites start and after the test suites have finished. See  Hooks  for an example.", 
            "title": "Multiple Browsers Execution"
        }, 
        {
            "location": "/advanced/#dynamic-configuration", 
            "text": "Helpers can be reconfigured per scenario or per feature.\nThis might be useful when some tests should be executed with different settings than others.\nIn order to reconfigure tests use  .config()  method of  Scenario  or  Feature .  Scenario('should be executed in firefox', (I) =  {\n  // I.amOnPage(..)\n}).config({ browser: 'firefox' })  In this case  config  overrides current config of the first helper.\nTo change config of specific helper pass two arguments: helper name and config values:  Scenario('should create data via v2 version of API', (I) =  {\n  // I.amOnPage(..)\n}).config('REST', { endpoint: 'https://api.mysite.com/v2' })  Config can also be set by a function, in this case you can get a test object and specify config values based on it.\nThis is very useful when running tests against cloud providers, like BrowserStack.  Scenario('should report to BrowserStack', (I) =  {\n  // I.amOnPage(..)\n}).config((test) =  {\n  return { desiredCapabilities: {\n    project: test.suite.title,\n    name: test.title,\n  }}\n});  Config changes can be applied to all tests in suite:  Feature('Admin Panel').config({ url: 'https://mysite.com/admin' });  Please note that some config changes can't be applied on the fly. For instance, if you set  restart: false  in your config and then changing value  browser  won't take an effect as browser is already started and won't be closed untill all tests finish.  Configuration changes will be reverted after a test or a suite.", 
            "title": "Dynamic Configuration"
        }, 
        {
            "location": "/advanced/#done", 
            "text": "", 
            "title": "done()"
        }, 
        {
            "location": "/hooks/", 
            "text": "Hooks\n\n\nCodeceptJS provides API to run custom code before and after the test and inject custom listeners into the event system.\n\n\nBootstrap \n Teardown\n\n\nIn case you need to execute arbitrary code before or after the tests,\nyou can use \nbootstrap\n and \nteardown\n config. Use it to start and stop webserver, Selenium, etc.\n\n\nWhen using the \nMultiple Execution\n mode , there are two additional hooks available; \nbootstrapAll\n and \nteardownAll\n. These hooks are only called once each; before all of the test suites are run (\nbootstrapAll\n) and after all of the test suites have finished (\nteardownAll\n).\n\n\nThere are different ways to define bootstrap and teardown functions:\n\n\n\n\nJS file executed as is (synchronously).\n\n\nJS file exporting function with optional callback for async execution.\n\n\nJS file exporting an object with \nbootstrap\n and \nteardown\n methods.\n\n\nInside JS config file\n\n\n\n\nCorresponding examples provided in next sections.\n\n\nExample: Async Bootstrap in a Function\n\n\nAdd to \ncodecept.json\n:\n\n\nbootstrap\n: \n./run_server.js\n\n\n\n\n\nExport a function in your bootstrap file:\n\n\n// bootstrap.js\nvar server = require('./app_server');\nmodule.exports = function(done) {\n  // on error call done('error description') to stop\n  if (!server.validateConfig()) {\n    done(\nCan't execute server with invalid config, tests stopped\n);\n  }\n  // call done() to continue execution\n  server.run(done);\n}\n\n\n\n\nExample: Async Teardown in a Function\n\n\nStopping a server from a previous example can be done in a similar manner.\nCreate a teardown file and add it to \ncodecept.json\n:\n\n\nteardown\n: \n./stop_server.js\n\n\n\n\n\nInside \nstop_server.js\n:\n\n\nvar server = require('./app_server');\nmodule.exports = function(done) {\n  server.stop(done);\n}\n\n\n\n\nExample: Bootstrap \n Teardown Inside an Object\n\n\nExamples above can be combined into one file.\n\n\nAdd to config (\ncodecept.json\n):\n\n\n  \nbootstrap\n: \n./server.js\n\n  \nteardown\n: \n./server.js\n\n\n\n\n\nserver.js\n should export object with \nbootstrap\n and \nteardown\n functions:\n\n\n// bootstrap.js\nvar server = require('./app_server');\nmodule.exports = {\n  bootstrap: function(done) {\n    server.start(done);\n  },\n  teardown: function(done) {\n    server.stop(done);\n  }\n}\n\n\n\n\nExample: Bootstrap \n Teardown Inside Config\n\n\nIf you are using JavaScript-style config \ncodecept.conf.js\n, bootstrap and teardown functions can be placed inside of it:\n\n\nvar server = require('./app_server');\n\nexports.config = {\n  tests: \n./*_test.js\n,\n  helpers: {},\n\n  // adding bootstrap/teardown\n  bootstrap: function(done) {\n    server.launch(done);\n  },\n  teardown: function(done) {\n    server.stop(done);\n  }\n  // ...\n  // other config options\n}\n\n\n\n\n\nExample: BootstrapAll \n TeardownAll Inside Config\n\n\nUsing JavaScript-style config \ncodecept.conf.js\n, bootstrapAll and teardownAll functions can be placed inside of it:\n\n\nconst fs = require('fs');\nconst tempFolder = process.cwd() + '/tmpFolder';\n\nexports.config = {\n  tests: \n./*_test.js\n,\n  helpers: {},\n\n  multiple: {\n    suite1: {\n      grep: '@suite1',\n      browsers: [ 'chrome', 'firefox' ],\n    },\n    suite2: {\n      grep: '@suite2',\n      browsers: [ 'chrome' ],\n    },\n  },\n\n  // adding bootstrapAll/teardownAll\n  bootstrapAll: function(done) {\n    fs.mkdir(tempFolder, (err) =\n {\n      console.log('Create a temp folder before all test suites start', err);\n      done();\n    });\n  },\n\n  bootstrap: function(done) {\n    console.log('Do some pretty suite setup stuff');\n    done(); // Don't forget to call done()\n  },\n\n  teardown: function(done) {\n    console.log('Cool, one of the test suites have finished');\n    done();\n  },\n\n  teardownAll: function(done) {\n    console.log('All suites are now done so we should clean up the temp folder');\n\n    fs.rmdir(tempFolder, (err) =\n {\n      console.log('Ok, now I am done', err);\n      done();\n    });\n  },\n\n  // ...\n  // other config options\n}\n\n\n\n\nNote\n: The \nbootstrapAll\n and \nteardownAll\n hooks are only called when using \nMultiple Execution\n.\n\n\nPlugins\n\n\nPlugins allow to use CodeceptJS internal API to extend functionality. Use internal event dispatcher, container, output, promise recorder, to create your own reporters, test listeners, etc.\n\n\nCodeceptJS includes \nbuilt-in plugins\n which extend basic functionality and can be turned on and off on purpose. Taking them as \nexamples\n you can develop your custom plugins.\n\n\nA plugin is a basic JS module returning a function. Plugins can have individual configs which are passed into this function:\n\n\nconst defaultConfig = {\n  someDefaultOption: true\n}\n\nmodule.exports = function(config) {\n  config = Object.assign(defaultConfig, config);\n  // do stuff\n}\n\n\n\n\nPlugin can register event listeners or hook into promise chain with recorder. See \nAPI reference\n.\n\n\nTo enable your custom plugin in config add it to \nplugins\n section. Specify path to node module using \nrequire\n.\n\n\nplugins\n: {\n  \nmyPlugin\n: {\n    \nrequire\n: \n./path/to/my/module\n,\n    \nenabled\n: true\n  }\n}\n\n\n\n\n\n\nrequire\n - specifies relative path to a plugin file. Path is relative to config file.\n\n\nenabled\n - to enable this plugin.\n\n\n\n\nIf a plugin is disabled (\nenabled\n is not set or false) this plugin can be enabled from command line:\n\n\n./node_modules/.bin/codeceptjs run --plugin myPlugin\n\n\n\n\nSeveral plugins can be enabled as well:\n\n\n./node_modules/.bin/codeceptjs run --plugin myPlugin,allure\n\n\n\n\nCustom Hooks\n\n\n(deprecated, use \nplugins\n)\n\n\nHooks are JavaScript files same as for bootstrap and teardown, which can be registered inside \nhooks\n section of config. Unlike \nbootstrap\n you can have multiple hooks registered:\n\n\nhooks\n: [\n  \n./server.js\n,\n  \n./data_builder.js\n,\n  \n./report_notification.js\n\n]\n\n\n\n\nInside those JS files you can use CodeceptJS API (see below) to access its internals.\n\n\nAPI\n\n\nUse local CodeceptJS installation to get access to \ncodeceptjs\n module\n\n\nCodeceptJS provides an API which can be loaded via \nrequire('codeceptjs')\n when CodeceptJS is installed locally.\nThese internal objects are available:\n\n\n\n\ncodecept\n: test runner class\n\n\nconfig\n: current codecept config\n\n\nevent\n: event listener\n\n\nrecorder\n: global promise chain\n\n\noutput\n: internal printer\n\n\ncontainer\n: dependency injection container for tests, includes current helpers and support objects\n\n\nhelper\n: basic helper class\n\n\nactor\n: basic actor (I) class\n\n\n\n\nAPI reference\n is available on GitHub.\nAlso please check the source code of corresponding modules.\n\n\nEvent Listeners\n\n\nCodeceptJS provides a module with \nevent dispatcher and set of predefined events\n.\n\n\nIt can be required from codeceptjs package if it is installed locally.\n\n\nconst event = require('codeceptjs').event;\n\nmodule.exports = function() {\n\n  event.dispatcher.on(event.test.before, function (test) {\n\n    console.log('--- I am before test --');\n\n  });\n}\n\n\n\n\nAvailable events:\n\n\n\n\nevent.test.before(test)\n - \nasync\n when \nBefore\n hooks from helpers and from test is executed\n\n\nevent.test.after(test)\n - \nasync\n after each test\n\n\nevent.test.started(test)\n - \nsync\n at the very beginning of a test. Passes a current test object.\n\n\nevent.test.passed(test)\n - \nsync\n when test passed\n\n\nevent.test.failed(test, error)\n - \nsync\n when test failed\n\n\nevent.test.finished(test)\n - \nsync\n when test finished\n\n\nevent.suite.before(suite)\n - \nasync\n before a suite\n\n\nevent.suite.after(suite)\n - \nasync\n after a suite\n\n\nevent.step.before(step)\n - \nasync\n when the step is scheduled for execution\n\n\nevent.step.after(step)\n- \nasync\n after a step\n\n\nevent.step.started(step)\n - \nsync\n when step starts.\n\n\nevent.step.passed(step)\n - \nsync\n when step passed.\n\n\nevent.step.failed(step, err)\n - \nsync\n when step failed.\n\n\nevent.step.finished(step)\n - \nsync\n when step finishes.\n\n\nevent.all.before\n - before running tests\n\n\nevent.all.after\n - after running tests\n\n\n\n\nevent.all.result\n - when results are printed\n\n\n\n\n\n\nsync\n - means that event is fired in the moment of action happens.\n\n\n\n\nasync\n - means that event is fired when an actions is scheduled. Use \nrecorder\n to schedule your actions.\n\n\n\n\nFor further reference look for \ncurrently available listeners\n using event system.\n\n\nTest Object\n\n\nTest events provide a test object with following fields:\n\n\n\n\ntitle\n title of a test\n\n\nbody\n test function as a string\n\n\nopts\n additional test options like retries, and others\n\n\npending\n true if test is scheduled for execution and false if a test has finished\n\n\nfile\n path to a file with a test.\n\n\nsteps\n array of executed steps (available only in \ntest.passed\n, \ntest.failed\n, \ntest.finished\n event)\n\n\n\n\nand others\n\n\nStep Object\n\n\nStep events provide step objects with following fields:\n\n\n\n\nname\n name of a step, like 'see', 'click', and others\n\n\nactor\n current actor, in most cases it \nI\n\n\nhelper\n current helper instance used to execute this step\n\n\nhelperMethod\n corresponding helper method, in most cases is the same as \nname\n\n\nstatus\n status of a step (passed or failed)\n\n\nprefix\n if a step is executed inside \nwithin\n block contain within text, like: 'Within .js-signup-form'.\n\n\nargs\n passed arguments\n\n\n\n\nRecorder\n\n\nTo inject asynchronous functions in a test or before/after a test you can subscribe to corresponding event and register a function inside a recorder object. \nRecorder\n represents a global promises chain.\n\n\nProvide a function description as a first parameter, function should return a promise:\n\n\nconst event = require('codeceptjs').event;\nconst recorder = require('codeceptjs').recorder;\nmodule.exports = function() {\n\n  event.dispatcher.on(event.test.before, function (test) {\n\n    const request = require('request');\n\n    recorder.add('create fixture data via API', function() {\n      return new Promise((doneFn, errFn) =\n {\n        request({\n          baseUrl: 'http://api.site.com/',\n          method: 'POST',\n          url: '/users',\n          json: { name: 'john', email: 'john@john.com' }\n        }), (err, httpResponse, body) =\n {\n          if (err) return errFn(err);\n          doneFn();\n        }\n      });\n    }\n  });\n}\n\n\n\n\n\nWhenever you execute tests with \n--verbose\n option you will see registered events and promises executed by a recorder.\n\n\nOutput\n\n\nOutput module provides 4 verbosity levels. Depending on the mode you can have different information printed using corresponding functions.\n\n\n\n\ndefault\n: prints basic information using \noutput.print\n\n\nsteps\n: toggled by \n--steps\n option, prints step execution\n\n\ndebug\n: toggled by \n--debug\n option, prints steps, and debug information with \noutput.debug\n\n\nverbose\n: toggled by \n--verbose\n prints debug information and internal logs with \noutput.log\n\n\n\n\nIt is recommended to avoid \nconsole.log\n and use output.* methods for printing.\n\n\nconst output = require('codeceptjs').output;\n\noutput.print('This is basic information');\noutput.debug('This is debug information');\noutput.log('This is verbose logging information');\n\n\n\n\nContainer\n\n\nCodeceptJS has a dependency injection container with Helpers and Support objects.\nThey can be retrieved from the container:\n\n\nlet container = require('codeceptjs').container;\n\n// get object with all helpers\nlet helpers = container.helpers();\n\n// get helper by name\nlet WebDriverIO = container.helpers('WebDriverIO');\n\n// get support objects\nlet support = container.support();\n\n// get support object by name\nlet UserPage = container.support('UserPage');\n\n// get all registered plugins\nlet plugins = container.plugins();\n\n\n\n\nNew objects can also be added to container in runtime:\n\n\nlet container = require('codeceptjs').container;\n\ncontainer.append({\n  helpers: { // add helper\n    MyHelper: new MyHelper({ config1: 'val1' });\n  },\n  support: { // add page object\n    UserPage: require('./pages/user');\n  }\n})\n\n\n\n\nContainer also contains current Mocha instance:\n\n\nlet mocha = container.mocha();\n\n\n\n\nConfig\n\n\nCodeceptJS config can be accessed from \nrequire('codeceptjs').config.get()\n:\n\n\n\nlet config = require('codeceptjs').config.get();\n\nif (config.myKey == 'value') {\n  // run hook\n}\n\n\n\n\nCustom Runner\n\n\nCodeceptJS can be imported and used in custom runners.\nTo initialize Codecept you need to create Config and Container objects.\n\n\nlet Container = require('codeceptjs').container;\nlet Codecept = require('codeceptjs').codecept;\n\nlet config = { helpers: { WebDriverIO: { browser: 'chrome', url: 'http://localhost' } } };\nlet opts = { steps: true };\n\n// create runner\nlet codecept = new Codecept(config, opts);\n\n// initialize codeceptjs in current dir\ncodecept.initGlobals(__dirname);\n\n// create helpers, support files, mocha\nContainer.create(config, opts);\n\n// initialize listeners\ncodecept.bootstrap();\n\n// load tests\ncodecept.loadTests('*_test.js');\n\n// run tests\ncodecept.run();\n\n\n\n\nIn this way Codecept runner class can be extended.\n\n\ndone()", 
            "title": "Plugins & Hooks"
        }, 
        {
            "location": "/hooks/#hooks", 
            "text": "CodeceptJS provides API to run custom code before and after the test and inject custom listeners into the event system.", 
            "title": "Hooks"
        }, 
        {
            "location": "/hooks/#bootstrap-teardown", 
            "text": "In case you need to execute arbitrary code before or after the tests,\nyou can use  bootstrap  and  teardown  config. Use it to start and stop webserver, Selenium, etc.  When using the  Multiple Execution  mode , there are two additional hooks available;  bootstrapAll  and  teardownAll . These hooks are only called once each; before all of the test suites are run ( bootstrapAll ) and after all of the test suites have finished ( teardownAll ).  There are different ways to define bootstrap and teardown functions:   JS file executed as is (synchronously).  JS file exporting function with optional callback for async execution.  JS file exporting an object with  bootstrap  and  teardown  methods.  Inside JS config file   Corresponding examples provided in next sections.  Example: Async Bootstrap in a Function  Add to  codecept.json :  bootstrap :  ./run_server.js   Export a function in your bootstrap file:  // bootstrap.js\nvar server = require('./app_server');\nmodule.exports = function(done) {\n  // on error call done('error description') to stop\n  if (!server.validateConfig()) {\n    done( Can't execute server with invalid config, tests stopped );\n  }\n  // call done() to continue execution\n  server.run(done);\n}  Example: Async Teardown in a Function  Stopping a server from a previous example can be done in a similar manner.\nCreate a teardown file and add it to  codecept.json :  teardown :  ./stop_server.js   Inside  stop_server.js :  var server = require('./app_server');\nmodule.exports = function(done) {\n  server.stop(done);\n}  Example: Bootstrap   Teardown Inside an Object  Examples above can be combined into one file.  Add to config ( codecept.json ):     bootstrap :  ./server.js \n   teardown :  ./server.js   server.js  should export object with  bootstrap  and  teardown  functions:  // bootstrap.js\nvar server = require('./app_server');\nmodule.exports = {\n  bootstrap: function(done) {\n    server.start(done);\n  },\n  teardown: function(done) {\n    server.stop(done);\n  }\n}  Example: Bootstrap   Teardown Inside Config  If you are using JavaScript-style config  codecept.conf.js , bootstrap and teardown functions can be placed inside of it:  var server = require('./app_server');\n\nexports.config = {\n  tests:  ./*_test.js ,\n  helpers: {},\n\n  // adding bootstrap/teardown\n  bootstrap: function(done) {\n    server.launch(done);\n  },\n  teardown: function(done) {\n    server.stop(done);\n  }\n  // ...\n  // other config options\n}  Example: BootstrapAll   TeardownAll Inside Config  Using JavaScript-style config  codecept.conf.js , bootstrapAll and teardownAll functions can be placed inside of it:  const fs = require('fs');\nconst tempFolder = process.cwd() + '/tmpFolder';\n\nexports.config = {\n  tests:  ./*_test.js ,\n  helpers: {},\n\n  multiple: {\n    suite1: {\n      grep: '@suite1',\n      browsers: [ 'chrome', 'firefox' ],\n    },\n    suite2: {\n      grep: '@suite2',\n      browsers: [ 'chrome' ],\n    },\n  },\n\n  // adding bootstrapAll/teardownAll\n  bootstrapAll: function(done) {\n    fs.mkdir(tempFolder, (err) =  {\n      console.log('Create a temp folder before all test suites start', err);\n      done();\n    });\n  },\n\n  bootstrap: function(done) {\n    console.log('Do some pretty suite setup stuff');\n    done(); // Don't forget to call done()\n  },\n\n  teardown: function(done) {\n    console.log('Cool, one of the test suites have finished');\n    done();\n  },\n\n  teardownAll: function(done) {\n    console.log('All suites are now done so we should clean up the temp folder');\n\n    fs.rmdir(tempFolder, (err) =  {\n      console.log('Ok, now I am done', err);\n      done();\n    });\n  },\n\n  // ...\n  // other config options\n}  Note : The  bootstrapAll  and  teardownAll  hooks are only called when using  Multiple Execution .", 
            "title": "Bootstrap &amp; Teardown"
        }, 
        {
            "location": "/hooks/#plugins", 
            "text": "Plugins allow to use CodeceptJS internal API to extend functionality. Use internal event dispatcher, container, output, promise recorder, to create your own reporters, test listeners, etc.  CodeceptJS includes  built-in plugins  which extend basic functionality and can be turned on and off on purpose. Taking them as  examples  you can develop your custom plugins.  A plugin is a basic JS module returning a function. Plugins can have individual configs which are passed into this function:  const defaultConfig = {\n  someDefaultOption: true\n}\n\nmodule.exports = function(config) {\n  config = Object.assign(defaultConfig, config);\n  // do stuff\n}  Plugin can register event listeners or hook into promise chain with recorder. See  API reference .  To enable your custom plugin in config add it to  plugins  section. Specify path to node module using  require .  plugins : {\n   myPlugin : {\n     require :  ./path/to/my/module ,\n     enabled : true\n  }\n}   require  - specifies relative path to a plugin file. Path is relative to config file.  enabled  - to enable this plugin.   If a plugin is disabled ( enabled  is not set or false) this plugin can be enabled from command line:  ./node_modules/.bin/codeceptjs run --plugin myPlugin  Several plugins can be enabled as well:  ./node_modules/.bin/codeceptjs run --plugin myPlugin,allure", 
            "title": "Plugins"
        }, 
        {
            "location": "/hooks/#custom-hooks", 
            "text": "(deprecated, use  plugins )  Hooks are JavaScript files same as for bootstrap and teardown, which can be registered inside  hooks  section of config. Unlike  bootstrap  you can have multiple hooks registered:  hooks : [\n   ./server.js ,\n   ./data_builder.js ,\n   ./report_notification.js \n]  Inside those JS files you can use CodeceptJS API (see below) to access its internals.", 
            "title": "Custom Hooks"
        }, 
        {
            "location": "/hooks/#api", 
            "text": "Use local CodeceptJS installation to get access to  codeceptjs  module  CodeceptJS provides an API which can be loaded via  require('codeceptjs')  when CodeceptJS is installed locally.\nThese internal objects are available:   codecept : test runner class  config : current codecept config  event : event listener  recorder : global promise chain  output : internal printer  container : dependency injection container for tests, includes current helpers and support objects  helper : basic helper class  actor : basic actor (I) class   API reference  is available on GitHub.\nAlso please check the source code of corresponding modules.  Event Listeners  CodeceptJS provides a module with  event dispatcher and set of predefined events .  It can be required from codeceptjs package if it is installed locally.  const event = require('codeceptjs').event;\n\nmodule.exports = function() {\n\n  event.dispatcher.on(event.test.before, function (test) {\n\n    console.log('--- I am before test --');\n\n  });\n}  Available events:   event.test.before(test)  -  async  when  Before  hooks from helpers and from test is executed  event.test.after(test)  -  async  after each test  event.test.started(test)  -  sync  at the very beginning of a test. Passes a current test object.  event.test.passed(test)  -  sync  when test passed  event.test.failed(test, error)  -  sync  when test failed  event.test.finished(test)  -  sync  when test finished  event.suite.before(suite)  -  async  before a suite  event.suite.after(suite)  -  async  after a suite  event.step.before(step)  -  async  when the step is scheduled for execution  event.step.after(step) -  async  after a step  event.step.started(step)  -  sync  when step starts.  event.step.passed(step)  -  sync  when step passed.  event.step.failed(step, err)  -  sync  when step failed.  event.step.finished(step)  -  sync  when step finishes.  event.all.before  - before running tests  event.all.after  - after running tests   event.all.result  - when results are printed    sync  - means that event is fired in the moment of action happens.   async  - means that event is fired when an actions is scheduled. Use  recorder  to schedule your actions.   For further reference look for  currently available listeners  using event system.  Test Object  Test events provide a test object with following fields:   title  title of a test  body  test function as a string  opts  additional test options like retries, and others  pending  true if test is scheduled for execution and false if a test has finished  file  path to a file with a test.  steps  array of executed steps (available only in  test.passed ,  test.failed ,  test.finished  event)   and others  Step Object  Step events provide step objects with following fields:   name  name of a step, like 'see', 'click', and others  actor  current actor, in most cases it  I  helper  current helper instance used to execute this step  helperMethod  corresponding helper method, in most cases is the same as  name  status  status of a step (passed or failed)  prefix  if a step is executed inside  within  block contain within text, like: 'Within .js-signup-form'.  args  passed arguments   Recorder  To inject asynchronous functions in a test or before/after a test you can subscribe to corresponding event and register a function inside a recorder object.  Recorder  represents a global promises chain.  Provide a function description as a first parameter, function should return a promise:  const event = require('codeceptjs').event;\nconst recorder = require('codeceptjs').recorder;\nmodule.exports = function() {\n\n  event.dispatcher.on(event.test.before, function (test) {\n\n    const request = require('request');\n\n    recorder.add('create fixture data via API', function() {\n      return new Promise((doneFn, errFn) =  {\n        request({\n          baseUrl: 'http://api.site.com/',\n          method: 'POST',\n          url: '/users',\n          json: { name: 'john', email: 'john@john.com' }\n        }), (err, httpResponse, body) =  {\n          if (err) return errFn(err);\n          doneFn();\n        }\n      });\n    }\n  });\n}  Whenever you execute tests with  --verbose  option you will see registered events and promises executed by a recorder.  Output  Output module provides 4 verbosity levels. Depending on the mode you can have different information printed using corresponding functions.   default : prints basic information using  output.print  steps : toggled by  --steps  option, prints step execution  debug : toggled by  --debug  option, prints steps, and debug information with  output.debug  verbose : toggled by  --verbose  prints debug information and internal logs with  output.log   It is recommended to avoid  console.log  and use output.* methods for printing.  const output = require('codeceptjs').output;\n\noutput.print('This is basic information');\noutput.debug('This is debug information');\noutput.log('This is verbose logging information');  Container  CodeceptJS has a dependency injection container with Helpers and Support objects.\nThey can be retrieved from the container:  let container = require('codeceptjs').container;\n\n// get object with all helpers\nlet helpers = container.helpers();\n\n// get helper by name\nlet WebDriverIO = container.helpers('WebDriverIO');\n\n// get support objects\nlet support = container.support();\n\n// get support object by name\nlet UserPage = container.support('UserPage');\n\n// get all registered plugins\nlet plugins = container.plugins();  New objects can also be added to container in runtime:  let container = require('codeceptjs').container;\n\ncontainer.append({\n  helpers: { // add helper\n    MyHelper: new MyHelper({ config1: 'val1' });\n  },\n  support: { // add page object\n    UserPage: require('./pages/user');\n  }\n})  Container also contains current Mocha instance:  let mocha = container.mocha();  Config  CodeceptJS config can be accessed from  require('codeceptjs').config.get() :  \nlet config = require('codeceptjs').config.get();\n\nif (config.myKey == 'value') {\n  // run hook\n}", 
            "title": "API"
        }, 
        {
            "location": "/hooks/#custom-runner", 
            "text": "CodeceptJS can be imported and used in custom runners.\nTo initialize Codecept you need to create Config and Container objects.  let Container = require('codeceptjs').container;\nlet Codecept = require('codeceptjs').codecept;\n\nlet config = { helpers: { WebDriverIO: { browser: 'chrome', url: 'http://localhost' } } };\nlet opts = { steps: true };\n\n// create runner\nlet codecept = new Codecept(config, opts);\n\n// initialize codeceptjs in current dir\ncodecept.initGlobals(__dirname);\n\n// create helpers, support files, mocha\nContainer.create(config, opts);\n\n// initialize listeners\ncodecept.bootstrap();\n\n// load tests\ncodecept.loadTests('*_test.js');\n\n// run tests\ncodecept.run();  In this way Codecept runner class can be extended.", 
            "title": "Custom Runner"
        }, 
        {
            "location": "/hooks/#done", 
            "text": "", 
            "title": "done()"
        }, 
        {
            "location": "/helpers/WebDriverIO/", 
            "text": "WebDriverIO\n\n\nWebDriverIO helper which wraps \nwebdriverio\n library to\nmanipulate browser using Selenium WebDriver or PhantomJS.\n\n\nWebDriverIO requires \nSelenium Server and ChromeDriver/GeckoDriver to be installed\n.\n\n\nConfiguration\n\n\nThis helper should be configured in codecept.json\n\n\n\n\nurl\n: base url of website to be tested.\n\n\nbrowser\n: browser in which to perform testing.\n\n\nhost\n: (optional, default: localhost) - WebDriver host to connect.\n\n\nport\n: (optional, default: 4444) - WebDriver port to connect.\n\n\nprotocol\n: (optional, default: http) - protocol for WebDriver server.\n\n\npath\n: (optional, default: /wd/hub) - path to WebDriver server,\n\n\nrestart\n: (optional, default: true) - restart browser between tests.\n\n\nsmartWait\n: (optional) \nenables \nSmartWait\n; wait for additional milliseconds for element to appear. Enable for 5 secs: \"smartWait\": 5000.\n\n\ndisableScreenshots\n: (optional, default: false) - don't save screenshots on failure.\n\n\nfullPageScreenshots\n (optional, default: false) - make full page screenshots on failure.\n\n\nuniqueScreenshotNames\n: (optional, default: false) - option to prevent screenshot override if you have scenarios with the same name in different suites.\n\n\nkeepBrowserState\n: (optional, default: false) - keep browser state between tests when \nrestart\n is set to false.\n\n\nkeepCookies\n: (optional, default: false) - keep cookies between tests when \nrestart\n set to false.\n\n\nwindowSize\n: (optional) default window size. Set to \nmaximize\n or a dimension in the format \n640x480\n.\n\n\nwaitForTimeout\n: (optional, default: 1000) sets default wait time in \nms\n for all \nwait*\n functions.\n\n\ndesiredCapabilities\n: Selenium's \ndesired\n    capabilities\n.\n\n\nmanualStart\n: (optional, default: false) - do not start browser before a test, start it manually inside a helper\n    with \nthis.helpers[\"WebDriverIO\"]._startBrowser()\n.\n\n\ntimeouts\n: \nWebDriverIO timeouts\n defined as hash.\n\n\n\n\nExample:\n\n\n{\n   \nhelpers\n: {\n     \nWebDriverIO\n : {\n       \nsmartWait\n: 5000,\n       \nbrowser\n: \nchrome\n,\n       \nrestart\n: false,\n       \nwindowSize\n: \nmaximize\n,\n       \ntimeouts\n: {\n         \nscript\n: 60000,\n         \npage load\n: 10000\n       }\n     }\n   }\n}\n\n\n\n\nAdditional configuration params can be used from \nwebdriverio\nwebsite\n.\n\n\nHeadless Chrome\n\n\n{\n   \nhelpers\n: {\n     \nWebDriverIO\n : {\n       \nurl\n: \nhttp://localhost\n,\n       \nbrowser\n: \nchrome\n,\n       \ndesiredCapabilities\n: {\n         \nchromeOptions\n: {\n           \nargs\n: [ \n--headless\n, \n--disable-gpu\n, \n--window-size=800,600\n ]\n         }\n       }\n     }\n   }\n}\n\n\n\n\nConnect through proxy\n\n\nCodeceptJS also provides flexible options when you want to execute tests to Selenium servers through proxy. You will\nneed to update the \nhelpers.WebDriverIO.desiredCapabilities.proxy\n key.\n\n\n{\n    \nhelpers\n: {\n        \nWebDriverIO\n: {\n            \ndesiredCapabilities\n: {\n                \nproxy\n: {\n                    \nproxyType\n: \nmanual|pac\n,\n                    \nproxyAutoconfigUrl\n: \nURL TO PAC FILE\n,\n                    \nhttpProxy\n: \nPROXY SERVER\n,\n                    \nsslProxy\n: \nPROXY SERVER\n,\n                    \nftpProxy\n: \nPROXY SERVER\n,\n                    \nsocksProxy\n: \nPROXY SERVER\n,\n                    \nsocksUsername\n: \nUSERNAME\n,\n                    \nsocksPassword\n: \nPASSWORD\n,\n                    \nnoProxy\n: \nBYPASS ADDRESSES\n\n                }\n            }\n        }\n    }\n}\n\n\n\n\nFor example,\n\n\n{\n    \nhelpers\n: {\n        \nWebDriverIO\n: {\n            \ndesiredCapabilities\n: {\n                \nproxy\n: {\n                    \nproxyType\n: \nmanual\n,\n                    \nhttpProxy\n: \nhttp://corporate.proxy:8080\n,\n                    \nsocksUsername\n: \ncodeceptjs\n,\n                    \nsocksPassword\n: \nsecret\n,\n                    \nnoProxy\n: \n127.0.0.1,localhost\n\n                }\n            }\n        }\n    }\n}\n\n\n\n\nPlease refer to \nSelenium - Proxy Object\n for more\ninformation.\n\n\nCloud Providers\n\n\nWebDriverIO makes it possible to execute tests against services like \nSauce Labs\n \nBrowserStack\n \nTestingBot\n\nCheck out their documentation on \navailable parameters\n\n\nConnecting to \nBrowserStack\n and \nSauce Labs\n is simple. All you need to do\nis set the \nuser\n and \nkey\n parameters. WebDriverIO automatically know which\nservice provider to connect to.\n\n\n{\n    \nhelpers\n:{\n        \nWebDriverIO\n: {\n            \nurl\n: \nYOUR_DESIRED_HOST\n,\n            \nuser\n: \nYOUR_BROWSERSTACK_USER\n,\n            \nkey\n: \nYOUR_BROWSERSTACK_KEY\n,\n            \ndesiredCapabilities\n: {\n                \nbrowserName\n: \nchrome\n,\n\n                // only set this if you're using BrowserStackLocal to test a local domain\n                // \nbrowserstack.local\n: true,\n\n                // set this option to tell browserstack to provide addition debugging info\n                // \nbrowserstack.debug\n: true,\n            }\n        }\n    }\n}\n\n\n\n\nMultiremote Capabilities\n\n\nThis is a work in progress but you can control two browsers at a time right out of the box.\nIndividual control is something that is planned for a later version.\n\n\nHere is the \nwebdriverio docs\n on the subject\n\n\n{\n    \nhelpers\n: {\n        \nWebDriverIO\n: {\n            \nmultiremote\n: {\n                \nMyChrome\n: {\n                    \ndesiredCapabilities\n: {\n                        \nbrowserName\n: \nchrome\n\n                     }\n                },\n                \nMyFirefox\n: {\n                   \ndesiredCapabilities\n: {\n                       \nbrowserName\n: \nfirefox\n\n                   }\n                }\n            }\n        }\n    }\n}\n\n\n\n\nAccess From Helpers\n\n\nReceive a WebDriverIO client from a custom helper by accessing \nbrowser\n property:\n\n\nthis.helpers['WebDriverIO'].browser\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\n_locate\n\n\nGet elements by different locator types, including strict locator\nShould be used in custom helpers:\n\n\nthis.helpers['WebDriverIO']._locate({name: 'password'}).then //...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nsmartWait\n   (optional, default \nfalse\n)\n\n\n\n\n_locateCheckable\n\n\nFind a checkbox by providing human readable text:\n\n\nthis.helpers['WebDriverIO']._locateCheckable('I agree with terms and conditions').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\n_locateClickable\n\n\nFind a clickable element by providing human readable text:\n\n\nthis.helpers['WebDriverIO']._locateClickable('Next page').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\n_locateFields\n\n\nFind field elements by providing human readable text:\n\n\nthis.helpers['WebDriverIO']._locateFields('Your email').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\nacceptPopup\n\n\nAccepts the active JavaScript native popup window, as created by window.alert|window.confirm|window.prompt.\nDon't confuse popups with modal windows, as created by \nvarious\nlibraries\n. Appium: support only web testing\n\n\namOnPage\n\n\nOpens a web page in a browser. Requires relative or absolute url.\nIf url starts with \n/\n, opens a web page of a site defined in \nurl\n config parameter.\n\n\nI.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page\n\n\n\n\nParameters\n\n\n\n\nurl\n  url path or global url\n    Appium: support only web testing\n\n\n\n\nappendField\n\n\nAppends text to a input field or textarea.\nField is located by name, label, CSS or XPath\n\n\nI.appendField('#myTextField', 'appended');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  text value\n    Appium: support, but it's clear a field before insert in apps\n\n\n\n\nattachFile\n\n\nAttaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remote system (if tests are running remotely).\n\n\nI.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\npathToFile\n  local file path relative to codecept.json config fileAppium: not tested\n\n\n\n\ncancelPopup\n\n\nDismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt.\nAppium: support only web testing\n\n\ncheckOption\n\n\nSelects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nfield\n  checkbox located by label\n\n\nname\n\n\nCSS\n\n\n\n\n\n\n\n\n\n\nAppium: not tested\n\n\n\n\n\n\n\n\n\n\n\n\nclearCookie\n\n\nClears a cookie by name,\nif none provided clears all cookies\n\n\nI.clearCookie();\nI.clearCookie('test');\n\n\n\n\nParameters\n\n\n\n\ncookie\n  (optional)\n    Appium: support only web testing\n\n\n\n\nclearField\n\n\nClears a \ntextarea\n or text \ninput\n element's value.\n\n\nI.clearField('Email');\nI.clearField('user[email]');\nI.clearField('#email');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n    Appium: support\n\n\n\n\nclick\n\n\nPerform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nlocator\n  clickable link or button located by text, or any element located by CSS\n\n\nXPath\n\n\nstrict locator\n\n\n\n\n\n\n\n\n\n\nAppium: support\n\n\n\n\n\n\n\n\n\n\n\n\ncloseCurrentTab\n\n\nClose current tab\n\n\nI.closeCurrentTab();\n\n\n\n\ncloseOtherTabs\n\n\nClose all tabs except for the current one.\nAppium: support web test\n\n\nI.closeOtherTabs();\n\n\n\n\ndefineTimeout\n\n\nSet \nWebDriverIO timeouts\n in realtime.\nAppium: support only web testing\nTimeouts are expected to be passed as object:\n\n\nI.defineTimeout({ script: 5000 });\nI.defineTimeout({ implicit: 10000, pageLoad: 10000, script: 5000 });\n\n\n\n\nParameters\n\n\n\n\ntimeouts\n  \n\n\n\n\ndontSee\n\n\nOpposite to \nsee\n. Checks that a text is not present on a page.\nUse context parameter to narrow down the search.\n\n\nI.dontSee('Login'); // assume we are already logged in\n\n\n\n\nParameters\n\n\n\n\ntext\n  is not present\n\n\ncontext\n  (optional) element located by CSS|XPath|strict locator in which to perfrom search\n    Appium: support with context in apps\n\n\n\n\ndontSeeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is not checked.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locatorAppium: not tested\n\n\n\n\ndontSeeCookie\n\n\nChecks that cookie with given name does not exist.\n\n\nParameters\n\n\n\n\nname\n  Appium: support only web testing\n\n\n\n\ndontSeeCurrentUrlEquals\n\n\nChecks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\n\n\nParameters\n\n\n\n\nurl\n  Appium: support only web testing\n\n\n\n\ndontSeeElement\n\n\nOpposite to \nseeElement\n. Checks that element is not visible (or in DOM)\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n    Appium: support\n\n\n\n\ndontSeeElementInDOM\n\n\nOpposite to \nseeElementInDOM\n. Checks that element is not on page.\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n    Appium: support\n\n\n\n\ndontSeeInCurrentUrl\n\n\nChecks that current url does not contain a provided fragment.\n\n\nParameters\n\n\n\n\nurl\n  Appium: support only web testing\n\n\n\n\ndontSeeInField\n\n\nChecks that value of input field or textare doesn't equal to given value\nOpposite to \nseeInField\n.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  is not expected to be a field value\n    Appium: support only web testing\n\n\n\n\ndontSeeInSource\n\n\nChecks that the current page contains the given string in its raw source code\n\n\nParameters\n\n\n\n\ntext\n  Appium: support\n\n\n\n\ndontSeeInTitle\n\n\nChecks that title does not contain text.\n\n\nParameters\n\n\n\n\ntext\n  Appium: support only web testing\n\n\n\n\ndoubleClick\n\n\nPerforms a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.\n\n\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncontext\n  Appium: support only web testing\n\n\n\n\ndragAndDrop\n\n\nDrag an item to a destination element.\nAppium: not tested\n\n\nI.dragAndDrop('#dragHandle', '#container');\n\n\n\n\nParameters\n\n\n\n\nsrcElement\n  \n\n\ndestElement\n  \n\n\n\n\nexecuteAsyncScript\n\n\nExecutes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.\n\n\nExample: In Vue.js to make components completely rendered we are waiting for \nnextTick\n.\n\n\nI.executeAsyncScript(function(done) {\nVue.nextTick(done); // waiting for next tick\n});\n\n\n\n\nBy passing value to \ndone()\n function you can return values.\nAdditional arguments can be passed as well, while \ndone\n function is always last parameter in arguments list.\n\n\nlet val = await I.executeAsyncScript(function(url, done) {\n// in browser context\n$.ajax(url, { success: (data) =\n done(data); }\n}, 'http://ajax.callback.url/');\n\n\n\n\nParameters\n\n\n\n\nfn\n  function to be executed in browser context\n\n\n\n\nexecuteScript\n\n\nExecutes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use async function and await to receive results.\n\n\nExample with jQuery DatePicker:\n\n\n// change date of jQuery DatePicker\nI.executeScript(function() {\n// now we are inside browser context\n$('date').datetimepicker('setDate', new Date());\n});\n\n\n\n\nCan return values. Don't forget to use \nawait\n to get them.\n\n\nlet date = await I.executeScript(function(el) {\n// only basic types can be returned\nreturn $(el).datetimepicker('getDate').toString();\n}, '#date'); // passing jquery selector\n\n\n\n\nParameters\n\n\n\n\nfn\n  function to be executed in browser context\n\n\n\n\nfillField\n\n\nFills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.\n\n\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  Appium: support\n\n\n\n\ngrabAttributeFrom\n\n\nRetrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet hint = await I.grabAttributeFrom('#tooltip', 'title');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nattr\n  Appium: can be used for apps only with several values (\"contentDescription\", \"text\", \"className\", \"resourceId\")\n\n\n\n\ngrabBrowserLogs\n\n\nGet JS log from browser. Log buffer is reset after each request.\n\n\nlet logs = await I.grabBrowserLogs();\nconsole.log(JSON.stringify(logs))\n\n\n\n\ngrabCookie\n\n\nGets a cookie object by name\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');\n\n\n\n\nParameters\n\n\n\n\nname\n  Appium: support only web testing\n\n\n\n\ngrabCssPropertyFrom\n\n\nGrab CSS property for given locator\nResumes test execution, so \nshould be used inside an async function with \nawait\n operator.\n\n\nconst value = await I.grabCssPropertyFrom('h3', 'font-weight');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncssProperty\n  \n\n\n\n\ngrabCurrentUrl\n\n\nGet current URL from browser.\nResumes test execution, so should be used inside an async function.\n\n\nlet url = await I.grabCurrentUrl();\nconsole.log(`Current URL is [${url}]`);\n\n\n\n\ngrabHTMLFrom\n\n\nRetrieves the innerHTML from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async function with \nawait\n operator.\nAppium: support only web testing\n\n\nlet postHTML = await I.grabHTMLFrom('#post');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\ngrabNumberOfOpenTabs\n\n\nGrab number of open tabs\n\n\nI.grabNumberOfOpenTabs();\n\n\n\n\ngrabNumberOfVisibleElements\n\n\nGrab number of visible elements by locator\n\n\nI.grabNumberOfVisibleElements('p');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\ngrabPageScrollPosition\n\n\nRetrieves a page scroll position and returns it to test.\nResumes test execution, so \nshould be used inside an async function with \nawait\n operator.\n\n\nlet { x, y } = await I.grabPageScrollPosition();\n\n\n\n\ngrabPopupText\n\n\nGrab the text within the popup. If no popup is visible then it will return null\n\n\nawait I.grabPopupText();\n\n\n\n\ngrabSource\n\n\nRetrieves page source and returns it to test.\nResumes test execution, so should be used inside an async function.\n\n\nlet pageSource = await I.grabSource();\n\n\n\n\nAppium: support\n\n\ngrabTextFrom\n\n\nRetrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet pin = await I.grabTextFrom('#pin');\n\n\n\n\nIf multiple elements found returns an array of texts.\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n    Appium: support\n\n\n\n\ngrabTitle\n\n\nRetrieves a page title and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet title = await I.grabTitle();\n\n\n\n\nAppium: support only web testing\n\n\ngrabValueFrom\n\n\nRetrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async function with \nawait\n operator.\n\n\nlet email = await I.grabValueFrom('input[name=email]');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n    Appium: support only web testing\n\n\n\n\nmoveCursorTo\n\n\nMoves cursor to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\n\n\nI.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);\n\n\n\n\nAppium: support only web testing\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\noffsetX\n   (optional, default \n0\n)\n\n\noffsetY\n   (optional, default \n0\n)\n\n\n\n\nopenNewTab\n\n\nOpen new tab and switch to it\n\n\nI.openNewTab();\n\n\n\n\npressKey\n\n\nPresses a key on a focused element.\nSpecial keys like 'Enter', 'Control', \netc\n\nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.\n\n\nI.pressKey('Enter');\nI.pressKey(['Control','a']);\n\n\n\n\nValid key names\n are:\n\n\n\n\n'Add'\n,\n\n\n'Alt'\n,\n\n\n'ArrowDown'\n or \n'Down arrow'\n,\n\n\n'ArrowLeft'\n or \n'Left arrow'\n,\n\n\n'ArrowRight'\n or \n'Right arrow'\n,\n\n\n'ArrowUp'\n or \n'Up arrow'\n,\n\n\n'Backspace'\n,\n\n\n'Command'\n,\n\n\n'Control'\n,\n\n\n'Del'\n,\n\n\n'Divide'\n,\n\n\n'End'\n,\n\n\n'Enter'\n,\n\n\n'Equals'\n,\n\n\n'Escape'\n,\n\n\n'F1 to F12'\n,\n\n\n'Home'\n,\n\n\n'Insert'\n,\n\n\n'Meta'\n,\n\n\n'Multiply'\n,\n\n\n'Numpad 0'\n to \n'Numpad 9'\n,\n\n\n'Pagedown'\n or \n'PageDown'\n,\n\n\n'Pageup'\n or \n'PageUp'\n,\n\n\n'Pause'\n,\n\n\n'Semicolon'\n,\n\n\n'Shift'\n,\n\n\n'Space'\n,\n\n\n'Subtract'\n,\n\n\n'Tab'\n.\n\n\n\n\nTo make combinations with modifier and mouse clicks (like Ctrl+Click) press a modifier, click, then release it.\nAppium: support, but clear field before pressing in apps:\n\n\nI.pressKey('Control');\nI.click('#someelement');\nI.pressKey('Control');\n\n\n\n\nParameters\n\n\n\n\nkey\n  \n\n\n\n\nrefreshPage\n\n\nReload the current page.\n\n\n`I.refreshPage();\n\n\n\n\nresizeWindow\n\n\nResize the current window to provided width and height.\nFirst parameter can be set to \nmaximize\n\n\nParameters\n\n\n\n\nwidth\n  or \nmaximize\n\n\nheight\n  Appium: not tested in web, in apps doesn't work\n\n\n\n\nrightClick\n\n\nPerforms right click on an element matched by CSS or XPath.\nAppium: support, but in apps works as usual click\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\nrunInWeb\n\n\nplaceholder for ~ locator only test case write once run on both Appium and WebDriverIO\n\n\nParameters\n\n\n\n\nfn\n  \n\n\n\n\nrunOnAndroid\n\n\nplaceholder for ~ locator only test case write once run on both Appium and WebDriverIO\n\n\nParameters\n\n\n\n\ncaps\n  \n\n\nfn\n  \n\n\n\n\nrunOnIOS\n\n\nplaceholder for ~ locator only test case write once run on both Appium and WebDriverIO\n\n\nParameters\n\n\n\n\ncaps\n  \n\n\nfn\n  \n\n\n\n\nsaveScreenshot\n\n\nSaves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder. \nOptionally resize the window to the full available page \nscrollHeight\n and \nscrollWidth\n to capture the entire page by passing \ntrue\n in as the second argument.\n\n\nI.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png',true) \\\\resizes to available scrollHeight and scrollWidth before taking screenshot\n\n\n\n\nParameters\n\n\n\n\nfileName\n  \n\n\nfullPage\n  (optional)\n    Appium: support\n\n\n\n\nscrollPageToBottom\n\n\nScroll page to the bottom\n\n\nI.scrollPageToBottom();\n\n\n\n\nscrollPageToTop\n\n\nScroll page to the top\n\n\nI.scrollPageToTop();\n\n\n\n\nscrollTo\n\n\nScrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\nAppium: support only web testing\n\n\nI.scrollTo('footer');\nI.scrollTo('#submit', 5,5);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\noffsetX\n   (optional, default \n0\n)\n\n\noffsetY\n   (optional, default \n0\n)\n\n\n\n\nsee\n\n\nChecks that a page contains a visible text.\nUse context parameter to narrow down the search.\n\n\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n\n\n\n\nParameters\n\n\n\n\ntext\n  expected on page\n\n\ncontext\n  (optional) element located by CSS|Xpath|strict locator in which to search for text\n    Appium: support with context in apps\n\n\n\n\nseeAttributesOnElements\n\n\nChecks that all elements with given locator have given attributes.\n\n\nI.seeAttributesOnElements('//form', {'method': \npost\n});\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nattributes\n  \n\n\n\n\nseeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is checked.\n\n\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n    Appium: not tested\n\n\n\n\nseeCookie\n\n\nChecks that cookie with given name exists.\n\n\nI.seeCookie('Auth');\n\n\n\n\nParameters\n\n\n\n\nname\n  Appium: support only web testing\n\n\n\n\nseeCssPropertiesOnElements\n\n\nChecks that all elements with given locator have given CSS properties.\n\n\nI.seeCssPropertiesOnElements('h3', { 'font-weight': \nbold\n});\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nproperties\n  \n\n\ncssProperties\n  \n\n\n\n\nseeCurrentUrlEquals\n\n\nChecks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:\n\n\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n\n\n\n\nParameters\n\n\n\n\nurl\n  Appium: support only web testing\n\n\n\n\nseeElement\n\n\nChecks that a given Element is visible\nElement is located by CSS or XPath.\n\n\nI.seeElement('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n    Appium: support\n\n\n\n\nseeElementInDOM\n\n\nChecks that a given Element is present in the DOM\nElement is located by CSS or XPath.\n\n\nI.seeElementInDOM('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n    Appium: support\n\n\n\n\nseeInCurrentUrl\n\n\nChecks that current url contains a provided fragment.\n\n\nI.seeInCurrentUrl('/register'); // we are on registration page\n\n\n\n\nParameters\n\n\n\n\nurl\n  Appium: support only web testing\n\n\n\n\nseeInField\n\n\nChecks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.\n\n\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  Appium: support only web testing\n\n\n\n\nseeInPopup\n\n\nChecks that the active JavaScript popup, as created by \nwindow.alert|window.confirm|window.prompt\n, contains the\ngiven string. Appium: support only web testing\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeInSource\n\n\nChecks that the current page contains the given string in its raw source code.\n\n\nI.seeInSource('\nh1\nGreen eggs \namp; ham\n/h1\n');\n\n\n\n\nParameters\n\n\n\n\ntext\n  Appium: support\n\n\n\n\nseeInTitle\n\n\nChecks that title contains text.\n\n\nParameters\n\n\n\n\ntext\n  Appium: support only web testing\n\n\n\n\nseeNumberOfElements\n\n\nasserts that an element appears a given number of times in the DOM\nElement is located by label or name or CSS or XPath.\nAppium: support\n\n\nI.seeNumberOfElements('#submitBtn', 1);\n\n\n\n\nParameters\n\n\n\n\nselector\n  \n\n\nnum\n  \n\n\n\n\nseeNumberOfVisibleElements\n\n\nasserts that an element is visible a given number of times\nElement is located by CSS or XPath.\n\n\nI.seeNumberOfVisibleElements('.buttons', 3);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nnum\n  \n\n\n\n\nseeTextEquals\n\n\nChecks that text is equal to provided one.\n\n\nI.seeTextEquals('text', 'h1');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\ncontext\n   (optional, default \nnull\n)\n\n\n\n\nseeTitleEquals\n\n\nChecks that title is equal to provided one.\n\n\nI.seeTitleEquals('Test title.');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nselectOption\n\n\nSelects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.\n\n\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n\n\n\nProvide an array for the second argument to select multiple options.\n\n\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n\n\n\n\nParameters\n\n\n\n\nselect\n  field located by label|name|CSS|XPath|strict locator\n\n\noption\n  \n\n\n\n\nsetCookie\n\n\nSets a cookie\n\n\nI.setCookie({name: 'auth', value: true});\n\n\n\n\nParameters\n\n\n\n\ncookie\n  Appium: support only web testingUses Selenium's JSON \ncookie\n    format\n.\n\n\n\n\nswitchTo\n\n\nSwitches frame or in case of null locator reverts to parent.\nAppium: support only web testing\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\nswitchToNextTab\n\n\nSwitch focus to a particular tab by its number. It waits tabs loading and then switch tab\n\n\nI.switchToNextTab();\nI.switchToNextTab(2);\n\n\n\n\nParameters\n\n\n\n\nnum\n   (optional, default \n1\n)\n\n\nsec\n   (optional, default \nnull\n)\n\n\n\n\nswitchToPreviousTab\n\n\nSwitch focus to a particular tab by its number. It waits tabs loading and then switch tab\n\n\nI.switchToPreviousTab();\nI.switchToPreviousTab(2);\n\n\n\n\nParameters\n\n\n\n\nnum\n   (optional, default \n1\n)\n\n\nsec\n   (optional, default \nnull\n)\n\n\n\n\nuncheckOption\n\n\nUnselects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\nI.uncheckOption('#agree');\nI.uncheckOption('I Agree to Terms and Conditions');\nI.uncheckOption('agree', '//form');\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nfield\n  checkbox located by label\n\n\nname\n\n\nCSS\n\n\n\n\n\n\n\n\n\n\nwait\n\n\nPauses execution for a number of seconds.\n\n\nI.wait(2); // wait 2 secs\n\n\n\n\nParameters\n\n\n\n\nsec\n  Appium: support\n\n\n\n\nwaitForDetached\n\n\nWaits for an element to become not attached to the DOM on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForDetached('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by defaultAppium: support\n\n\n\n\nwaitForElement\n\n\nWaits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n    Appium: support\n\n\n\n\nwaitForEnabled\n\n\nWaits for element to become enabled (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n    Appium: support\n\n\n\n\nwaitForFunction\n\n\nWaits for a function to return true (waits for 1 sec by default).\nRunning in browser context.\n\n\nI.waitForFunction(fn[, [args[, timeout]])\n\n\n\n\nI.waitForFunction(() =\n window.requests == 0);\nI.waitForFunction(() =\n window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) =\n window.requests == count, [3], 5) // pass args and wait for 5 sec\n\n\n\n\nParameters\n\n\n\n\nfunction\n  to be executed in browser context\n\n\nargs\n  arguments for function\n\n\nfn\n  \n\n\nargsOrSec\n   (optional, default \nnull\n)\n\n\nsec\n  time seconds to wait, 1 by defaultAppium: support\n\n\n\n\nwaitForInvisible\n\n\nWaits for an element to be removed or become invisible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForInvisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by defaultAppium: support\n\n\n\n\nwaitForText\n\n\nWaits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.\n\n\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n\n\n\n\nParameters\n\n\n\n\ntext\n  to wait for\n\n\nsec\n  seconds to wait\n\n\ncontext\n  element located by CSS|XPath|strict locator\n    Appium: support\n\n\naContext\n   (optional, default \nnull\n)\n\n\n\n\nwaitForValue\n\n\nWaits for the specified value to be in value attribute\n\n\nI.waitForValue('//input', \nGoodValue\n);\n\n\n\n\nParameters\n\n\n\n\nfield\n  input field\n\n\nvalue\n  expected value\n\n\nsec\n  seconds to wait, 1 sec by default\n\n\n\n\nwaitForVisible\n\n\nWaits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForVisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n    Appium: support\n\n\n\n\nwaitInUrl\n\n\nWaiting for the part of the URL to match the expected. Useful for SPA to understand that page was changed.\n\n\nI.waitInUrl('/info', 2);\n\n\n\n\nParameters\n\n\n\n\nurlPart\n  \n\n\nsec\n   (optional, default \nnull\n)\n\n\n\n\nwaitNumberOfVisibleElements\n\n\nWaits for a specified number of elements on the page\n\n\nI.waitNumberOfVisibleElements('a', 3);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nseconds\n  \n\n\nnum\n  \n\n\nsec\n   (optional, default \nnull\n)\n\n\n\n\nwaitToHide\n\n\nWaits for an element to hide (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitToHide('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by defaultAppium: support\n\n\n\n\nwaitUntil\n\n\nWaits for a function to return true (waits for 1sec by default).\n\n\nI.waitUntil(() =\n window.requests == 0);\nI.waitUntil(() =\n window.requests == 0, 5);\n\n\n\n\nParameters\n\n\n\n\nfunction\n  function which is executed in browser context.\n\n\nfn\n  \n\n\nsec\n  time seconds to wait, 1 by defaultAppium: support\n\n\ntimeoutMsg\n   (optional, default \nnull\n)\n\n\n\n\nwaitUrlEquals\n\n\nWaits for the entire URL to match the expected\n\n\nI.waitUrlEquals('/info', 2);\nI.waitUrlEquals('http://127.0.0.1:8000/info');\n\n\n\n\nParameters\n\n\n\n\nurlPart\n  \n\n\nsec\n   (optional, default \nnull\n)\n\n\n\n\nlocator\n\n\njust press button if no selector is given", 
            "title": "WebDriverIO"
        }, 
        {
            "location": "/helpers/WebDriverIO/#webdriverio", 
            "text": "WebDriverIO helper which wraps  webdriverio  library to\nmanipulate browser using Selenium WebDriver or PhantomJS.  WebDriverIO requires  Selenium Server and ChromeDriver/GeckoDriver to be installed .  Configuration  This helper should be configured in codecept.json   url : base url of website to be tested.  browser : browser in which to perform testing.  host : (optional, default: localhost) - WebDriver host to connect.  port : (optional, default: 4444) - WebDriver port to connect.  protocol : (optional, default: http) - protocol for WebDriver server.  path : (optional, default: /wd/hub) - path to WebDriver server,  restart : (optional, default: true) - restart browser between tests.  smartWait : (optional)  enables  SmartWait ; wait for additional milliseconds for element to appear. Enable for 5 secs: \"smartWait\": 5000.  disableScreenshots : (optional, default: false) - don't save screenshots on failure.  fullPageScreenshots  (optional, default: false) - make full page screenshots on failure.  uniqueScreenshotNames : (optional, default: false) - option to prevent screenshot override if you have scenarios with the same name in different suites.  keepBrowserState : (optional, default: false) - keep browser state between tests when  restart  is set to false.  keepCookies : (optional, default: false) - keep cookies between tests when  restart  set to false.  windowSize : (optional) default window size. Set to  maximize  or a dimension in the format  640x480 .  waitForTimeout : (optional, default: 1000) sets default wait time in  ms  for all  wait*  functions.  desiredCapabilities : Selenium's  desired\n    capabilities .  manualStart : (optional, default: false) - do not start browser before a test, start it manually inside a helper\n    with  this.helpers[\"WebDriverIO\"]._startBrowser() .  timeouts :  WebDriverIO timeouts  defined as hash.   Example:  {\n    helpers : {\n      WebDriverIO  : {\n        smartWait : 5000,\n        browser :  chrome ,\n        restart : false,\n        windowSize :  maximize ,\n        timeouts : {\n          script : 60000,\n          page load : 10000\n       }\n     }\n   }\n}  Additional configuration params can be used from  webdriverio\nwebsite .  Headless Chrome  {\n    helpers : {\n      WebDriverIO  : {\n        url :  http://localhost ,\n        browser :  chrome ,\n        desiredCapabilities : {\n          chromeOptions : {\n            args : [  --headless ,  --disable-gpu ,  --window-size=800,600  ]\n         }\n       }\n     }\n   }\n}  Connect through proxy  CodeceptJS also provides flexible options when you want to execute tests to Selenium servers through proxy. You will\nneed to update the  helpers.WebDriverIO.desiredCapabilities.proxy  key.  {\n     helpers : {\n         WebDriverIO : {\n             desiredCapabilities : {\n                 proxy : {\n                     proxyType :  manual|pac ,\n                     proxyAutoconfigUrl :  URL TO PAC FILE ,\n                     httpProxy :  PROXY SERVER ,\n                     sslProxy :  PROXY SERVER ,\n                     ftpProxy :  PROXY SERVER ,\n                     socksProxy :  PROXY SERVER ,\n                     socksUsername :  USERNAME ,\n                     socksPassword :  PASSWORD ,\n                     noProxy :  BYPASS ADDRESSES \n                }\n            }\n        }\n    }\n}  For example,  {\n     helpers : {\n         WebDriverIO : {\n             desiredCapabilities : {\n                 proxy : {\n                     proxyType :  manual ,\n                     httpProxy :  http://corporate.proxy:8080 ,\n                     socksUsername :  codeceptjs ,\n                     socksPassword :  secret ,\n                     noProxy :  127.0.0.1,localhost \n                }\n            }\n        }\n    }\n}  Please refer to  Selenium - Proxy Object  for more\ninformation.  Cloud Providers  WebDriverIO makes it possible to execute tests against services like  Sauce Labs   BrowserStack   TestingBot \nCheck out their documentation on  available parameters  Connecting to  BrowserStack  and  Sauce Labs  is simple. All you need to do\nis set the  user  and  key  parameters. WebDriverIO automatically know which\nservice provider to connect to.  {\n     helpers :{\n         WebDriverIO : {\n             url :  YOUR_DESIRED_HOST ,\n             user :  YOUR_BROWSERSTACK_USER ,\n             key :  YOUR_BROWSERSTACK_KEY ,\n             desiredCapabilities : {\n                 browserName :  chrome ,\n\n                // only set this if you're using BrowserStackLocal to test a local domain\n                //  browserstack.local : true,\n\n                // set this option to tell browserstack to provide addition debugging info\n                //  browserstack.debug : true,\n            }\n        }\n    }\n}  Multiremote Capabilities  This is a work in progress but you can control two browsers at a time right out of the box.\nIndividual control is something that is planned for a later version.  Here is the  webdriverio docs  on the subject  {\n     helpers : {\n         WebDriverIO : {\n             multiremote : {\n                 MyChrome : {\n                     desiredCapabilities : {\n                         browserName :  chrome \n                     }\n                },\n                 MyFirefox : {\n                    desiredCapabilities : {\n                        browserName :  firefox \n                   }\n                }\n            }\n        }\n    }\n}", 
            "title": "WebDriverIO"
        }, 
        {
            "location": "/helpers/WebDriverIO/#access-from-helpers", 
            "text": "Receive a WebDriverIO client from a custom helper by accessing  browser  property:  this.helpers['WebDriverIO'].browser  Parameters   config", 
            "title": "Access From Helpers"
        }, 
        {
            "location": "/helpers/WebDriverIO/#_locate", 
            "text": "Get elements by different locator types, including strict locator\nShould be used in custom helpers:  this.helpers['WebDriverIO']._locate({name: 'password'}).then //...  Parameters   locator     smartWait    (optional, default  false )", 
            "title": "_locate"
        }, 
        {
            "location": "/helpers/WebDriverIO/#_locatecheckable", 
            "text": "Find a checkbox by providing human readable text:  this.helpers['WebDriverIO']._locateCheckable('I agree with terms and conditions').then // ...  Parameters   locator", 
            "title": "_locateCheckable"
        }, 
        {
            "location": "/helpers/WebDriverIO/#_locateclickable", 
            "text": "Find a clickable element by providing human readable text:  this.helpers['WebDriverIO']._locateClickable('Next page').then // ...  Parameters   locator", 
            "title": "_locateClickable"
        }, 
        {
            "location": "/helpers/WebDriverIO/#_locatefields", 
            "text": "Find field elements by providing human readable text:  this.helpers['WebDriverIO']._locateFields('Your email').then // ...  Parameters   locator", 
            "title": "_locateFields"
        }, 
        {
            "location": "/helpers/WebDriverIO/#acceptpopup", 
            "text": "Accepts the active JavaScript native popup window, as created by window.alert|window.confirm|window.prompt.\nDon't confuse popups with modal windows, as created by  various\nlibraries . Appium: support only web testing", 
            "title": "acceptPopup"
        }, 
        {
            "location": "/helpers/WebDriverIO/#amonpage", 
            "text": "Opens a web page in a browser. Requires relative or absolute url.\nIf url starts with  / , opens a web page of a site defined in  url  config parameter.  I.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page  Parameters   url   url path or global url\n    Appium: support only web testing", 
            "title": "amOnPage"
        }, 
        {
            "location": "/helpers/WebDriverIO/#appendfield", 
            "text": "Appends text to a input field or textarea.\nField is located by name, label, CSS or XPath  I.appendField('#myTextField', 'appended');  Parameters   field   located by label|name|CSS|XPath|strict locator  value   text value\n    Appium: support, but it's clear a field before insert in apps", 
            "title": "appendField"
        }, 
        {
            "location": "/helpers/WebDriverIO/#attachfile", 
            "text": "Attaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remote system (if tests are running remotely).  I.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');  Parameters   locator   field located by label|name|CSS|XPath|strict locator  pathToFile   local file path relative to codecept.json config fileAppium: not tested", 
            "title": "attachFile"
        }, 
        {
            "location": "/helpers/WebDriverIO/#cancelpopup", 
            "text": "Dismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt.\nAppium: support only web testing", 
            "title": "cancelPopup"
        }, 
        {
            "location": "/helpers/WebDriverIO/#checkoption", 
            "text": "Selects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.  The second parameter is a context (CSS or XPath locator) to narrow the search.  I.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');  Parameters     -    field   checkbox located by label  name  CSS      Appium: not tested", 
            "title": "checkOption"
        }, 
        {
            "location": "/helpers/WebDriverIO/#clearcookie", 
            "text": "Clears a cookie by name,\nif none provided clears all cookies  I.clearCookie();\nI.clearCookie('test');  Parameters   cookie   (optional)\n    Appium: support only web testing", 
            "title": "clearCookie"
        }, 
        {
            "location": "/helpers/WebDriverIO/#clearfield", 
            "text": "Clears a  textarea  or text  input  element's value.  I.clearField('Email');\nI.clearField('user[email]');\nI.clearField('#email');  Parameters   field   located by label|name|CSS|XPath|strict locator\n    Appium: support", 
            "title": "clearField"
        }, 
        {
            "location": "/helpers/WebDriverIO/#click", 
            "text": "Perform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.  The second parameter is a context (CSS or XPath locator) to narrow the search.  // simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});  Parameters     -    locator   clickable link or button located by text, or any element located by CSS  XPath  strict locator      Appium: support", 
            "title": "click"
        }, 
        {
            "location": "/helpers/WebDriverIO/#closecurrenttab", 
            "text": "Close current tab  I.closeCurrentTab();", 
            "title": "closeCurrentTab"
        }, 
        {
            "location": "/helpers/WebDriverIO/#closeothertabs", 
            "text": "Close all tabs except for the current one.\nAppium: support web test  I.closeOtherTabs();", 
            "title": "closeOtherTabs"
        }, 
        {
            "location": "/helpers/WebDriverIO/#definetimeout", 
            "text": "Set  WebDriverIO timeouts  in realtime.\nAppium: support only web testing\nTimeouts are expected to be passed as object:  I.defineTimeout({ script: 5000 });\nI.defineTimeout({ implicit: 10000, pageLoad: 10000, script: 5000 });  Parameters   timeouts", 
            "title": "defineTimeout"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontsee", 
            "text": "Opposite to  see . Checks that a text is not present on a page.\nUse context parameter to narrow down the search.  I.dontSee('Login'); // assume we are already logged in  Parameters   text   is not present  context   (optional) element located by CSS|XPath|strict locator in which to perfrom search\n    Appium: support with context in apps", 
            "title": "dontSee"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseecheckboxischecked", 
            "text": "Verifies that the specified checkbox is not checked.  Parameters   field   located by label|name|CSS|XPath|strict locatorAppium: not tested", 
            "title": "dontSeeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseecookie", 
            "text": "Checks that cookie with given name does not exist.  Parameters   name   Appium: support only web testing", 
            "title": "dontSeeCookie"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseecurrenturlequals", 
            "text": "Checks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.  Parameters   url   Appium: support only web testing", 
            "title": "dontSeeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeelement", 
            "text": "Opposite to  seeElement . Checks that element is not visible (or in DOM)  Parameters   locator   located by CSS|XPath|Strict locator\n    Appium: support", 
            "title": "dontSeeElement"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeelementindom", 
            "text": "Opposite to  seeElementInDOM . Checks that element is not on page.  Parameters   locator   located by CSS|XPath|Strict locator\n    Appium: support", 
            "title": "dontSeeElementInDOM"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeincurrenturl", 
            "text": "Checks that current url does not contain a provided fragment.  Parameters   url   Appium: support only web testing", 
            "title": "dontSeeInCurrentUrl"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeinfield", 
            "text": "Checks that value of input field or textare doesn't equal to given value\nOpposite to  seeInField .  Parameters   field   located by label|name|CSS|XPath|strict locator  value   is not expected to be a field value\n    Appium: support only web testing", 
            "title": "dontSeeInField"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code  Parameters   text   Appium: support", 
            "title": "dontSeeInSource"
        }, 
        {
            "location": "/helpers/WebDriverIO/#dontseeintitle", 
            "text": "Checks that title does not contain text.  Parameters   text   Appium: support only web testing", 
            "title": "dontSeeInTitle"
        }, 
        {
            "location": "/helpers/WebDriverIO/#doubleclick", 
            "text": "Performs a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.  I.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');  Parameters   locator     context   Appium: support only web testing", 
            "title": "doubleClick"
        }, 
        {
            "location": "/helpers/WebDriverIO/#draganddrop", 
            "text": "Drag an item to a destination element.\nAppium: not tested  I.dragAndDrop('#dragHandle', '#container');  Parameters   srcElement     destElement", 
            "title": "dragAndDrop"
        }, 
        {
            "location": "/helpers/WebDriverIO/#executeasyncscript", 
            "text": "Executes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.  Example: In Vue.js to make components completely rendered we are waiting for  nextTick .  I.executeAsyncScript(function(done) {\nVue.nextTick(done); // waiting for next tick\n});  By passing value to  done()  function you can return values.\nAdditional arguments can be passed as well, while  done  function is always last parameter in arguments list.  let val = await I.executeAsyncScript(function(url, done) {\n// in browser context\n$.ajax(url, { success: (data) =  done(data); }\n}, 'http://ajax.callback.url/');  Parameters   fn   function to be executed in browser context", 
            "title": "executeAsyncScript"
        }, 
        {
            "location": "/helpers/WebDriverIO/#executescript", 
            "text": "Executes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use async function and await to receive results.  Example with jQuery DatePicker:  // change date of jQuery DatePicker\nI.executeScript(function() {\n// now we are inside browser context\n$('date').datetimepicker('setDate', new Date());\n});  Can return values. Don't forget to use  await  to get them.  let date = await I.executeScript(function(el) {\n// only basic types can be returned\nreturn $(el).datetimepicker('getDate').toString();\n}, '#date'); // passing jquery selector  Parameters   fn   function to be executed in browser context", 
            "title": "executeScript"
        }, 
        {
            "location": "/helpers/WebDriverIO/#fillfield", 
            "text": "Fills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.  // by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');  Parameters   field   located by label|name|CSS|XPath|strict locator  value   Appium: support", 
            "title": "fillField"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabattributefrom", 
            "text": "Retrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let hint = await I.grabAttributeFrom('#tooltip', 'title');  Parameters   locator   element located by CSS|XPath|strict locator  attr   Appium: can be used for apps only with several values (\"contentDescription\", \"text\", \"className\", \"resourceId\")", 
            "title": "grabAttributeFrom"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabbrowserlogs", 
            "text": "Get JS log from browser. Log buffer is reset after each request.  let logs = await I.grabBrowserLogs();\nconsole.log(JSON.stringify(logs))", 
            "title": "grabBrowserLogs"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabcookie", 
            "text": "Gets a cookie object by name\nResumes test execution, so  should be used inside async with  await  operator.  let cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');  Parameters   name   Appium: support only web testing", 
            "title": "grabCookie"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabcsspropertyfrom", 
            "text": "Grab CSS property for given locator\nResumes test execution, so  should be used inside an async function with  await  operator.  const value = await I.grabCssPropertyFrom('h3', 'font-weight');  Parameters   locator     cssProperty", 
            "title": "grabCssPropertyFrom"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabcurrenturl", 
            "text": "Get current URL from browser.\nResumes test execution, so should be used inside an async function.  let url = await I.grabCurrentUrl();\nconsole.log(`Current URL is [${url}]`);", 
            "title": "grabCurrentUrl"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabhtmlfrom", 
            "text": "Retrieves the innerHTML from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async function with  await  operator.\nAppium: support only web testing  let postHTML = await I.grabHTMLFrom('#post');  Parameters   locator", 
            "title": "grabHTMLFrom"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabnumberofopentabs", 
            "text": "Grab number of open tabs  I.grabNumberOfOpenTabs();", 
            "title": "grabNumberOfOpenTabs"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabnumberofvisibleelements", 
            "text": "Grab number of visible elements by locator  I.grabNumberOfVisibleElements('p');  Parameters   locator", 
            "title": "grabNumberOfVisibleElements"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabpagescrollposition", 
            "text": "Retrieves a page scroll position and returns it to test.\nResumes test execution, so  should be used inside an async function with  await  operator.  let { x, y } = await I.grabPageScrollPosition();", 
            "title": "grabPageScrollPosition"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabpopuptext", 
            "text": "Grab the text within the popup. If no popup is visible then it will return null  await I.grabPopupText();", 
            "title": "grabPopupText"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabsource", 
            "text": "Retrieves page source and returns it to test.\nResumes test execution, so should be used inside an async function.  let pageSource = await I.grabSource();  Appium: support", 
            "title": "grabSource"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabtextfrom", 
            "text": "Retrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let pin = await I.grabTextFrom('#pin');  If multiple elements found returns an array of texts.  Parameters   locator   element located by CSS|XPath|strict locator\n    Appium: support", 
            "title": "grabTextFrom"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabtitle", 
            "text": "Retrieves a page title and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let title = await I.grabTitle();  Appium: support only web testing", 
            "title": "grabTitle"
        }, 
        {
            "location": "/helpers/WebDriverIO/#grabvaluefrom", 
            "text": "Retrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async function with  await  operator.  let email = await I.grabValueFrom('input[name=email]');  Parameters   locator   field located by label|name|CSS|XPath|strict locator\n    Appium: support only web testing", 
            "title": "grabValueFrom"
        }, 
        {
            "location": "/helpers/WebDriverIO/#movecursorto", 
            "text": "Moves cursor to element matched by locator.\nExtra shift can be set with offsetX and offsetY options  I.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);  Appium: support only web testing  Parameters   locator     offsetX    (optional, default  0 )  offsetY    (optional, default  0 )", 
            "title": "moveCursorTo"
        }, 
        {
            "location": "/helpers/WebDriverIO/#opennewtab", 
            "text": "Open new tab and switch to it  I.openNewTab();", 
            "title": "openNewTab"
        }, 
        {
            "location": "/helpers/WebDriverIO/#presskey", 
            "text": "Presses a key on a focused element.\nSpecial keys like 'Enter', 'Control',  etc \nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.  I.pressKey('Enter');\nI.pressKey(['Control','a']);  Valid key names  are:   'Add' ,  'Alt' ,  'ArrowDown'  or  'Down arrow' ,  'ArrowLeft'  or  'Left arrow' ,  'ArrowRight'  or  'Right arrow' ,  'ArrowUp'  or  'Up arrow' ,  'Backspace' ,  'Command' ,  'Control' ,  'Del' ,  'Divide' ,  'End' ,  'Enter' ,  'Equals' ,  'Escape' ,  'F1 to F12' ,  'Home' ,  'Insert' ,  'Meta' ,  'Multiply' ,  'Numpad 0'  to  'Numpad 9' ,  'Pagedown'  or  'PageDown' ,  'Pageup'  or  'PageUp' ,  'Pause' ,  'Semicolon' ,  'Shift' ,  'Space' ,  'Subtract' ,  'Tab' .   To make combinations with modifier and mouse clicks (like Ctrl+Click) press a modifier, click, then release it.\nAppium: support, but clear field before pressing in apps:  I.pressKey('Control');\nI.click('#someelement');\nI.pressKey('Control');  Parameters   key", 
            "title": "pressKey"
        }, 
        {
            "location": "/helpers/WebDriverIO/#refreshpage", 
            "text": "Reload the current page.  `I.refreshPage();", 
            "title": "refreshPage"
        }, 
        {
            "location": "/helpers/WebDriverIO/#resizewindow", 
            "text": "Resize the current window to provided width and height.\nFirst parameter can be set to  maximize  Parameters   width   or  maximize  height   Appium: not tested in web, in apps doesn't work", 
            "title": "resizeWindow"
        }, 
        {
            "location": "/helpers/WebDriverIO/#rightclick", 
            "text": "Performs right click on an element matched by CSS or XPath.\nAppium: support, but in apps works as usual click  Parameters   locator", 
            "title": "rightClick"
        }, 
        {
            "location": "/helpers/WebDriverIO/#runinweb", 
            "text": "placeholder for ~ locator only test case write once run on both Appium and WebDriverIO  Parameters   fn", 
            "title": "runInWeb"
        }, 
        {
            "location": "/helpers/WebDriverIO/#runonandroid", 
            "text": "placeholder for ~ locator only test case write once run on both Appium and WebDriverIO  Parameters   caps     fn", 
            "title": "runOnAndroid"
        }, 
        {
            "location": "/helpers/WebDriverIO/#runonios", 
            "text": "placeholder for ~ locator only test case write once run on both Appium and WebDriverIO  Parameters   caps     fn", 
            "title": "runOnIOS"
        }, 
        {
            "location": "/helpers/WebDriverIO/#savescreenshot", 
            "text": "Saves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder. \nOptionally resize the window to the full available page  scrollHeight  and  scrollWidth  to capture the entire page by passing  true  in as the second argument.  I.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png',true) \\\\resizes to available scrollHeight and scrollWidth before taking screenshot  Parameters   fileName     fullPage   (optional)\n    Appium: support", 
            "title": "saveScreenshot"
        }, 
        {
            "location": "/helpers/WebDriverIO/#scrollpagetobottom", 
            "text": "Scroll page to the bottom  I.scrollPageToBottom();", 
            "title": "scrollPageToBottom"
        }, 
        {
            "location": "/helpers/WebDriverIO/#scrollpagetotop", 
            "text": "Scroll page to the top  I.scrollPageToTop();", 
            "title": "scrollPageToTop"
        }, 
        {
            "location": "/helpers/WebDriverIO/#scrollto", 
            "text": "Scrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\nAppium: support only web testing  I.scrollTo('footer');\nI.scrollTo('#submit', 5,5);  Parameters   locator     offsetX    (optional, default  0 )  offsetY    (optional, default  0 )", 
            "title": "scrollTo"
        }, 
        {
            "location": "/helpers/WebDriverIO/#see", 
            "text": "Checks that a page contains a visible text.\nUse context parameter to narrow down the search.  I.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator  Parameters   text   expected on page  context   (optional) element located by CSS|Xpath|strict locator in which to search for text\n    Appium: support with context in apps", 
            "title": "see"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeattributesonelements", 
            "text": "Checks that all elements with given locator have given attributes.  I.seeAttributesOnElements('//form', {'method':  post });  Parameters   locator     attributes", 
            "title": "seeAttributesOnElements"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seecheckboxischecked", 
            "text": "Verifies that the specified checkbox is checked.  I.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});  Parameters   field   located by label|name|CSS|XPath|strict locator\n    Appium: not tested", 
            "title": "seeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seecookie", 
            "text": "Checks that cookie with given name exists.  I.seeCookie('Auth');  Parameters   name   Appium: support only web testing", 
            "title": "seeCookie"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seecsspropertiesonelements", 
            "text": "Checks that all elements with given locator have given CSS properties.  I.seeCssPropertiesOnElements('h3', { 'font-weight':  bold });  Parameters   locator     properties     cssProperties", 
            "title": "seeCssPropertiesOnElements"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seecurrenturlequals", 
            "text": "Checks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:  I.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');  Parameters   url   Appium: support only web testing", 
            "title": "seeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeelement", 
            "text": "Checks that a given Element is visible\nElement is located by CSS or XPath.  I.seeElement('#modal');  Parameters   locator   located by CSS|XPath|strict locator\n    Appium: support", 
            "title": "seeElement"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeelementindom", 
            "text": "Checks that a given Element is present in the DOM\nElement is located by CSS or XPath.  I.seeElementInDOM('#modal');  Parameters   locator   located by CSS|XPath|strict locator\n    Appium: support", 
            "title": "seeElementInDOM"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeincurrenturl", 
            "text": "Checks that current url contains a provided fragment.  I.seeInCurrentUrl('/register'); // we are on registration page  Parameters   url   Appium: support only web testing", 
            "title": "seeInCurrentUrl"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeinfield", 
            "text": "Checks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.  I.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');  Parameters   field   located by label|name|CSS|XPath|strict locator  value   Appium: support only web testing", 
            "title": "seeInField"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeinpopup", 
            "text": "Checks that the active JavaScript popup, as created by  window.alert|window.confirm|window.prompt , contains the\ngiven string. Appium: support only web testing  Parameters   text", 
            "title": "seeInPopup"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code.  I.seeInSource(' h1 Green eggs  amp; ham /h1 ');  Parameters   text   Appium: support", 
            "title": "seeInSource"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seeintitle", 
            "text": "Checks that title contains text.  Parameters   text   Appium: support only web testing", 
            "title": "seeInTitle"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seenumberofelements", 
            "text": "asserts that an element appears a given number of times in the DOM\nElement is located by label or name or CSS or XPath.\nAppium: support  I.seeNumberOfElements('#submitBtn', 1);  Parameters   selector     num", 
            "title": "seeNumberOfElements"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seenumberofvisibleelements", 
            "text": "asserts that an element is visible a given number of times\nElement is located by CSS or XPath.  I.seeNumberOfVisibleElements('.buttons', 3);  Parameters   locator     num", 
            "title": "seeNumberOfVisibleElements"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seetextequals", 
            "text": "Checks that text is equal to provided one.  I.seeTextEquals('text', 'h1');  Parameters   text     context    (optional, default  null )", 
            "title": "seeTextEquals"
        }, 
        {
            "location": "/helpers/WebDriverIO/#seetitleequals", 
            "text": "Checks that title is equal to provided one.  I.seeTitleEquals('Test title.');  Parameters   text", 
            "title": "seeTitleEquals"
        }, 
        {
            "location": "/helpers/WebDriverIO/#selectoption", 
            "text": "Selects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.  I.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');  Provide an array for the second argument to select multiple options.  I.selectOption('Which OS do you use?', ['Android', 'iOS']);  Parameters   select   field located by label|name|CSS|XPath|strict locator  option", 
            "title": "selectOption"
        }, 
        {
            "location": "/helpers/WebDriverIO/#setcookie", 
            "text": "Sets a cookie  I.setCookie({name: 'auth', value: true});  Parameters   cookie   Appium: support only web testingUses Selenium's JSON  cookie\n    format .", 
            "title": "setCookie"
        }, 
        {
            "location": "/helpers/WebDriverIO/#switchto", 
            "text": "Switches frame or in case of null locator reverts to parent.\nAppium: support only web testing  Parameters   locator", 
            "title": "switchTo"
        }, 
        {
            "location": "/helpers/WebDriverIO/#switchtonexttab", 
            "text": "Switch focus to a particular tab by its number. It waits tabs loading and then switch tab  I.switchToNextTab();\nI.switchToNextTab(2);  Parameters   num    (optional, default  1 )  sec    (optional, default  null )", 
            "title": "switchToNextTab"
        }, 
        {
            "location": "/helpers/WebDriverIO/#switchtoprevioustab", 
            "text": "Switch focus to a particular tab by its number. It waits tabs loading and then switch tab  I.switchToPreviousTab();\nI.switchToPreviousTab(2);  Parameters   num    (optional, default  1 )  sec    (optional, default  null )", 
            "title": "switchToPreviousTab"
        }, 
        {
            "location": "/helpers/WebDriverIO/#uncheckoption", 
            "text": "Unselects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.  The second parameter is a context (CSS or XPath locator) to narrow the search.  I.uncheckOption('#agree');\nI.uncheckOption('I Agree to Terms and Conditions');\nI.uncheckOption('agree', '//form');  Parameters     -    field   checkbox located by label  name  CSS", 
            "title": "uncheckOption"
        }, 
        {
            "location": "/helpers/WebDriverIO/#wait", 
            "text": "Pauses execution for a number of seconds.  I.wait(2); // wait 2 secs  Parameters   sec   Appium: support", 
            "title": "wait"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitfordetached", 
            "text": "Waits for an element to become not attached to the DOM on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForDetached('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by defaultAppium: support", 
            "title": "waitForDetached"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitforelement", 
            "text": "Waits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default\n    Appium: support", 
            "title": "waitForElement"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitforenabled", 
            "text": "Waits for element to become enabled (by default waits for 1sec).\nElement can be located by CSS or XPath.  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default\n    Appium: support", 
            "title": "waitForEnabled"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitforfunction", 
            "text": "Waits for a function to return true (waits for 1 sec by default).\nRunning in browser context.  I.waitForFunction(fn[, [args[, timeout]])  I.waitForFunction(() =  window.requests == 0);\nI.waitForFunction(() =  window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) =  window.requests == count, [3], 5) // pass args and wait for 5 sec  Parameters   function   to be executed in browser context  args   arguments for function  fn     argsOrSec    (optional, default  null )  sec   time seconds to wait, 1 by defaultAppium: support", 
            "title": "waitForFunction"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitforinvisible", 
            "text": "Waits for an element to be removed or become invisible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForInvisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by defaultAppium: support", 
            "title": "waitForInvisible"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitfortext", 
            "text": "Waits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.  I.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');  Parameters   text   to wait for  sec   seconds to wait  context   element located by CSS|XPath|strict locator\n    Appium: support  aContext    (optional, default  null )", 
            "title": "waitForText"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitforvalue", 
            "text": "Waits for the specified value to be in value attribute  I.waitForValue('//input',  GoodValue );  Parameters   field   input field  value   expected value  sec   seconds to wait, 1 sec by default", 
            "title": "waitForValue"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitforvisible", 
            "text": "Waits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForVisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default\n    Appium: support", 
            "title": "waitForVisible"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitinurl", 
            "text": "Waiting for the part of the URL to match the expected. Useful for SPA to understand that page was changed.  I.waitInUrl('/info', 2);  Parameters   urlPart     sec    (optional, default  null )", 
            "title": "waitInUrl"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waitnumberofvisibleelements", 
            "text": "Waits for a specified number of elements on the page  I.waitNumberOfVisibleElements('a', 3);  Parameters   locator     seconds     num     sec    (optional, default  null )", 
            "title": "waitNumberOfVisibleElements"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waittohide", 
            "text": "Waits for an element to hide (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitToHide('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by defaultAppium: support", 
            "title": "waitToHide"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waituntil", 
            "text": "Waits for a function to return true (waits for 1sec by default).  I.waitUntil(() =  window.requests == 0);\nI.waitUntil(() =  window.requests == 0, 5);  Parameters   function   function which is executed in browser context.  fn     sec   time seconds to wait, 1 by defaultAppium: support  timeoutMsg    (optional, default  null )", 
            "title": "waitUntil"
        }, 
        {
            "location": "/helpers/WebDriverIO/#waiturlequals", 
            "text": "Waits for the entire URL to match the expected  I.waitUrlEquals('/info', 2);\nI.waitUrlEquals('http://127.0.0.1:8000/info');  Parameters   urlPart     sec    (optional, default  null )", 
            "title": "waitUrlEquals"
        }, 
        {
            "location": "/helpers/WebDriverIO/#locator", 
            "text": "just press button if no selector is given", 
            "title": "locator"
        }, 
        {
            "location": "/helpers/Protractor/", 
            "text": "Protractor\n\n\nProtractor helper is based on \nProtractor library\n and used for testing web applications.\n\n\nProtractor requires \nSelenium Server and ChromeDriver/GeckoDriver to be installed\n.\nTo test non-Angular applications please make sure you have \nangular: false\n in configuration file.\n\n\nConfiguration\n\n\nThis helper should be configured in codecept.json\n\n\n\n\nurl\n - base url of website to be tested\n\n\nbrowser\n - browser in which perform testing\n\n\nangular\n (optional, default: true): disable this option to run tests for non-Angular applications.\n\n\ndriver\n - which protractor driver to use (local, direct, session, hosted, sauce, browserstack). By default set to 'hosted' which requires selenium server to be started.\n\n\nrestart\n (optional, default: true) - restart browser between tests.\n\n\nsmartWait\n: (optional) \nenables \nSmartWait\n; wait for additional milliseconds for element to appear. Enable for 5 secs: \"smartWait\": 5000\n\n\ndisableScreenshots\n (optional, default: false)  - don't save screenshot on failure\n\n\nfullPageScreenshots\n (optional, default: false) - make full page screenshots on failure.\n\n\nuniqueScreenshotNames\n (optional, default: false)  - option to prevent screenshot override if you have scenarios with the same name in different suites\n\n\nkeepBrowserState\n (optional, default: false)  - keep browser state between tests when \nrestart\n set to false.\n\n\nseleniumAddress\n - Selenium address to connect (default: \nhttp://localhost:4444/wd/hub\n)\n\n\nrootElement\n - Root element of AngularJS application (default: body)\n\n\ngetPageTimeout\n (optional) sets default timeout for a page to be loaded. 10000 by default.\n\n\nwaitForTimeout\n: (optional) sets default wait time in \nms\n for all \nwait*\n functions. 1000 by default.\n\n\nscriptsTimeout\n: (optional) timeout in milliseconds for each script run on the browser, 10000 by default.\n\n\nwindowSize\n: (optional) default window size. Set to \nmaximize\n or a dimension in the format \n640x480\n.\n\n\nmanualStart\n (optional, default: false) - do not start browser before a test, start it manually inside a helper with \nthis.helpers[\"WebDriverIO\"]._startBrowser()\n\n\ncapabilities\n: {} - list of \nDesired Capabilities\n\n\nproxy\n: set proxy settings\n\n\n\n\nother options are the same as in \nProtractor config\n.\n\n\nSample Config\n\n\n{\n   \nhelpers\n: {\n     \nProtractor\n : {\n       \nurl\n: \nhttp://localhost\n,\n       \nbrowser\n: \nchrome\n,\n       \nsmartWait\n: 5000,\n       \nrestart\n: false\n     }\n   }\n}\n\n\n\n\nConfig for Non-Angular application:\n\n\n{\n   \nhelpers\n: {\n     \nProtractor\n : {\n       \nurl\n: \nhttp://localhost\n,\n       \nbrowser\n: \nchrome\n,\n       \nangular\n: false\n     }\n   }\n}\n\n\n\n\nConfig for Headless Chrome\n\n\n{\n   \nhelpers\n: {\n     \nProtractor\n : {\n       \nurl\n: \nhttp://localhost\n,\n       \nbrowser\n: \nchrome\n,\n       \ncapabilities\n: {\n         \nchromeOptions\n: {\n           \nargs\n: [ \n--headless\n, \n--disable-gpu\n, \n--window-size=800,600\n ]\n         }\n       }\n     }\n   }\n}\n\n\n\n\nAccess From Helpers\n\n\nReceive a WebDriverIO client from a custom helper by accessing \nbrowser\n property:\n\n\nthis.helpers['Protractor'].browser\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\n_getWindowHandle\n\n\nGet the window handle relative to the current handle. i.e. the next handle or the previous.\n\n\nParameters\n\n\n\n\noffset\n \nNumber\n Offset from current handle index. i.e. offset \n 0 will go to the previous handle and positive number will go to the next window handle in sequence.\n\n\n\n\n_locate\n\n\nGet elements by different locator types, including strict locator\nShould be used in custom helpers:\n\n\nthis.helpers['Protractor']._locate({name: 'password'}).then //...\n\n\n\n\nTo use SmartWait and wait for element to appear on a page, add \ntrue\n as second arg:\n\n\nthis.helpers['Protractor']._locate({name: 'password'}, true).then //...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nsmartWait\n   (optional, default \nfalse\n)\n\n\n\n\n_locateCheckable\n\n\nFind a checkbox by providing human readable text:\n\n\nthis.helpers['Protractor']._locateCheckable('I agree with terms and conditions').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\n_locateClickable\n\n\nFind a clickable element by providing human readable text:\n\n\nthis.helpers['Protractor']._locateClickable('Next page').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\n_locateFields\n\n\nFind field elements by providing human readable text:\n\n\nthis.helpers['Protractor']._locateFields('Your email').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\nacceptPopup\n\n\nAccepts the active JavaScript native popup window, as created by window.alert|window.confirm|window.prompt.\nDon't confuse popups with modal windows, as created by \nvarious\nlibraries\n. Appium: support only web testing\n\n\namInsideAngularApp\n\n\nEnters Angular mode (switched on by default)\nShould be used after \"amOutsideAngularApp\"\n\n\namOnPage\n\n\nOpens a web page in a browser. Requires relative or absolute url.\nIf url starts with \n/\n, opens a web page of a site defined in \nurl\n config parameter.\n\n\nI.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page\n\n\n\n\nParameters\n\n\n\n\nurl\n  url path or global url\n\n\n\n\namOutsideAngularApp\n\n\nSwitch to non-Angular mode,\nstart using WebDriver instead of Protractor in this session\n\n\nappendField\n\n\nAppends text to a input field or textarea.\nField is located by name, label, CSS or XPath\n\n\nI.appendField('#myTextField', 'appended');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  text value\n\n\n\n\nattachFile\n\n\nAttaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remote system (if tests are running remotely).\n\n\nI.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\npathToFile\n  local file path relative to codecept.json config file\n\n\n\n\ncancelPopup\n\n\nDismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt.\n\n\ncheckOption\n\n\nSelects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nfield\n  checkbox located by label\n\n\nname\n\n\nCSS\n\n\n\n\n\n\n\n\n\n\nclearCookie\n\n\nClears a cookie by name,\nif none provided clears all cookies\n\n\nI.clearCookie();\nI.clearCookie('test');\n\n\n\n\nParameters\n\n\n\n\ncookie\n  (optional)\n\n\n\n\nclearField\n\n\nClears a \ntextarea\n or text \ninput\n element's value.\n\n\nI.clearField('Email');\nI.clearField('user[email]');\nI.clearField('#email');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\nclick\n\n\nPerform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nlocator\n  clickable link or button located by text, or any element located by CSS\n\n\nXPath\n\n\nstrict locator\n\n\n\n\n\n\n\n\n\n\ncloseCurrentTab\n\n\nClose current tab\n\n\nI.closeCurrentTab();\n\n\n\n\ncloseOtherTabs\n\n\nClose all tabs except for the current one.\n\n\nI.closeOtherTabs();\n\n\n\n\ndontSee\n\n\nOpposite to \nsee\n. Checks that a text is not present on a page.\nUse context parameter to narrow down the search.\n\n\nI.dontSee('Login'); // assume we are already logged in\n\n\n\n\nParameters\n\n\n\n\ntext\n  is not present\n\n\ncontext\n  (optional) element located by CSS|XPath|strict locator in which to perfrom search\n\n\n\n\ndontSeeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is not checked.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\ndontSeeCookie\n\n\nChecks that cookie with given name does not exist.\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\ndontSeeCurrentUrlEquals\n\n\nChecks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeElement\n\n\nOpposite to \nseeElement\n. Checks that element is not visible (or in DOM)\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeElementInDOM\n\n\nOpposite to \nseeElementInDOM\n. Checks that element is not on page.\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeInCurrentUrl\n\n\nChecks that current url does not contain a provided fragment.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeInField\n\n\nChecks that value of input field or textare doesn't equal to given value\nOpposite to \nseeInField\n.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  is not expected to be a field value\n\n\n\n\ndontSeeInSource\n\n\nChecks that the current page contains the given string in its raw source code\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndontSeeInTitle\n\n\nChecks that title does not contain text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndoubleClick\n\n\nPerforms a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.\n\n\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncontext\n  \n\n\n\n\ndragAndDrop\n\n\nDrag an item to a destination element.\n\n\nI.dragAndDrop('#dragHandle', '#container');\n\n\n\n\nParameters\n\n\n\n\nsrcElement\n  \n\n\ndestElement\n  \n\n\n\n\nexecuteAsyncScript\n\n\nExecutes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.\n\n\nExample: In Vue.js to make components completely rendered we are waiting for \nnextTick\n.\n\n\nI.executeAsyncScript(function(done) {\nVue.nextTick(done); // waiting for next tick\n});\n\n\n\n\nBy passing value to \ndone()\n function you can return values.\nAdditional arguments can be passed as well, while \ndone\n function is always last parameter in arguments list.\n\n\nlet val = await I.executeAsyncScript(function(url, done) {\n// in browser context\n$.ajax(url, { success: (data) =\n done(data); }\n}, 'http://ajax.callback.url/');\n\n\n\n\nParameters\n\n\n\n\nfn\n  function to be executed in browser context\n\n\n\n\nexecuteScript\n\n\nExecutes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use async function and await to receive results.\n\n\nExample with jQuery DatePicker:\n\n\n// change date of jQuery DatePicker\nI.executeScript(function() {\n// now we are inside browser context\n$('date').datetimepicker('setDate', new Date());\n});\n\n\n\n\nCan return values. Don't forget to use \nawait\n to get them.\n\n\nlet date = await I.executeScript(function(el) {\n// only basic types can be returned\nreturn $(el).datetimepicker('getDate').toString();\n}, '#date'); // passing jquery selector\n\n\n\n\nParameters\n\n\n\n\nfn\n  function to be executed in browser context\n\n\n\n\nfillField\n\n\nFills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.\n\n\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\ngrabAttributeFrom\n\n\nRetrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet hint = await I.grabAttributeFrom('#tooltip', 'title');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nattr\n  \n\n\n\n\ngrabBrowserLogs\n\n\nGet JS log from browser. Log buffer is reset after each request.\nResumes test execution, so \nshould be used inside an async function with \nawait\n operator.\n\n\nlet logs = await I.grabBrowserLogs();\nconsole.log(JSON.stringify(logs))\n\n\n\n\ngrabCookie\n\n\nGets a cookie object by name\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');\n\n\n\n\nParameters\n\n\n\n\nname\n  Returns cookie in JSON \nformat\n.\n\n\n\n\ngrabCssPropertyFrom\n\n\nGrab CSS property for given locator\nResumes test execution, so \nshould be used inside an async function with \nawait\n operator.\n\n\nconst value = await I.grabCssPropertyFrom('h3', 'font-weight');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncssProperty\n  \n\n\n\n\ngrabCurrentUrl\n\n\nGet current URL from browser.\nResumes test execution, so should be used inside an async function.\n\n\nlet url = await I.grabCurrentUrl();\nconsole.log(`Current URL is [${url}]`);\n\n\n\n\ngrabHTMLFrom\n\n\nRetrieves the innerHTML from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside an async function with \nawait\n operator.\n\n\nlet postHTML = await I.grabHTMLFrom('#post');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\ngrabNumberOfOpenTabs\n\n\nGrab number of open tabs\n\n\nI.grabNumberOfOpenTabs();\n\n\n\n\ngrabNumberOfVisibleElements\n\n\nGrab number of visible elements by locator\n\n\nI.grabNumberOfVisibleElements('p');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\ngrabPageScrollPosition\n\n\nRetrieves a page scroll position and returns it to test.\nResumes test execution, so \nshould be used inside an async function with \nawait\n operator.\n\n\nlet { x, y } = await I.grabPageScrollPosition();\n\n\n\n\ngrabPopupText\n\n\nGrab the text within the popup. If no popup is visible then it will return null\n\n\nawait I.grabPopupText();\n\n\n\n\ngrabSource\n\n\nRetrieves page source and returns it to test.\nResumes test execution, so should be used inside an async function.\n\n\nlet pageSource = await I.grabSource();\n\n\n\n\ngrabTextFrom\n\n\nRetrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet pin = await I.grabTextFrom('#pin');\n\n\n\n\nIf multiple elements found returns an array of texts.\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\n\n\ngrabTitle\n\n\nRetrieves a page title and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet title = await I.grabTitle();\n\n\n\n\ngrabValueFrom\n\n\nRetrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async function with \nawait\n operator.\n\n\nlet email = await I.grabValueFrom('input[name=email]');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\n\n\nhaveModule\n\n\nInjects Angular module.\n\n\nI.haveModule('modName', function() {\n  angular.module('modName', []).value('foo', 'bar');\n});\n\n\n\n\nParameters\n\n\n\n\nmodName\n  \n\n\nfn\n  \n\n\n\n\nmoveCursorTo\n\n\nMoves cursor to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\n\n\nI.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\noffsetX\n   (optional, default \nnull\n)\n\n\noffsetY\n   (optional, default \nnull\n)\n\n\n\n\nmoveTo\n\n\nMoves to url\n\n\nParameters\n\n\n\n\npath\n  \n\n\n\n\nopenNewTab\n\n\nOpen new tab and switch to it\n\n\nI.openNewTab();\n\n\n\n\npressKey\n\n\nPresses a key on a focused element.\nSpecial keys like 'Enter', 'Control', \netc\n\nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.\n\n\nI.pressKey('Enter');\nI.pressKey(['Control','a']);\n\n\n\n\nValid key names\n are:\n\n\n\n\n'Add'\n,\n\n\n'Alt'\n,\n\n\n'ArrowDown'\n or \n'Down arrow'\n,\n\n\n'ArrowLeft'\n or \n'Left arrow'\n,\n\n\n'ArrowRight'\n or \n'Right arrow'\n,\n\n\n'ArrowUp'\n or \n'Up arrow'\n,\n\n\n'Backspace'\n,\n\n\n'Command'\n,\n\n\n'Control'\n,\n\n\n'Del'\n,\n\n\n'Divide'\n,\n\n\n'End'\n,\n\n\n'Enter'\n,\n\n\n'Equals'\n,\n\n\n'Escape'\n,\n\n\n'F1 to F12'\n,\n\n\n'Home'\n,\n\n\n'Insert'\n,\n\n\n'Meta'\n,\n\n\n'Multiply'\n,\n\n\n'Numpad 0'\n to \n'Numpad 9'\n,\n\n\n'Pagedown'\n or \n'PageDown'\n,\n\n\n'Pageup'\n or \n'PageUp'\n,\n\n\n'Pause'\n,\n\n\n'Semicolon'\n,\n\n\n'Shift'\n,\n\n\n'Space'\n,\n\n\n'Subtract'\n,\n\n\n'Tab'\n.\n\n\n\n\nParameters\n\n\n\n\nkey\n  \n\n\n\n\nrefresh\n\n\nReloads page\n\n\nrefreshPage\n\n\nReload the current page.\n\n\n`I.refreshPage();\n\n\n\n\nresetModule\n\n\nRemoves mocked Angular module. If modName not specified - clears all mock modules.\n\n\nI.resetModule(); // clears all\nI.resetModule('modName');\n\n\n\n\nParameters\n\n\n\n\nmodName\n  \n\n\n\n\nresizeWindow\n\n\nResize the current window to provided width and height.\nFirst parameter can be set to \nmaximize\n\n\nParameters\n\n\n\n\nwidth\n  or \nmaximize\n\n\nheight\n  \n\n\n\n\nrightClick\n\n\nPerforms right click on an element matched by CSS or XPath.\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncontext\n   (optional, default \nnull\n)\n\n\n\n\nsaveScreenshot\n\n\nSaves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder. \nOptionally resize the window to the full available page \nscrollHeight\n and \nscrollWidth\n to capture the entire page by passing \ntrue\n in as the second argument.\n\n\nI.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png',true) \\\\resizes to available scrollHeight and scrollWidth before taking screenshot\n\n\n\n\nParameters\n\n\n\n\nfileName\n  \n\n\nfullPage\n  (optional)\n\n\n\n\nscrollPageToBottom\n\n\nScroll page to the bottom\n\n\nI.scrollPageToBottom();\n\n\n\n\nscrollPageToTop\n\n\nScroll page to the top\n\n\nI.scrollPageToTop();\n\n\n\n\nscrollTo\n\n\nScrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\n\n\nI.scrollTo('footer');\nI.scrollTo('#submit', 5,5);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\noffsetX\n   (optional, default \n0\n)\n\n\noffsetY\n   (optional, default \n0\n)\n\n\n\n\nsee\n\n\nChecks that a page contains a visible text.\nUse context parameter to narrow down the search.\n\n\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n\n\n\n\nParameters\n\n\n\n\ntext\n  expected on page\n\n\ncontext\n  (optional) element located by CSS|Xpath|strict locator in which to search for text\n\n\n\n\nseeAttributesOnElements\n\n\nChecks that all elements with given locator have given attributes.\n\n\nI.seeAttributesOnElements('//form', {'method': \npost\n});\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nattributes\n  \n\n\n\n\nseeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is checked.\n\n\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\nseeCookie\n\n\nChecks that cookie with given name exists.\n\n\nI.seeCookie('Auth');\n\n\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\nseeCssPropertiesOnElements\n\n\nChecks that all elements with given locator have given CSS properties.\n\n\nI.seeCssPropertiesOnElements('h3', { 'font-weight': \nbold\n});\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nproperties\n  \n\n\ncssProperties\n  \n\n\n\n\nseeCurrentUrlEquals\n\n\nChecks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:\n\n\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeElement\n\n\nChecks that a given Element is visible\nElement is located by CSS or XPath.\n\n\nI.seeElement('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeElementInDOM\n\n\nChecks that a given Element is present in the DOM\nElement is located by CSS or XPath.\n\n\nI.seeElementInDOM('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeInCurrentUrl\n\n\nChecks that current url contains a provided fragment.\n\n\nI.seeInCurrentUrl('/register'); // we are on registration page\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeInField\n\n\nChecks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.\n\n\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\nseeInPopup\n\n\nChecks that the active JavaScript popup, as created by \nwindow.alert|window.confirm|window.prompt\n, contains the\ngiven string.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeInSource\n\n\nChecks that the current page contains the given string in its raw source code.\n\n\nI.seeInSource('\nh1\nGreen eggs \namp; ham\n/h1\n');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeInTitle\n\n\nChecks that title contains text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeNumberOfElements\n\n\nasserts that an element appears a given number of times in the DOM\nElement is located by label or name or CSS or XPath.\n\n\nI.seeNumberOfElements('#submitBtn', 1);\n\n\n\n\nParameters\n\n\n\n\nselector\n  \n\n\nnum\n  \n\n\n\n\nseeNumberOfVisibleElements\n\n\nasserts that an element is visible a given number of times\nElement is located by CSS or XPath.\n\n\nI.seeNumberOfVisibleElements('.buttons', 3);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nnum\n  \n\n\n\n\nseeTextEquals\n\n\nChecks that text is equal to provided one.\n\n\nI.seeTextEquals('text', 'h1');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\ncontext\n   (optional, default \nnull\n)\n\n\n\n\nseeTitleEquals\n\n\nChecks that title is equal to provided one.\n\n\nI.seeTitleEquals('Test title.');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nselectOption\n\n\nSelects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.\n\n\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n\n\n\nProvide an array for the second argument to select multiple options.\n\n\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n\n\n\n\nParameters\n\n\n\n\nselect\n  field located by label|name|CSS|XPath|strict locator\n\n\noption\n  \n\n\n\n\nsetCookie\n\n\nSets a cookie\n\n\nI.setCookie({name: 'auth', value: true});\n\n\n\n\nParameters\n\n\n\n\ncookie\n  \n\n\n\n\nswitchTo\n\n\nSwitches frame or in case of null locator reverts to parent.\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\nswitchToNextTab\n\n\nSwitch focus to a particular tab by its number. It waits tabs loading and then switch tab\n\n\nI.switchToNextTab();\nI.switchToNextTab(2);\n\n\n\n\nParameters\n\n\n\n\nnum\n   (optional, default \n1\n)\n\n\n\n\nswitchToPreviousTab\n\n\nSwitch focus to a particular tab by its number. It waits tabs loading and then switch tab\n\n\nI.switchToPreviousTab();\nI.switchToPreviousTab(2);\n\n\n\n\nParameters\n\n\n\n\nnum\n   (optional, default \n1\n)\n\n\n\n\nwait\n\n\nPauses execution for a number of seconds.\n\n\nI.wait(2); // wait 2 secs\n\n\n\n\nParameters\n\n\n\n\nsec\n  \n\n\n\n\nwaitForClickable\n\n\nWaits for element to become clickable for number of seconds.\n\n\nI.waitForClickable('#link');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nsec\n   (optional, default \nnull\n)\n\n\n\n\nwaitForDetached\n\n\nWaits for an element to become not attached to the DOM on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForDetached('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForElement\n\n\nWaits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForEnabled\n\n\nWaits for element to become enabled (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForFunction\n\n\nWaits for a function to return true (waits for 1 sec by default).\nRunning in browser context.\n\n\nI.waitForFunction(fn[, [args[, timeout]])\n\n\n\n\nI.waitForFunction(() =\n window.requests == 0);\nI.waitForFunction(() =\n window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) =\n window.requests == count, [3], 5) // pass args and wait for 5 sec\n\n\n\n\nParameters\n\n\n\n\nfunction\n  to be executed in browser context\n\n\nargs\n  arguments for function\n\n\nfn\n  \n\n\nargsOrSec\n   (optional, default \nnull\n)\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForInvisible\n\n\nWaits for an element to be removed or become invisible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForInvisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForText\n\n\nWaits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.\n\n\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n\n\n\n\nParameters\n\n\n\n\ntext\n  to wait for\n\n\nsec\n  seconds to wait\n\n\ncontext\n  element located by CSS|XPath|strict locator\n\n\n\n\nwaitForValue\n\n\nWaits for the specified value to be in value attribute\n\n\nI.waitForValue('//input', \nGoodValue\n);\n\n\n\n\nParameters\n\n\n\n\nfield\n  input field\n\n\nvalue\n  expected value\n\n\nsec\n  seconds to wait, 1 sec by default\n\n\n\n\nwaitForVisible\n\n\nWaits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForVisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitInUrl\n\n\nWaiting for the part of the URL to match the expected. Useful for SPA to understand that page was changed.\n\n\nI.waitInUrl('/info', 2);\n\n\n\n\nParameters\n\n\n\n\nurlPart\n  \n\n\nsec\n   (optional, default \nnull\n)\n\n\n\n\nwaitNumberOfVisibleElements\n\n\nWaits for a specified number of elements on the page\n\n\nI.waitNumberOfVisibleElements('a', 3);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nseconds\n  \n\n\nnum\n  \n\n\nsec\n   (optional, default \nnull\n)\n\n\n\n\nwaitToHide\n\n\nWaits for an element to hide (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitToHide('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitUntil\n\n\nWaits for a function to return true (waits for 1sec by default).\n\n\nI.waitUntil(() =\n window.requests == 0);\nI.waitUntil(() =\n window.requests == 0, 5);\n\n\n\n\nParameters\n\n\n\n\nfunction\n  function which is executed in browser context.\n\n\nfn\n  \n\n\nsec\n  time seconds to wait, 1 by default\n\n\ntimeoutMsg\n   (optional, default \nnull\n)\n\n\n\n\nwaitUrlEquals\n\n\nWaits for the entire URL to match the expected\n\n\nI.waitUrlEquals('/info', 2);\nI.waitUrlEquals('http://127.0.0.1:8000/info');\n\n\n\n\nParameters\n\n\n\n\nurlPart\n  \n\n\nsec\n   (optional, default \nnull\n)\n\n\n\n\nlocator\n\n\njust press button if no selector is given", 
            "title": "Protractor"
        }, 
        {
            "location": "/helpers/Protractor/#protractor", 
            "text": "Protractor helper is based on  Protractor library  and used for testing web applications.  Protractor requires  Selenium Server and ChromeDriver/GeckoDriver to be installed .\nTo test non-Angular applications please make sure you have  angular: false  in configuration file.  Configuration  This helper should be configured in codecept.json   url  - base url of website to be tested  browser  - browser in which perform testing  angular  (optional, default: true): disable this option to run tests for non-Angular applications.  driver  - which protractor driver to use (local, direct, session, hosted, sauce, browserstack). By default set to 'hosted' which requires selenium server to be started.  restart  (optional, default: true) - restart browser between tests.  smartWait : (optional)  enables  SmartWait ; wait for additional milliseconds for element to appear. Enable for 5 secs: \"smartWait\": 5000  disableScreenshots  (optional, default: false)  - don't save screenshot on failure  fullPageScreenshots  (optional, default: false) - make full page screenshots on failure.  uniqueScreenshotNames  (optional, default: false)  - option to prevent screenshot override if you have scenarios with the same name in different suites  keepBrowserState  (optional, default: false)  - keep browser state between tests when  restart  set to false.  seleniumAddress  - Selenium address to connect (default:  http://localhost:4444/wd/hub )  rootElement  - Root element of AngularJS application (default: body)  getPageTimeout  (optional) sets default timeout for a page to be loaded. 10000 by default.  waitForTimeout : (optional) sets default wait time in  ms  for all  wait*  functions. 1000 by default.  scriptsTimeout : (optional) timeout in milliseconds for each script run on the browser, 10000 by default.  windowSize : (optional) default window size. Set to  maximize  or a dimension in the format  640x480 .  manualStart  (optional, default: false) - do not start browser before a test, start it manually inside a helper with  this.helpers[\"WebDriverIO\"]._startBrowser()  capabilities : {} - list of  Desired Capabilities  proxy : set proxy settings   other options are the same as in  Protractor config .  Sample Config  {\n    helpers : {\n      Protractor  : {\n        url :  http://localhost ,\n        browser :  chrome ,\n        smartWait : 5000,\n        restart : false\n     }\n   }\n}  Config for Non-Angular application:  {\n    helpers : {\n      Protractor  : {\n        url :  http://localhost ,\n        browser :  chrome ,\n        angular : false\n     }\n   }\n}  Config for Headless Chrome  {\n    helpers : {\n      Protractor  : {\n        url :  http://localhost ,\n        browser :  chrome ,\n        capabilities : {\n          chromeOptions : {\n            args : [  --headless ,  --disable-gpu ,  --window-size=800,600  ]\n         }\n       }\n     }\n   }\n}", 
            "title": "Protractor"
        }, 
        {
            "location": "/helpers/Protractor/#access-from-helpers", 
            "text": "Receive a WebDriverIO client from a custom helper by accessing  browser  property:  this.helpers['Protractor'].browser  Parameters   config", 
            "title": "Access From Helpers"
        }, 
        {
            "location": "/helpers/Protractor/#_getwindowhandle", 
            "text": "Get the window handle relative to the current handle. i.e. the next handle or the previous.  Parameters   offset   Number  Offset from current handle index. i.e. offset   0 will go to the previous handle and positive number will go to the next window handle in sequence.", 
            "title": "_getWindowHandle"
        }, 
        {
            "location": "/helpers/Protractor/#_locate", 
            "text": "Get elements by different locator types, including strict locator\nShould be used in custom helpers:  this.helpers['Protractor']._locate({name: 'password'}).then //...  To use SmartWait and wait for element to appear on a page, add  true  as second arg:  this.helpers['Protractor']._locate({name: 'password'}, true).then //...  Parameters   locator     smartWait    (optional, default  false )", 
            "title": "_locate"
        }, 
        {
            "location": "/helpers/Protractor/#_locatecheckable", 
            "text": "Find a checkbox by providing human readable text:  this.helpers['Protractor']._locateCheckable('I agree with terms and conditions').then // ...  Parameters   locator", 
            "title": "_locateCheckable"
        }, 
        {
            "location": "/helpers/Protractor/#_locateclickable", 
            "text": "Find a clickable element by providing human readable text:  this.helpers['Protractor']._locateClickable('Next page').then // ...  Parameters   locator", 
            "title": "_locateClickable"
        }, 
        {
            "location": "/helpers/Protractor/#_locatefields", 
            "text": "Find field elements by providing human readable text:  this.helpers['Protractor']._locateFields('Your email').then // ...  Parameters   locator", 
            "title": "_locateFields"
        }, 
        {
            "location": "/helpers/Protractor/#acceptpopup", 
            "text": "Accepts the active JavaScript native popup window, as created by window.alert|window.confirm|window.prompt.\nDon't confuse popups with modal windows, as created by  various\nlibraries . Appium: support only web testing", 
            "title": "acceptPopup"
        }, 
        {
            "location": "/helpers/Protractor/#aminsideangularapp", 
            "text": "Enters Angular mode (switched on by default)\nShould be used after \"amOutsideAngularApp\"", 
            "title": "amInsideAngularApp"
        }, 
        {
            "location": "/helpers/Protractor/#amonpage", 
            "text": "Opens a web page in a browser. Requires relative or absolute url.\nIf url starts with  / , opens a web page of a site defined in  url  config parameter.  I.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page  Parameters   url   url path or global url", 
            "title": "amOnPage"
        }, 
        {
            "location": "/helpers/Protractor/#amoutsideangularapp", 
            "text": "Switch to non-Angular mode,\nstart using WebDriver instead of Protractor in this session", 
            "title": "amOutsideAngularApp"
        }, 
        {
            "location": "/helpers/Protractor/#appendfield", 
            "text": "Appends text to a input field or textarea.\nField is located by name, label, CSS or XPath  I.appendField('#myTextField', 'appended');  Parameters   field   located by label|name|CSS|XPath|strict locator  value   text value", 
            "title": "appendField"
        }, 
        {
            "location": "/helpers/Protractor/#attachfile", 
            "text": "Attaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remote system (if tests are running remotely).  I.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');  Parameters   locator   field located by label|name|CSS|XPath|strict locator  pathToFile   local file path relative to codecept.json config file", 
            "title": "attachFile"
        }, 
        {
            "location": "/helpers/Protractor/#cancelpopup", 
            "text": "Dismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt.", 
            "title": "cancelPopup"
        }, 
        {
            "location": "/helpers/Protractor/#checkoption", 
            "text": "Selects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.  The second parameter is a context (CSS or XPath locator) to narrow the search.  I.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');  Parameters     -    field   checkbox located by label  name  CSS", 
            "title": "checkOption"
        }, 
        {
            "location": "/helpers/Protractor/#clearcookie", 
            "text": "Clears a cookie by name,\nif none provided clears all cookies  I.clearCookie();\nI.clearCookie('test');  Parameters   cookie   (optional)", 
            "title": "clearCookie"
        }, 
        {
            "location": "/helpers/Protractor/#clearfield", 
            "text": "Clears a  textarea  or text  input  element's value.  I.clearField('Email');\nI.clearField('user[email]');\nI.clearField('#email');  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "clearField"
        }, 
        {
            "location": "/helpers/Protractor/#click", 
            "text": "Perform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.  The second parameter is a context (CSS or XPath locator) to narrow the search.  // simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});  Parameters     -    locator   clickable link or button located by text, or any element located by CSS  XPath  strict locator", 
            "title": "click"
        }, 
        {
            "location": "/helpers/Protractor/#closecurrenttab", 
            "text": "Close current tab  I.closeCurrentTab();", 
            "title": "closeCurrentTab"
        }, 
        {
            "location": "/helpers/Protractor/#closeothertabs", 
            "text": "Close all tabs except for the current one.  I.closeOtherTabs();", 
            "title": "closeOtherTabs"
        }, 
        {
            "location": "/helpers/Protractor/#dontsee", 
            "text": "Opposite to  see . Checks that a text is not present on a page.\nUse context parameter to narrow down the search.  I.dontSee('Login'); // assume we are already logged in  Parameters   text   is not present  context   (optional) element located by CSS|XPath|strict locator in which to perfrom search", 
            "title": "dontSee"
        }, 
        {
            "location": "/helpers/Protractor/#dontseecheckboxischecked", 
            "text": "Verifies that the specified checkbox is not checked.  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "dontSeeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Protractor/#dontseecookie", 
            "text": "Checks that cookie with given name does not exist.  Parameters   name", 
            "title": "dontSeeCookie"
        }, 
        {
            "location": "/helpers/Protractor/#dontseecurrenturlequals", 
            "text": "Checks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.  Parameters   url", 
            "title": "dontSeeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/Protractor/#dontseeelement", 
            "text": "Opposite to  seeElement . Checks that element is not visible (or in DOM)  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElement"
        }, 
        {
            "location": "/helpers/Protractor/#dontseeelementindom", 
            "text": "Opposite to  seeElementInDOM . Checks that element is not on page.  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElementInDOM"
        }, 
        {
            "location": "/helpers/Protractor/#dontseeincurrenturl", 
            "text": "Checks that current url does not contain a provided fragment.  Parameters   url", 
            "title": "dontSeeInCurrentUrl"
        }, 
        {
            "location": "/helpers/Protractor/#dontseeinfield", 
            "text": "Checks that value of input field or textare doesn't equal to given value\nOpposite to  seeInField .  Parameters   field   located by label|name|CSS|XPath|strict locator  value   is not expected to be a field value", 
            "title": "dontSeeInField"
        }, 
        {
            "location": "/helpers/Protractor/#dontseeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code  Parameters   text", 
            "title": "dontSeeInSource"
        }, 
        {
            "location": "/helpers/Protractor/#dontseeintitle", 
            "text": "Checks that title does not contain text.  Parameters   text", 
            "title": "dontSeeInTitle"
        }, 
        {
            "location": "/helpers/Protractor/#doubleclick", 
            "text": "Performs a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.  I.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');  Parameters   locator     context", 
            "title": "doubleClick"
        }, 
        {
            "location": "/helpers/Protractor/#draganddrop", 
            "text": "Drag an item to a destination element.  I.dragAndDrop('#dragHandle', '#container');  Parameters   srcElement     destElement", 
            "title": "dragAndDrop"
        }, 
        {
            "location": "/helpers/Protractor/#executeasyncscript", 
            "text": "Executes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.  Example: In Vue.js to make components completely rendered we are waiting for  nextTick .  I.executeAsyncScript(function(done) {\nVue.nextTick(done); // waiting for next tick\n});  By passing value to  done()  function you can return values.\nAdditional arguments can be passed as well, while  done  function is always last parameter in arguments list.  let val = await I.executeAsyncScript(function(url, done) {\n// in browser context\n$.ajax(url, { success: (data) =  done(data); }\n}, 'http://ajax.callback.url/');  Parameters   fn   function to be executed in browser context", 
            "title": "executeAsyncScript"
        }, 
        {
            "location": "/helpers/Protractor/#executescript", 
            "text": "Executes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use async function and await to receive results.  Example with jQuery DatePicker:  // change date of jQuery DatePicker\nI.executeScript(function() {\n// now we are inside browser context\n$('date').datetimepicker('setDate', new Date());\n});  Can return values. Don't forget to use  await  to get them.  let date = await I.executeScript(function(el) {\n// only basic types can be returned\nreturn $(el).datetimepicker('getDate').toString();\n}, '#date'); // passing jquery selector  Parameters   fn   function to be executed in browser context", 
            "title": "executeScript"
        }, 
        {
            "location": "/helpers/Protractor/#fillfield", 
            "text": "Fills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.  // by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "fillField"
        }, 
        {
            "location": "/helpers/Protractor/#grabattributefrom", 
            "text": "Retrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let hint = await I.grabAttributeFrom('#tooltip', 'title');  Parameters   locator   element located by CSS|XPath|strict locator  attr", 
            "title": "grabAttributeFrom"
        }, 
        {
            "location": "/helpers/Protractor/#grabbrowserlogs", 
            "text": "Get JS log from browser. Log buffer is reset after each request.\nResumes test execution, so  should be used inside an async function with  await  operator.  let logs = await I.grabBrowserLogs();\nconsole.log(JSON.stringify(logs))", 
            "title": "grabBrowserLogs"
        }, 
        {
            "location": "/helpers/Protractor/#grabcookie", 
            "text": "Gets a cookie object by name\nResumes test execution, so  should be used inside async with  await  operator.  let cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');  Parameters   name   Returns cookie in JSON  format .", 
            "title": "grabCookie"
        }, 
        {
            "location": "/helpers/Protractor/#grabcsspropertyfrom", 
            "text": "Grab CSS property for given locator\nResumes test execution, so  should be used inside an async function with  await  operator.  const value = await I.grabCssPropertyFrom('h3', 'font-weight');  Parameters   locator     cssProperty", 
            "title": "grabCssPropertyFrom"
        }, 
        {
            "location": "/helpers/Protractor/#grabcurrenturl", 
            "text": "Get current URL from browser.\nResumes test execution, so should be used inside an async function.  let url = await I.grabCurrentUrl();\nconsole.log(`Current URL is [${url}]`);", 
            "title": "grabCurrentUrl"
        }, 
        {
            "location": "/helpers/Protractor/#grabhtmlfrom", 
            "text": "Retrieves the innerHTML from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside an async function with  await  operator.  let postHTML = await I.grabHTMLFrom('#post');  Parameters   locator", 
            "title": "grabHTMLFrom"
        }, 
        {
            "location": "/helpers/Protractor/#grabnumberofopentabs", 
            "text": "Grab number of open tabs  I.grabNumberOfOpenTabs();", 
            "title": "grabNumberOfOpenTabs"
        }, 
        {
            "location": "/helpers/Protractor/#grabnumberofvisibleelements", 
            "text": "Grab number of visible elements by locator  I.grabNumberOfVisibleElements('p');  Parameters   locator", 
            "title": "grabNumberOfVisibleElements"
        }, 
        {
            "location": "/helpers/Protractor/#grabpagescrollposition", 
            "text": "Retrieves a page scroll position and returns it to test.\nResumes test execution, so  should be used inside an async function with  await  operator.  let { x, y } = await I.grabPageScrollPosition();", 
            "title": "grabPageScrollPosition"
        }, 
        {
            "location": "/helpers/Protractor/#grabpopuptext", 
            "text": "Grab the text within the popup. If no popup is visible then it will return null  await I.grabPopupText();", 
            "title": "grabPopupText"
        }, 
        {
            "location": "/helpers/Protractor/#grabsource", 
            "text": "Retrieves page source and returns it to test.\nResumes test execution, so should be used inside an async function.  let pageSource = await I.grabSource();", 
            "title": "grabSource"
        }, 
        {
            "location": "/helpers/Protractor/#grabtextfrom", 
            "text": "Retrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let pin = await I.grabTextFrom('#pin');  If multiple elements found returns an array of texts.  Parameters   locator   element located by CSS|XPath|strict locator", 
            "title": "grabTextFrom"
        }, 
        {
            "location": "/helpers/Protractor/#grabtitle", 
            "text": "Retrieves a page title and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let title = await I.grabTitle();", 
            "title": "grabTitle"
        }, 
        {
            "location": "/helpers/Protractor/#grabvaluefrom", 
            "text": "Retrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async function with  await  operator.  let email = await I.grabValueFrom('input[name=email]');  Parameters   locator   field located by label|name|CSS|XPath|strict locator", 
            "title": "grabValueFrom"
        }, 
        {
            "location": "/helpers/Protractor/#havemodule", 
            "text": "Injects Angular module.  I.haveModule('modName', function() {\n  angular.module('modName', []).value('foo', 'bar');\n});  Parameters   modName     fn", 
            "title": "haveModule"
        }, 
        {
            "location": "/helpers/Protractor/#movecursorto", 
            "text": "Moves cursor to element matched by locator.\nExtra shift can be set with offsetX and offsetY options  I.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);  Parameters   locator     offsetX    (optional, default  null )  offsetY    (optional, default  null )", 
            "title": "moveCursorTo"
        }, 
        {
            "location": "/helpers/Protractor/#moveto", 
            "text": "Moves to url  Parameters   path", 
            "title": "moveTo"
        }, 
        {
            "location": "/helpers/Protractor/#opennewtab", 
            "text": "Open new tab and switch to it  I.openNewTab();", 
            "title": "openNewTab"
        }, 
        {
            "location": "/helpers/Protractor/#presskey", 
            "text": "Presses a key on a focused element.\nSpecial keys like 'Enter', 'Control',  etc \nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.  I.pressKey('Enter');\nI.pressKey(['Control','a']);  Valid key names  are:   'Add' ,  'Alt' ,  'ArrowDown'  or  'Down arrow' ,  'ArrowLeft'  or  'Left arrow' ,  'ArrowRight'  or  'Right arrow' ,  'ArrowUp'  or  'Up arrow' ,  'Backspace' ,  'Command' ,  'Control' ,  'Del' ,  'Divide' ,  'End' ,  'Enter' ,  'Equals' ,  'Escape' ,  'F1 to F12' ,  'Home' ,  'Insert' ,  'Meta' ,  'Multiply' ,  'Numpad 0'  to  'Numpad 9' ,  'Pagedown'  or  'PageDown' ,  'Pageup'  or  'PageUp' ,  'Pause' ,  'Semicolon' ,  'Shift' ,  'Space' ,  'Subtract' ,  'Tab' .   Parameters   key", 
            "title": "pressKey"
        }, 
        {
            "location": "/helpers/Protractor/#refresh", 
            "text": "Reloads page", 
            "title": "refresh"
        }, 
        {
            "location": "/helpers/Protractor/#refreshpage", 
            "text": "Reload the current page.  `I.refreshPage();", 
            "title": "refreshPage"
        }, 
        {
            "location": "/helpers/Protractor/#resetmodule", 
            "text": "Removes mocked Angular module. If modName not specified - clears all mock modules.  I.resetModule(); // clears all\nI.resetModule('modName');  Parameters   modName", 
            "title": "resetModule"
        }, 
        {
            "location": "/helpers/Protractor/#resizewindow", 
            "text": "Resize the current window to provided width and height.\nFirst parameter can be set to  maximize  Parameters   width   or  maximize  height", 
            "title": "resizeWindow"
        }, 
        {
            "location": "/helpers/Protractor/#rightclick", 
            "text": "Performs right click on an element matched by CSS or XPath.  Parameters   locator     context    (optional, default  null )", 
            "title": "rightClick"
        }, 
        {
            "location": "/helpers/Protractor/#savescreenshot", 
            "text": "Saves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder. \nOptionally resize the window to the full available page  scrollHeight  and  scrollWidth  to capture the entire page by passing  true  in as the second argument.  I.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png',true) \\\\resizes to available scrollHeight and scrollWidth before taking screenshot  Parameters   fileName     fullPage   (optional)", 
            "title": "saveScreenshot"
        }, 
        {
            "location": "/helpers/Protractor/#scrollpagetobottom", 
            "text": "Scroll page to the bottom  I.scrollPageToBottom();", 
            "title": "scrollPageToBottom"
        }, 
        {
            "location": "/helpers/Protractor/#scrollpagetotop", 
            "text": "Scroll page to the top  I.scrollPageToTop();", 
            "title": "scrollPageToTop"
        }, 
        {
            "location": "/helpers/Protractor/#scrollto", 
            "text": "Scrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options  I.scrollTo('footer');\nI.scrollTo('#submit', 5,5);  Parameters   locator     offsetX    (optional, default  0 )  offsetY    (optional, default  0 )", 
            "title": "scrollTo"
        }, 
        {
            "location": "/helpers/Protractor/#see", 
            "text": "Checks that a page contains a visible text.\nUse context parameter to narrow down the search.  I.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator  Parameters   text   expected on page  context   (optional) element located by CSS|Xpath|strict locator in which to search for text", 
            "title": "see"
        }, 
        {
            "location": "/helpers/Protractor/#seeattributesonelements", 
            "text": "Checks that all elements with given locator have given attributes.  I.seeAttributesOnElements('//form', {'method':  post });  Parameters   locator     attributes", 
            "title": "seeAttributesOnElements"
        }, 
        {
            "location": "/helpers/Protractor/#seecheckboxischecked", 
            "text": "Verifies that the specified checkbox is checked.  I.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "seeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Protractor/#seecookie", 
            "text": "Checks that cookie with given name exists.  I.seeCookie('Auth');  Parameters   name", 
            "title": "seeCookie"
        }, 
        {
            "location": "/helpers/Protractor/#seecsspropertiesonelements", 
            "text": "Checks that all elements with given locator have given CSS properties.  I.seeCssPropertiesOnElements('h3', { 'font-weight':  bold });  Parameters   locator     properties     cssProperties", 
            "title": "seeCssPropertiesOnElements"
        }, 
        {
            "location": "/helpers/Protractor/#seecurrenturlequals", 
            "text": "Checks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:  I.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');  Parameters   url", 
            "title": "seeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/Protractor/#seeelement", 
            "text": "Checks that a given Element is visible\nElement is located by CSS or XPath.  I.seeElement('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElement"
        }, 
        {
            "location": "/helpers/Protractor/#seeelementindom", 
            "text": "Checks that a given Element is present in the DOM\nElement is located by CSS or XPath.  I.seeElementInDOM('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElementInDOM"
        }, 
        {
            "location": "/helpers/Protractor/#seeincurrenturl", 
            "text": "Checks that current url contains a provided fragment.  I.seeInCurrentUrl('/register'); // we are on registration page  Parameters   url", 
            "title": "seeInCurrentUrl"
        }, 
        {
            "location": "/helpers/Protractor/#seeinfield", 
            "text": "Checks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.  I.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "seeInField"
        }, 
        {
            "location": "/helpers/Protractor/#seeinpopup", 
            "text": "Checks that the active JavaScript popup, as created by  window.alert|window.confirm|window.prompt , contains the\ngiven string.  Parameters   text", 
            "title": "seeInPopup"
        }, 
        {
            "location": "/helpers/Protractor/#seeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code.  I.seeInSource(' h1 Green eggs  amp; ham /h1 ');  Parameters   text", 
            "title": "seeInSource"
        }, 
        {
            "location": "/helpers/Protractor/#seeintitle", 
            "text": "Checks that title contains text.  Parameters   text", 
            "title": "seeInTitle"
        }, 
        {
            "location": "/helpers/Protractor/#seenumberofelements", 
            "text": "asserts that an element appears a given number of times in the DOM\nElement is located by label or name or CSS or XPath.  I.seeNumberOfElements('#submitBtn', 1);  Parameters   selector     num", 
            "title": "seeNumberOfElements"
        }, 
        {
            "location": "/helpers/Protractor/#seenumberofvisibleelements", 
            "text": "asserts that an element is visible a given number of times\nElement is located by CSS or XPath.  I.seeNumberOfVisibleElements('.buttons', 3);  Parameters   locator     num", 
            "title": "seeNumberOfVisibleElements"
        }, 
        {
            "location": "/helpers/Protractor/#seetextequals", 
            "text": "Checks that text is equal to provided one.  I.seeTextEquals('text', 'h1');  Parameters   text     context    (optional, default  null )", 
            "title": "seeTextEquals"
        }, 
        {
            "location": "/helpers/Protractor/#seetitleequals", 
            "text": "Checks that title is equal to provided one.  I.seeTitleEquals('Test title.');  Parameters   text", 
            "title": "seeTitleEquals"
        }, 
        {
            "location": "/helpers/Protractor/#selectoption", 
            "text": "Selects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.  I.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');  Provide an array for the second argument to select multiple options.  I.selectOption('Which OS do you use?', ['Android', 'iOS']);  Parameters   select   field located by label|name|CSS|XPath|strict locator  option", 
            "title": "selectOption"
        }, 
        {
            "location": "/helpers/Protractor/#setcookie", 
            "text": "Sets a cookie  I.setCookie({name: 'auth', value: true});  Parameters   cookie", 
            "title": "setCookie"
        }, 
        {
            "location": "/helpers/Protractor/#switchto", 
            "text": "Switches frame or in case of null locator reverts to parent.  Parameters   locator", 
            "title": "switchTo"
        }, 
        {
            "location": "/helpers/Protractor/#switchtonexttab", 
            "text": "Switch focus to a particular tab by its number. It waits tabs loading and then switch tab  I.switchToNextTab();\nI.switchToNextTab(2);  Parameters   num    (optional, default  1 )", 
            "title": "switchToNextTab"
        }, 
        {
            "location": "/helpers/Protractor/#switchtoprevioustab", 
            "text": "Switch focus to a particular tab by its number. It waits tabs loading and then switch tab  I.switchToPreviousTab();\nI.switchToPreviousTab(2);  Parameters   num    (optional, default  1 )", 
            "title": "switchToPreviousTab"
        }, 
        {
            "location": "/helpers/Protractor/#wait", 
            "text": "Pauses execution for a number of seconds.  I.wait(2); // wait 2 secs  Parameters   sec", 
            "title": "wait"
        }, 
        {
            "location": "/helpers/Protractor/#waitforclickable", 
            "text": "Waits for element to become clickable for number of seconds.  I.waitForClickable('#link');  Parameters   locator     sec    (optional, default  null )", 
            "title": "waitForClickable"
        }, 
        {
            "location": "/helpers/Protractor/#waitfordetached", 
            "text": "Waits for an element to become not attached to the DOM on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForDetached('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForDetached"
        }, 
        {
            "location": "/helpers/Protractor/#waitforelement", 
            "text": "Waits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForElement"
        }, 
        {
            "location": "/helpers/Protractor/#waitforenabled", 
            "text": "Waits for element to become enabled (by default waits for 1sec).\nElement can be located by CSS or XPath.  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForEnabled"
        }, 
        {
            "location": "/helpers/Protractor/#waitforfunction", 
            "text": "Waits for a function to return true (waits for 1 sec by default).\nRunning in browser context.  I.waitForFunction(fn[, [args[, timeout]])  I.waitForFunction(() =  window.requests == 0);\nI.waitForFunction(() =  window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) =  window.requests == count, [3], 5) // pass args and wait for 5 sec  Parameters   function   to be executed in browser context  args   arguments for function  fn     argsOrSec    (optional, default  null )  sec   time seconds to wait, 1 by default", 
            "title": "waitForFunction"
        }, 
        {
            "location": "/helpers/Protractor/#waitforinvisible", 
            "text": "Waits for an element to be removed or become invisible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForInvisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForInvisible"
        }, 
        {
            "location": "/helpers/Protractor/#waitfortext", 
            "text": "Waits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.  I.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');  Parameters   text   to wait for  sec   seconds to wait  context   element located by CSS|XPath|strict locator", 
            "title": "waitForText"
        }, 
        {
            "location": "/helpers/Protractor/#waitforvalue", 
            "text": "Waits for the specified value to be in value attribute  I.waitForValue('//input',  GoodValue );  Parameters   field   input field  value   expected value  sec   seconds to wait, 1 sec by default", 
            "title": "waitForValue"
        }, 
        {
            "location": "/helpers/Protractor/#waitforvisible", 
            "text": "Waits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForVisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForVisible"
        }, 
        {
            "location": "/helpers/Protractor/#waitinurl", 
            "text": "Waiting for the part of the URL to match the expected. Useful for SPA to understand that page was changed.  I.waitInUrl('/info', 2);  Parameters   urlPart     sec    (optional, default  null )", 
            "title": "waitInUrl"
        }, 
        {
            "location": "/helpers/Protractor/#waitnumberofvisibleelements", 
            "text": "Waits for a specified number of elements on the page  I.waitNumberOfVisibleElements('a', 3);  Parameters   locator     seconds     num     sec    (optional, default  null )", 
            "title": "waitNumberOfVisibleElements"
        }, 
        {
            "location": "/helpers/Protractor/#waittohide", 
            "text": "Waits for an element to hide (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitToHide('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitToHide"
        }, 
        {
            "location": "/helpers/Protractor/#waituntil", 
            "text": "Waits for a function to return true (waits for 1sec by default).  I.waitUntil(() =  window.requests == 0);\nI.waitUntil(() =  window.requests == 0, 5);  Parameters   function   function which is executed in browser context.  fn     sec   time seconds to wait, 1 by default  timeoutMsg    (optional, default  null )", 
            "title": "waitUntil"
        }, 
        {
            "location": "/helpers/Protractor/#waiturlequals", 
            "text": "Waits for the entire URL to match the expected  I.waitUrlEquals('/info', 2);\nI.waitUrlEquals('http://127.0.0.1:8000/info');  Parameters   urlPart     sec    (optional, default  null )", 
            "title": "waitUrlEquals"
        }, 
        {
            "location": "/helpers/Protractor/#locator", 
            "text": "just press button if no selector is given", 
            "title": "locator"
        }, 
        {
            "location": "/helpers/Puppeteer/", 
            "text": "Puppeteer\n\n\nUses \nGoogle Chrome's Puppeteer\n library to run tests inside headless Chrome.\nBrowser control is executed via DevTools without Selenium.\nThis helper works with a browser out of the box with no additional tools required to install.\n\n\nRequires \npuppeteer\n package to be installed.\n\n\nConfiguration\n\n\nThis helper should be configured in codecept.json\n\n\n\n\nurl\n: base url of website to be tested\n\n\nshow\n: (optional, default: false) - show Google Chrome window for debug.\n\n\nrestart\n: (optional, default: true) - restart browser between tests.\n\n\ndisableScreenshots\n: (optional, default: false)  - don't save screenshot on failure.\n\n\nfullPageScreenshots\n (optional, default: false) - make full page screenshots on failure.\n\n\nuniqueScreenshotNames\n: (optional, default: false)  - option to prevent screenshot override if you have scenarios with the same name in different suites.\n\n\nkeepBrowserState\n: (optional, default: false) - keep browser state between tests when \nrestart\n is set to false.\n\n\nkeepCookies\n: (optional, default: false) - keep cookies between tests when \nrestart\n is set to false.\n\n\nwaitForAction\n: (optional) how long to wait after click, doubleClick or PressKey actions in ms. Default: 100.\n\n\nwaitForNavigation\n: (optional, default: 'load'). When to consider navigation succeeded. Possible options: \nload\n, \ndomcontentloaded\n, \nnetworkidle0\n, \nnetworkidle2\n. See \nPuppeteer API\n. Array values are accepted as well.\n\n\ngetPageTimeout\n (optional, default: '0') config option to set maximum navigation time in milliseconds.\n\n\nwaitForTimeout\n: (optional) default wait* timeout in ms. Default: 1000.\n\n\nwindowSize\n: (optional) default window size. Set a dimension like \n640x480\n.\n\n\nuserAgent\n: (optional) user-agent string.\n\n\nmanualStart\n: (optional, default: false) - do not start browser before a test, start it manually inside a helper with \nthis.helpers[\"Puppeteer\"]._startBrowser()\n.\n\n\nchrome\n: (optional) pass additional \nPuppeteer run options\n. Example\n\n\n\n\nchrome\n: {\n  \nexecutablePath\n : \n/path/to/Chrome\n\n}\n\n\n\n\nExample #1: Wait for 0 network connections.\n\n\n{\n   \nhelpers\n: {\n     \nPuppeteer\n : {\n       \nurl\n: \nhttp://localhost\n,\n       \nrestart\n: false,\n       \nwaitForNavigation\n: \nnetworkidle0\n,\n       \nwaitForAction\n: 500\n     }\n   }\n}\n\n\n\n\nExample #2: Wait for DOMContentLoaded event and 0 network connections\n\n\n{\n   \nhelpers\n: {\n     \nPuppeteer\n : {\n       \nurl\n: \nhttp://localhost\n,\n       \nrestart\n: false,\n       \nwaitForNavigation\n: [ \ndomcontentloaded\n, \nnetworkidle0\n ],\n       \nwaitForAction\n: 500\n     }\n   }\n}\n\n\n\n\nExample #3: Debug in window mode\n\n\n{\n   \nhelpers\n: {\n     \nPuppeteer\n : {\n       \nurl\n: \nhttp://localhost\n,\n       \nshow\n: true\n     }\n   }\n}\n\n\n\n\nAccess From Helpers\n\n\nReceive Puppeteer client from a custom helper by accessing \nbrowser\n for the Browser object or \npage\n for the current Page object:\n\n\nconst browser = this.helpers['Puppeteer'].browser;\nawait browser.pages(); // List of pages in the browser\n\nconst currentPage = this.helpers['Puppeteer'].page;\nawait currentPage.url(); // Get the url of the current page\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\n_addPopupListener\n\n\nAdd the 'dialog' event listener to a page\n\n\nParameters\n\n\n\n\npage\n  \n\n\n\n\n_getPageUrl\n\n\nGets page URL including hash.\n\n\n_locate\n\n\nGet elements by different locator types, including strict locator\nShould be used in custom helpers:\n\n\nconst elements = await this.helpers['Puppeteer']._locate({name: 'password'});\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\n_locateCheckable\n\n\nFind a checkbox by providing human readable text:\n\n\nthis.helpers['Puppeteer']._locateCheckable('I agree with terms and conditions').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\n_locateClickable\n\n\nFind a clickable element by providing human readable text:\n\n\nthis.helpers['Puppeteer']._locateClickable('Next page').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\n_locateFields\n\n\nFind field elements by providing human readable text:\n\n\nthis.helpers['Puppeteer']._locateFields('Your email').then // ...\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\n_setPage\n\n\nSet current page\n\n\nParameters\n\n\n\n\npage\n \nobject\n page to set\n\n\n\n\nacceptPopup\n\n\nAccepts the active JavaScript native popup window, as created by window.alert|window.confirm|window.prompt.\nDon't confuse popups with modal windows, as created by \nvarious\nlibraries\n.\n\n\namAcceptingPopups\n\n\nSet the automatic popup response to Accept.\nThis must be set before a popup is triggered.\n\n\nI.amAcceptingPopups();\nI.click('#triggerPopup');\nI.acceptPopup();\n\n\n\n\namCancellingPopups\n\n\nSet the automatic popup response to Cancel/Dismiss.\nThis must be set before a popup is triggered.\n\n\nI.amCancellingPopups();\nI.click('#triggerPopup');\nI.cancelPopup();\n\n\n\n\namOnPage\n\n\nOpens a web page in a browser. Requires relative or absolute url.\nIf url starts with \n/\n, opens a web page of a site defined in \nurl\n config parameter.\n\n\nI.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page\n\n\n\n\nParameters\n\n\n\n\nurl\n  url path or global url\n\n\n\n\nappendField\n\n\nAppends text to a input field or textarea.\nField is located by name, label, CSS or XPath\n\n\nI.appendField('#myTextField', 'appended');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  text value\n\n\n\n\nattachFile\n\n\nAttaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remote system (if tests are running remotely).\n\n\nI.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\npathToFile\n  local file path relative to codecept.json config file\n\n\n\n\ncancelPopup\n\n\nDismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt.\n\n\ncheckOption\n\n\nSelects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nfield\n  checkbox located by label\n\n\nname\n\n\nCSS\n\n\n\n\n\n\n\n\n\n\nclearCookie\n\n\nClears a cookie by name,\nif none provided clears all cookies\n\n\nI.clearCookie();\nI.clearCookie('test');\n\n\n\n\nParameters\n\n\n\n\ncookie\n  (optional)\n\n\nname\n  \n\n\n\n\nclearField\n\n\nClears a \ntextarea\n or text \ninput\n element's value.\n\n\nI.clearField('Email');\nI.clearField('user[email]');\nI.clearField('#email');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\nclick\n\n\nPerform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nlocator\n  clickable link or button located by text, or any element located by CSS\n\n\nXPath\n\n\nstrict locator\n\n\n\n\n\n\n\n\n\n\ncloseCurrentTab\n\n\nClose current tab and switches to previous.\n\n\nI.closeCurrentTab();\n\n\n\n\ncloseOtherTabs\n\n\nClose all tabs except for the current one.\n\n\nI.closeOtherTabs();\n\n\n\n\ndontSee\n\n\nOpposite to \nsee\n. Checks that a text is not present on a page.\nUse context parameter to narrow down the search.\n\n\nI.dontSee('Login'); // assume we are already logged in\n\n\n\n\nParameters\n\n\n\n\ntext\n  is not present\n\n\ncontext\n  (optional) element located by CSS|XPath|strict locator in which to perfrom search\n\n\n\n\ndontSeeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is not checked.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\ndontSeeCookie\n\n\nChecks that cookie with given name does not exist.\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\ndontSeeCurrentUrlEquals\n\n\nChecks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeElement\n\n\nOpposite to \nseeElement\n. Checks that element is not visible (or in DOM)\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeElementInDOM\n\n\nOpposite to \nseeElementInDOM\n. Checks that element is not on page.\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeInCurrentUrl\n\n\nChecks that current url does not contain a provided fragment.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeInField\n\n\nChecks that value of input field or textare doesn't equal to given value\nOpposite to \nseeInField\n.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  is not expected to be a field value\n\n\n\n\ndontSeeInSource\n\n\nChecks that the current page contains the given string in its raw source code\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndontSeeInTitle\n\n\nChecks that title does not contain text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndoubleClick\n\n\nPerforms a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.\n\n\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncontext\n  \n\n\n\n\ndragAndDrop\n\n\nDrag an item to a destination element.\n\n\nI.dragAndDrop('#dragHandle', '#container');\n\n\n\n\nParameters\n\n\n\n\nsource\n  \n\n\ndestination\n  \n\n\n\n\nexecuteAsyncScript\n\n\nExecutes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.\n\n\nExample: In Vue.js to make components completely rendered we are waiting for \nnextTick\n.\n\n\nI.executeAsyncScript(function(done) {\nVue.nextTick(done); // waiting for next tick\n});\n\n\n\n\nBy passing value to \ndone()\n function you can return values.\nAdditional arguments can be passed as well, while \ndone\n function is always last parameter in arguments list.\n\n\nlet val = await I.executeAsyncScript(function(url, done) {\n// in browser context\n$.ajax(url, { success: (data) =\n done(data); }\n}, 'http://ajax.callback.url/');\n\n\n\n\nParameters\n\n\n\n\nfn\n  function to be executed in browser context\n\n\n\n\nexecuteScript\n\n\nExecutes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use async function and await to receive results.\n\n\nExample with jQuery DatePicker:\n\n\n// change date of jQuery DatePicker\nI.executeScript(function() {\n// now we are inside browser context\n$('date').datetimepicker('setDate', new Date());\n});\n\n\n\n\nCan return values. Don't forget to use \nawait\n to get them.\n\n\nlet date = await I.executeScript(function(el) {\n// only basic types can be returned\nreturn $(el).datetimepicker('getDate').toString();\n}, '#date'); // passing jquery selector\n\n\n\n\nParameters\n\n\n\n\nfn\n  function to be executed in browser context\n\n\n\n\nfillField\n\n\nFills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.\n\n\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\ngrabAttributeFrom\n\n\nRetrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet hint = await I.grabAttributeFrom('#tooltip', 'title');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nattr\n  \n\n\n\n\ngrabBrowserLogs\n\n\nGet JS log from browser.\n\n\nlet logs = await I.grabBrowserLogs();\nconsole.log(JSON.stringify(logs))\n\n\n\n\ngrabCookie\n\n\nGets a cookie object by name\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');\n\n\n\n\nParameters\n\n\n\n\nname\n  Returns cookie in JSON format. If name not passed returns all cookies for this domain.\n\n\n\n\ngrabCssPropertyFrom\n\n\nGrab CSS property for given locator\nResumes test execution, so \nshould be used inside an async function with \nawait\n operator.\n\n\nconst value = await I.grabCssPropertyFrom('h3', 'font-weight');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncssProperty\n  \n\n\n\n\ngrabCurrentUrl\n\n\nGet current URL from browser.\nResumes test execution, so should be used inside an async function.\n\n\nlet url = await I.grabCurrentUrl();\nconsole.log(`Current URL is [${url}]`);\n\n\n\n\ngrabHTMLFrom\n\n\nRetrieves the innerHTML from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async function with \nawait\n operator.\nAppium: support only web testing\n\n\nlet postHTML = await I.grabHTMLFrom('#post');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\ngrabNumberOfOpenTabs\n\n\nGrab number of open tabs\n\n\nI.grabNumberOfOpenTabs();\n\n\n\n\ngrabNumberOfVisibleElements\n\n\n\n\nGrab number of visible elements by locator\n\n\n\n\nI.grabNumberOfVisibleElements('p');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\ngrabPageScrollPosition\n\n\nRetrieves a page scroll position and returns it to test.\nResumes test execution, so \nshould be used inside an async function with \nawait\n operator.\n\n\nlet { x, y } = await I.grabPageScrollPosition();\n\n\n\n\ngrabPopupText\n\n\nGrab the text within the popup. If no popup is visible then it will return null\n\n\nawait I.grabPopupText();\n\n\n\n\ngrabSource\n\n\nRetrieves page source and returns it to test.\nResumes test execution, so should be used inside an async function.\n\n\nlet pageSource = await I.grabSource();\n\n\n\n\ngrabTextFrom\n\n\nRetrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet pin = await I.grabTextFrom('#pin');\n\n\n\n\nIf multiple elements found returns an array of texts.\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\n\n\ngrabTitle\n\n\nRetrieves a page title and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet title = await I.grabTitle();\n\n\n\n\ngrabValueFrom\n\n\nRetrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async function with \nawait\n operator.\n\n\nlet email = await I.grabValueFrom('input[name=email]');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\n\n\nhaveRequestHeaders\n\n\nSet headers for all next requests\n\n\nI.haveRequestHeaders({\n   'X-Sent-By': 'CodeceptJS',\n});\n\n\n\n\nParameters\n\n\n\n\ncustomHeaders\n  \n\n\n\n\nmoveCursorTo\n\n\nMoves cursor to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\n\n\nI.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\noffsetX\n   (optional, default \n0\n)\n\n\noffsetY\n   (optional, default \n0\n)\n\n\n\n\nopenNewTab\n\n\nOpen new tab and switch to it\n\n\nI.openNewTab();\n\n\n\n\npressKey\n\n\nPresses a key on a focused element.\nSpecial keys like 'Enter', 'Control', \netc\n\nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.\n\n\nI.pressKey('Enter');\nI.pressKey(['Control','a']);\n\n\n\n\nParameters\n\n\n\n\nkey\n  \n\n\n\n\nrefreshPage\n\n\nReload the current page.\n\n\n`I.refreshPage();\n\n\n\n\nresizeWindow\n\n\nResize the current window to provided width and height.\nFirst parameter can be set to \nmaximize\n\n\nParameters\n\n\n\n\nwidth\n  or \nmaximize\n\n\nheight\n  Unlike other drivers Puppeteer changes the size of a viewport, not the window!\n    Puppeteer does not control the window of a browser so it can't adjust its real size.\n    It also can't maximize a window.\n\n\n\n\nrightClick\n\n\nPerforms right click on an element matched by CSS or XPath.\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncontext\n   (optional, default \nnull\n)\n\n\n\n\nsaveScreenshot\n\n\nSaves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder. \nOptionally resize the window to the full available page \nscrollHeight\n and \nscrollWidth\n to capture the entire page by passing \ntrue\n in as the second argument.\n\n\nI.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png',true) \\\\resizes to available scrollHeight and scrollWidth before taking screenshot\n\n\n\n\nParameters\n\n\n\n\nfileName\n  \n\n\nfullPage\n  (optional)\n\n\n\n\nscrollPageToBottom\n\n\nScroll page to the bottom\n\n\nI.scrollPageToBottom();\n\n\n\n\nscrollPageToTop\n\n\nScroll page to the top\n\n\nI.scrollPageToTop();\n\n\n\n\nscrollTo\n\n\nScrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\n\n\nI.scrollTo('footer');\nI.scrollTo('#submit', 5,5);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\noffsetX\n   (optional, default \n0\n)\n\n\noffsetY\n   (optional, default \n0\n)\n\n\n\n\nsee\n\n\nChecks that a page contains a visible text.\nUse context parameter to narrow down the search.\n\n\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n\n\n\n\nParameters\n\n\n\n\ntext\n  expected on page\n\n\ncontext\n  (optional) element located by CSS|Xpath|strict locator in which to search for text\n\n\n\n\nseeAttributesOnElements\n\n\nChecks that all elements with given locator have given attributes.\n\n\nI.seeAttributesOnElements('//form', {'method': \npost\n});\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nattributes\n  \n\n\n\n\nseeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is checked.\n\n\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\nseeCookie\n\n\nChecks that cookie with given name exists.\n\n\nI.seeCookie('Auth');\n\n\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\nseeCssPropertiesOnElements\n\n\nChecks that all elements with given locator have given CSS properties.\n\n\nI.seeCssPropertiesOnElements('h3', { 'font-weight': \nbold\n});\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nproperties\n  \n\n\ncssProperties\n  \n\n\n\n\nseeCurrentUrlEquals\n\n\nChecks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:\n\n\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeElement\n\n\nChecks that a given Element is visible\nElement is located by CSS or XPath.\n\n\nI.seeElement('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeElementInDOM\n\n\nChecks that a given Element is present in the DOM\nElement is located by CSS or XPath.\n\n\nI.seeElementInDOM('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeInCurrentUrl\n\n\nChecks that current url contains a provided fragment.\n\n\nI.seeInCurrentUrl('/register'); // we are on registration page\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeInField\n\n\nChecks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.\n\n\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\nseeInPopup\n\n\nChecks that the active JavaScript popup, as created by \nwindow.alert|window.confirm|window.prompt\n, contains the\ngiven string.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeInSource\n\n\nChecks that the current page contains the given string in its raw source code.\n\n\nI.seeInSource('\nh1\nGreen eggs \namp; ham\n/h1\n');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeInTitle\n\n\nChecks that title contains text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeNumberOfElements\n\n\nasserts that an element appears a given number of times in the DOM\nElement is located by label or name or CSS or XPath.\n\n\nI.seeNumberOfElements('#submitBtn', 1);\n\n\n\n\nParameters\n\n\n\n\nselector\n  \n\n\nnum\n  \n\n\n\n\nseeNumberOfVisibleElements\n\n\nasserts that an element is visible a given number of times\nElement is located by CSS or XPath.\n\n\nI.seeNumberOfVisibleElements('.buttons', 3);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nnum\n  \n\n\n\n\nseeTextEquals\n\n\nChecks that text is equal to provided one.\n\n\nI.seeTextEquals('text', 'h1');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\ncontext\n   (optional, default \nnull\n)\n\n\n\n\nseeTitleEquals\n\n\nChecks that title is equal to provided one.\n\n\nI.seeTitleEquals('Test title.');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nselectOption\n\n\nSelects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.\n\n\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n\n\n\nProvide an array for the second argument to select multiple options.\n\n\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n\n\n\n\nParameters\n\n\n\n\nselect\n  field located by label|name|CSS|XPath|strict locator\n\n\noption\n  \n\n\n\n\nsetCookie\n\n\nSets a cookie\n\n\nI.setCookie({name: 'auth', value: true});\n\n\n\n\nParameters\n\n\n\n\ncookie\n  \n\n\n\n\nswitchTo\n\n\nSwitches frame or in case of null locator reverts to parent.\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\nswitchToNextTab\n\n\nSwitch focus to a particular tab by its number. It waits tabs loading and then switch tab\n\n\nI.switchToNextTab();\nI.switchToNextTab(2);\n\n\n\n\nParameters\n\n\n\n\nnum\n   (optional, default \n1\n)\n\n\n\n\nswitchToPreviousTab\n\n\nSwitch focus to a particular tab by its number. It waits tabs loading and then switch tab\n\n\nI.switchToPreviousTab();\nI.switchToPreviousTab(2);\n\n\n\n\nParameters\n\n\n\n\nnum\n   (optional, default \n1\n)\n\n\n\n\nwait\n\n\nPauses execution for a number of seconds.\n\n\nI.wait(2); // wait 2 secs\n\n\n\n\nParameters\n\n\n\n\nsec\n  \n\n\n\n\nwaitForDetached\n\n\nWaits for an element to become not attached to the DOM on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForDetached('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForElement\n\n\nWaits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForEnabled\n\n\nWaits for element to become enabled (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForFunction\n\n\nWaits for a function to return true (waits for 1 sec by default).\nRunning in browser context.\n\n\nI.waitForFunction(fn[, [args[, timeout]])\n\n\n\n\nI.waitForFunction(() =\n window.requests == 0);\nI.waitForFunction(() =\n window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) =\n window.requests == count, [3], 5) // pass args and wait for 5 sec\n\n\n\n\nParameters\n\n\n\n\nfunction\n  to be executed in browser context\n\n\nargs\n  arguments for function\n\n\nfn\n  \n\n\nargsOrSec\n   (optional, default \nnull\n)\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForInvisible\n\n\nWaits for an element to be removed or become invisible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForInvisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForNavigation\n\n\nWaits for navigation to finish. By default takes configured \nwaitForNavigation\n option.\n\n\nSee \nPupeteer's reference\n\n\nParameters\n\n\n\n\nopts\n \nAny\n \n\n\n\n\nwaitForRequest\n\n\nWaits for a network request.\n\n\nI.waitForRequest('http://example.com/resource');\nI.waitForRequest(request =\n request.url() === 'http://example.com' \n request.method() === 'GET');\n\n\n\n\nParameters\n\n\n\n\nurlOrPredicate\n \nAny\n \n\n\nsec\n \nAny\n \n\n\n\n\nwaitForResponse\n\n\nWaits for a network request.\n\n\nI.waitForResponse('http://example.com/resource');\nI.waitForResponse(request =\n request.url() === 'http://example.com' \n request.method() === 'GET');\n\n\n\n\nParameters\n\n\n\n\nurlOrPredicate\n \nAny\n \n\n\nsec\n \nAny\n \n\n\n\n\nwaitForText\n\n\nWaits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.\n\n\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n\n\n\n\nParameters\n\n\n\n\ntext\n  to wait for\n\n\nsec\n  seconds to wait\n\n\ncontext\n  element located by CSS|XPath|strict locator\n\n\n\n\nwaitForValue\n\n\nWaits for the specified value to be in value attribute\n\n\nI.waitForValue('//input', \nGoodValue\n);\n\n\n\n\nParameters\n\n\n\n\nfield\n  input field\n\n\nlocator\n  \n\n\nvalue\n  expected value\n\n\nsec\n  seconds to wait, 1 sec by default\n\n\n\n\nwaitForVisible\n\n\nWaits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForVisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitInUrl\n\n\nWaiting for the part of the URL to match the expected. Useful for SPA to understand that page was changed.\n\n\nI.waitInUrl('/info', 2);\n\n\n\n\nParameters\n\n\n\n\nurlPart\n  \n\n\nsec\n   (optional, default \nnull\n)\n\n\n\n\nwaitNumberOfVisibleElements\n\n\nWaits for a specified number of elements on the page\n\n\nI.waitNumberOfVisibleElements('a', 3);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nseconds\n  \n\n\nnum\n  \n\n\nsec\n  \n\n\n\n\nwaitToHide\n\n\nWaits for an element to hide (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitToHide('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitUntil\n\n\nWaits for a function to return true (waits for 1sec by default).\n\n\nI.waitUntil(() =\n window.requests == 0);\nI.waitUntil(() =\n window.requests == 0, 5);\n\n\n\n\nParameters\n\n\n\n\nfunction\n  function which is executed in browser context.\n\n\nfn\n  \n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitUrlEquals\n\n\nWaits for the entire URL to match the expected\n\n\nI.waitUrlEquals('/info', 2);\nI.waitUrlEquals('http://127.0.0.1:8000/info');\n\n\n\n\nParameters\n\n\n\n\nurlPart\n  \n\n\nsec\n   (optional, default \nnull\n)", 
            "title": "Puppeteer"
        }, 
        {
            "location": "/helpers/Puppeteer/#puppeteer", 
            "text": "Uses  Google Chrome's Puppeteer  library to run tests inside headless Chrome.\nBrowser control is executed via DevTools without Selenium.\nThis helper works with a browser out of the box with no additional tools required to install.  Requires  puppeteer  package to be installed.", 
            "title": "Puppeteer"
        }, 
        {
            "location": "/helpers/Puppeteer/#configuration", 
            "text": "This helper should be configured in codecept.json   url : base url of website to be tested  show : (optional, default: false) - show Google Chrome window for debug.  restart : (optional, default: true) - restart browser between tests.  disableScreenshots : (optional, default: false)  - don't save screenshot on failure.  fullPageScreenshots  (optional, default: false) - make full page screenshots on failure.  uniqueScreenshotNames : (optional, default: false)  - option to prevent screenshot override if you have scenarios with the same name in different suites.  keepBrowserState : (optional, default: false) - keep browser state between tests when  restart  is set to false.  keepCookies : (optional, default: false) - keep cookies between tests when  restart  is set to false.  waitForAction : (optional) how long to wait after click, doubleClick or PressKey actions in ms. Default: 100.  waitForNavigation : (optional, default: 'load'). When to consider navigation succeeded. Possible options:  load ,  domcontentloaded ,  networkidle0 ,  networkidle2 . See  Puppeteer API . Array values are accepted as well.  getPageTimeout  (optional, default: '0') config option to set maximum navigation time in milliseconds.  waitForTimeout : (optional) default wait* timeout in ms. Default: 1000.  windowSize : (optional) default window size. Set a dimension like  640x480 .  userAgent : (optional) user-agent string.  manualStart : (optional, default: false) - do not start browser before a test, start it manually inside a helper with  this.helpers[\"Puppeteer\"]._startBrowser() .  chrome : (optional) pass additional  Puppeteer run options . Example   chrome : {\n   executablePath  :  /path/to/Chrome \n}  Example #1: Wait for 0 network connections.  {\n    helpers : {\n      Puppeteer  : {\n        url :  http://localhost ,\n        restart : false,\n        waitForNavigation :  networkidle0 ,\n        waitForAction : 500\n     }\n   }\n}  Example #2: Wait for DOMContentLoaded event and 0 network connections  {\n    helpers : {\n      Puppeteer  : {\n        url :  http://localhost ,\n        restart : false,\n        waitForNavigation : [  domcontentloaded ,  networkidle0  ],\n        waitForAction : 500\n     }\n   }\n}  Example #3: Debug in window mode  {\n    helpers : {\n      Puppeteer  : {\n        url :  http://localhost ,\n        show : true\n     }\n   }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/helpers/Puppeteer/#access-from-helpers", 
            "text": "Receive Puppeteer client from a custom helper by accessing  browser  for the Browser object or  page  for the current Page object:  const browser = this.helpers['Puppeteer'].browser;\nawait browser.pages(); // List of pages in the browser\n\nconst currentPage = this.helpers['Puppeteer'].page;\nawait currentPage.url(); // Get the url of the current page  Parameters   config", 
            "title": "Access From Helpers"
        }, 
        {
            "location": "/helpers/Puppeteer/#_addpopuplistener", 
            "text": "Add the 'dialog' event listener to a page  Parameters   page", 
            "title": "_addPopupListener"
        }, 
        {
            "location": "/helpers/Puppeteer/#_getpageurl", 
            "text": "Gets page URL including hash.", 
            "title": "_getPageUrl"
        }, 
        {
            "location": "/helpers/Puppeteer/#_locate", 
            "text": "Get elements by different locator types, including strict locator\nShould be used in custom helpers:  const elements = await this.helpers['Puppeteer']._locate({name: 'password'});  Parameters   locator", 
            "title": "_locate"
        }, 
        {
            "location": "/helpers/Puppeteer/#_locatecheckable", 
            "text": "Find a checkbox by providing human readable text:  this.helpers['Puppeteer']._locateCheckable('I agree with terms and conditions').then // ...  Parameters   locator", 
            "title": "_locateCheckable"
        }, 
        {
            "location": "/helpers/Puppeteer/#_locateclickable", 
            "text": "Find a clickable element by providing human readable text:  this.helpers['Puppeteer']._locateClickable('Next page').then // ...  Parameters   locator", 
            "title": "_locateClickable"
        }, 
        {
            "location": "/helpers/Puppeteer/#_locatefields", 
            "text": "Find field elements by providing human readable text:  this.helpers['Puppeteer']._locateFields('Your email').then // ...  Parameters   locator", 
            "title": "_locateFields"
        }, 
        {
            "location": "/helpers/Puppeteer/#_setpage", 
            "text": "Set current page  Parameters   page   object  page to set", 
            "title": "_setPage"
        }, 
        {
            "location": "/helpers/Puppeteer/#acceptpopup", 
            "text": "Accepts the active JavaScript native popup window, as created by window.alert|window.confirm|window.prompt.\nDon't confuse popups with modal windows, as created by  various\nlibraries .", 
            "title": "acceptPopup"
        }, 
        {
            "location": "/helpers/Puppeteer/#amacceptingpopups", 
            "text": "Set the automatic popup response to Accept.\nThis must be set before a popup is triggered.  I.amAcceptingPopups();\nI.click('#triggerPopup');\nI.acceptPopup();", 
            "title": "amAcceptingPopups"
        }, 
        {
            "location": "/helpers/Puppeteer/#amcancellingpopups", 
            "text": "Set the automatic popup response to Cancel/Dismiss.\nThis must be set before a popup is triggered.  I.amCancellingPopups();\nI.click('#triggerPopup');\nI.cancelPopup();", 
            "title": "amCancellingPopups"
        }, 
        {
            "location": "/helpers/Puppeteer/#amonpage", 
            "text": "Opens a web page in a browser. Requires relative or absolute url.\nIf url starts with  / , opens a web page of a site defined in  url  config parameter.  I.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page  Parameters   url   url path or global url", 
            "title": "amOnPage"
        }, 
        {
            "location": "/helpers/Puppeteer/#appendfield", 
            "text": "Appends text to a input field or textarea.\nField is located by name, label, CSS or XPath  I.appendField('#myTextField', 'appended');  Parameters   field   located by label|name|CSS|XPath|strict locator  value   text value", 
            "title": "appendField"
        }, 
        {
            "location": "/helpers/Puppeteer/#attachfile", 
            "text": "Attaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remote system (if tests are running remotely).  I.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');  Parameters   locator   field located by label|name|CSS|XPath|strict locator  pathToFile   local file path relative to codecept.json config file", 
            "title": "attachFile"
        }, 
        {
            "location": "/helpers/Puppeteer/#cancelpopup", 
            "text": "Dismisses the active JavaScript popup, as created by window.alert|window.confirm|window.prompt.", 
            "title": "cancelPopup"
        }, 
        {
            "location": "/helpers/Puppeteer/#checkoption", 
            "text": "Selects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.  The second parameter is a context (CSS or XPath locator) to narrow the search.  I.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');  Parameters     -    field   checkbox located by label  name  CSS", 
            "title": "checkOption"
        }, 
        {
            "location": "/helpers/Puppeteer/#clearcookie", 
            "text": "Clears a cookie by name,\nif none provided clears all cookies  I.clearCookie();\nI.clearCookie('test');  Parameters   cookie   (optional)  name", 
            "title": "clearCookie"
        }, 
        {
            "location": "/helpers/Puppeteer/#clearfield", 
            "text": "Clears a  textarea  or text  input  element's value.  I.clearField('Email');\nI.clearField('user[email]');\nI.clearField('#email');  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "clearField"
        }, 
        {
            "location": "/helpers/Puppeteer/#click", 
            "text": "Perform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.  The second parameter is a context (CSS or XPath locator) to narrow the search.  // simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});  Parameters     -    locator   clickable link or button located by text, or any element located by CSS  XPath  strict locator", 
            "title": "click"
        }, 
        {
            "location": "/helpers/Puppeteer/#closecurrenttab", 
            "text": "Close current tab and switches to previous.  I.closeCurrentTab();", 
            "title": "closeCurrentTab"
        }, 
        {
            "location": "/helpers/Puppeteer/#closeothertabs", 
            "text": "Close all tabs except for the current one.  I.closeOtherTabs();", 
            "title": "closeOtherTabs"
        }, 
        {
            "location": "/helpers/Puppeteer/#dontsee", 
            "text": "Opposite to  see . Checks that a text is not present on a page.\nUse context parameter to narrow down the search.  I.dontSee('Login'); // assume we are already logged in  Parameters   text   is not present  context   (optional) element located by CSS|XPath|strict locator in which to perfrom search", 
            "title": "dontSee"
        }, 
        {
            "location": "/helpers/Puppeteer/#dontseecheckboxischecked", 
            "text": "Verifies that the specified checkbox is not checked.  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "dontSeeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Puppeteer/#dontseecookie", 
            "text": "Checks that cookie with given name does not exist.  Parameters   name", 
            "title": "dontSeeCookie"
        }, 
        {
            "location": "/helpers/Puppeteer/#dontseecurrenturlequals", 
            "text": "Checks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.  Parameters   url", 
            "title": "dontSeeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/Puppeteer/#dontseeelement", 
            "text": "Opposite to  seeElement . Checks that element is not visible (or in DOM)  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElement"
        }, 
        {
            "location": "/helpers/Puppeteer/#dontseeelementindom", 
            "text": "Opposite to  seeElementInDOM . Checks that element is not on page.  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElementInDOM"
        }, 
        {
            "location": "/helpers/Puppeteer/#dontseeincurrenturl", 
            "text": "Checks that current url does not contain a provided fragment.  Parameters   url", 
            "title": "dontSeeInCurrentUrl"
        }, 
        {
            "location": "/helpers/Puppeteer/#dontseeinfield", 
            "text": "Checks that value of input field or textare doesn't equal to given value\nOpposite to  seeInField .  Parameters   field   located by label|name|CSS|XPath|strict locator  value   is not expected to be a field value", 
            "title": "dontSeeInField"
        }, 
        {
            "location": "/helpers/Puppeteer/#dontseeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code  Parameters   text", 
            "title": "dontSeeInSource"
        }, 
        {
            "location": "/helpers/Puppeteer/#dontseeintitle", 
            "text": "Checks that title does not contain text.  Parameters   text", 
            "title": "dontSeeInTitle"
        }, 
        {
            "location": "/helpers/Puppeteer/#doubleclick", 
            "text": "Performs a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.  I.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');  Parameters   locator     context", 
            "title": "doubleClick"
        }, 
        {
            "location": "/helpers/Puppeteer/#draganddrop", 
            "text": "Drag an item to a destination element.  I.dragAndDrop('#dragHandle', '#container');  Parameters   source     destination", 
            "title": "dragAndDrop"
        }, 
        {
            "location": "/helpers/Puppeteer/#executeasyncscript", 
            "text": "Executes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.  Example: In Vue.js to make components completely rendered we are waiting for  nextTick .  I.executeAsyncScript(function(done) {\nVue.nextTick(done); // waiting for next tick\n});  By passing value to  done()  function you can return values.\nAdditional arguments can be passed as well, while  done  function is always last parameter in arguments list.  let val = await I.executeAsyncScript(function(url, done) {\n// in browser context\n$.ajax(url, { success: (data) =  done(data); }\n}, 'http://ajax.callback.url/');  Parameters   fn   function to be executed in browser context", 
            "title": "executeAsyncScript"
        }, 
        {
            "location": "/helpers/Puppeteer/#executescript", 
            "text": "Executes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use async function and await to receive results.  Example with jQuery DatePicker:  // change date of jQuery DatePicker\nI.executeScript(function() {\n// now we are inside browser context\n$('date').datetimepicker('setDate', new Date());\n});  Can return values. Don't forget to use  await  to get them.  let date = await I.executeScript(function(el) {\n// only basic types can be returned\nreturn $(el).datetimepicker('getDate').toString();\n}, '#date'); // passing jquery selector  Parameters   fn   function to be executed in browser context", 
            "title": "executeScript"
        }, 
        {
            "location": "/helpers/Puppeteer/#fillfield", 
            "text": "Fills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.  // by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "fillField"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabattributefrom", 
            "text": "Retrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let hint = await I.grabAttributeFrom('#tooltip', 'title');  Parameters   locator   element located by CSS|XPath|strict locator  attr", 
            "title": "grabAttributeFrom"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabbrowserlogs", 
            "text": "Get JS log from browser.  let logs = await I.grabBrowserLogs();\nconsole.log(JSON.stringify(logs))", 
            "title": "grabBrowserLogs"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabcookie", 
            "text": "Gets a cookie object by name\nResumes test execution, so  should be used inside async with  await  operator.  let cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');  Parameters   name   Returns cookie in JSON format. If name not passed returns all cookies for this domain.", 
            "title": "grabCookie"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabcsspropertyfrom", 
            "text": "Grab CSS property for given locator\nResumes test execution, so  should be used inside an async function with  await  operator.  const value = await I.grabCssPropertyFrom('h3', 'font-weight');  Parameters   locator     cssProperty", 
            "title": "grabCssPropertyFrom"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabcurrenturl", 
            "text": "Get current URL from browser.\nResumes test execution, so should be used inside an async function.  let url = await I.grabCurrentUrl();\nconsole.log(`Current URL is [${url}]`);", 
            "title": "grabCurrentUrl"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabhtmlfrom", 
            "text": "Retrieves the innerHTML from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async function with  await  operator.\nAppium: support only web testing  let postHTML = await I.grabHTMLFrom('#post');  Parameters   locator", 
            "title": "grabHTMLFrom"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabnumberofopentabs", 
            "text": "Grab number of open tabs  I.grabNumberOfOpenTabs();", 
            "title": "grabNumberOfOpenTabs"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabnumberofvisibleelements", 
            "text": "Grab number of visible elements by locator   I.grabNumberOfVisibleElements('p');  Parameters   locator", 
            "title": "grabNumberOfVisibleElements"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabpagescrollposition", 
            "text": "Retrieves a page scroll position and returns it to test.\nResumes test execution, so  should be used inside an async function with  await  operator.  let { x, y } = await I.grabPageScrollPosition();", 
            "title": "grabPageScrollPosition"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabpopuptext", 
            "text": "Grab the text within the popup. If no popup is visible then it will return null  await I.grabPopupText();", 
            "title": "grabPopupText"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabsource", 
            "text": "Retrieves page source and returns it to test.\nResumes test execution, so should be used inside an async function.  let pageSource = await I.grabSource();", 
            "title": "grabSource"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabtextfrom", 
            "text": "Retrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let pin = await I.grabTextFrom('#pin');  If multiple elements found returns an array of texts.  Parameters   locator   element located by CSS|XPath|strict locator", 
            "title": "grabTextFrom"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabtitle", 
            "text": "Retrieves a page title and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let title = await I.grabTitle();", 
            "title": "grabTitle"
        }, 
        {
            "location": "/helpers/Puppeteer/#grabvaluefrom", 
            "text": "Retrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async function with  await  operator.  let email = await I.grabValueFrom('input[name=email]');  Parameters   locator   field located by label|name|CSS|XPath|strict locator", 
            "title": "grabValueFrom"
        }, 
        {
            "location": "/helpers/Puppeteer/#haverequestheaders", 
            "text": "Set headers for all next requests  I.haveRequestHeaders({\n   'X-Sent-By': 'CodeceptJS',\n});  Parameters   customHeaders", 
            "title": "haveRequestHeaders"
        }, 
        {
            "location": "/helpers/Puppeteer/#movecursorto", 
            "text": "Moves cursor to element matched by locator.\nExtra shift can be set with offsetX and offsetY options  I.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);  Parameters   locator     offsetX    (optional, default  0 )  offsetY    (optional, default  0 )", 
            "title": "moveCursorTo"
        }, 
        {
            "location": "/helpers/Puppeteer/#opennewtab", 
            "text": "Open new tab and switch to it  I.openNewTab();", 
            "title": "openNewTab"
        }, 
        {
            "location": "/helpers/Puppeteer/#presskey", 
            "text": "Presses a key on a focused element.\nSpecial keys like 'Enter', 'Control',  etc \nwill be replaced with corresponding unicode.\nIf modifier key is used (Control, Command, Alt, Shift) in array, it will be released afterwards.  I.pressKey('Enter');\nI.pressKey(['Control','a']);  Parameters   key", 
            "title": "pressKey"
        }, 
        {
            "location": "/helpers/Puppeteer/#refreshpage", 
            "text": "Reload the current page.  `I.refreshPage();", 
            "title": "refreshPage"
        }, 
        {
            "location": "/helpers/Puppeteer/#resizewindow", 
            "text": "Resize the current window to provided width and height.\nFirst parameter can be set to  maximize  Parameters   width   or  maximize  height   Unlike other drivers Puppeteer changes the size of a viewport, not the window!\n    Puppeteer does not control the window of a browser so it can't adjust its real size.\n    It also can't maximize a window.", 
            "title": "resizeWindow"
        }, 
        {
            "location": "/helpers/Puppeteer/#rightclick", 
            "text": "Performs right click on an element matched by CSS or XPath.  Parameters   locator     context    (optional, default  null )", 
            "title": "rightClick"
        }, 
        {
            "location": "/helpers/Puppeteer/#savescreenshot", 
            "text": "Saves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder. \nOptionally resize the window to the full available page  scrollHeight  and  scrollWidth  to capture the entire page by passing  true  in as the second argument.  I.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png',true) \\\\resizes to available scrollHeight and scrollWidth before taking screenshot  Parameters   fileName     fullPage   (optional)", 
            "title": "saveScreenshot"
        }, 
        {
            "location": "/helpers/Puppeteer/#scrollpagetobottom", 
            "text": "Scroll page to the bottom  I.scrollPageToBottom();", 
            "title": "scrollPageToBottom"
        }, 
        {
            "location": "/helpers/Puppeteer/#scrollpagetotop", 
            "text": "Scroll page to the top  I.scrollPageToTop();", 
            "title": "scrollPageToTop"
        }, 
        {
            "location": "/helpers/Puppeteer/#scrollto", 
            "text": "Scrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options  I.scrollTo('footer');\nI.scrollTo('#submit', 5,5);  Parameters   locator     offsetX    (optional, default  0 )  offsetY    (optional, default  0 )", 
            "title": "scrollTo"
        }, 
        {
            "location": "/helpers/Puppeteer/#see", 
            "text": "Checks that a page contains a visible text.\nUse context parameter to narrow down the search.  I.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator  Parameters   text   expected on page  context   (optional) element located by CSS|Xpath|strict locator in which to search for text", 
            "title": "see"
        }, 
        {
            "location": "/helpers/Puppeteer/#seeattributesonelements", 
            "text": "Checks that all elements with given locator have given attributes.  I.seeAttributesOnElements('//form', {'method':  post });  Parameters   locator     attributes", 
            "title": "seeAttributesOnElements"
        }, 
        {
            "location": "/helpers/Puppeteer/#seecheckboxischecked", 
            "text": "Verifies that the specified checkbox is checked.  I.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "seeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Puppeteer/#seecookie", 
            "text": "Checks that cookie with given name exists.  I.seeCookie('Auth');  Parameters   name", 
            "title": "seeCookie"
        }, 
        {
            "location": "/helpers/Puppeteer/#seecsspropertiesonelements", 
            "text": "Checks that all elements with given locator have given CSS properties.  I.seeCssPropertiesOnElements('h3', { 'font-weight':  bold });  Parameters   locator     properties     cssProperties", 
            "title": "seeCssPropertiesOnElements"
        }, 
        {
            "location": "/helpers/Puppeteer/#seecurrenturlequals", 
            "text": "Checks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:  I.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');  Parameters   url", 
            "title": "seeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/Puppeteer/#seeelement", 
            "text": "Checks that a given Element is visible\nElement is located by CSS or XPath.  I.seeElement('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElement"
        }, 
        {
            "location": "/helpers/Puppeteer/#seeelementindom", 
            "text": "Checks that a given Element is present in the DOM\nElement is located by CSS or XPath.  I.seeElementInDOM('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElementInDOM"
        }, 
        {
            "location": "/helpers/Puppeteer/#seeincurrenturl", 
            "text": "Checks that current url contains a provided fragment.  I.seeInCurrentUrl('/register'); // we are on registration page  Parameters   url", 
            "title": "seeInCurrentUrl"
        }, 
        {
            "location": "/helpers/Puppeteer/#seeinfield", 
            "text": "Checks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.  I.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "seeInField"
        }, 
        {
            "location": "/helpers/Puppeteer/#seeinpopup", 
            "text": "Checks that the active JavaScript popup, as created by  window.alert|window.confirm|window.prompt , contains the\ngiven string.  Parameters   text", 
            "title": "seeInPopup"
        }, 
        {
            "location": "/helpers/Puppeteer/#seeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code.  I.seeInSource(' h1 Green eggs  amp; ham /h1 ');  Parameters   text", 
            "title": "seeInSource"
        }, 
        {
            "location": "/helpers/Puppeteer/#seeintitle", 
            "text": "Checks that title contains text.  Parameters   text", 
            "title": "seeInTitle"
        }, 
        {
            "location": "/helpers/Puppeteer/#seenumberofelements", 
            "text": "asserts that an element appears a given number of times in the DOM\nElement is located by label or name or CSS or XPath.  I.seeNumberOfElements('#submitBtn', 1);  Parameters   selector     num", 
            "title": "seeNumberOfElements"
        }, 
        {
            "location": "/helpers/Puppeteer/#seenumberofvisibleelements", 
            "text": "asserts that an element is visible a given number of times\nElement is located by CSS or XPath.  I.seeNumberOfVisibleElements('.buttons', 3);  Parameters   locator     num", 
            "title": "seeNumberOfVisibleElements"
        }, 
        {
            "location": "/helpers/Puppeteer/#seetextequals", 
            "text": "Checks that text is equal to provided one.  I.seeTextEquals('text', 'h1');  Parameters   text     context    (optional, default  null )", 
            "title": "seeTextEquals"
        }, 
        {
            "location": "/helpers/Puppeteer/#seetitleequals", 
            "text": "Checks that title is equal to provided one.  I.seeTitleEquals('Test title.');  Parameters   text", 
            "title": "seeTitleEquals"
        }, 
        {
            "location": "/helpers/Puppeteer/#selectoption", 
            "text": "Selects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.  I.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');  Provide an array for the second argument to select multiple options.  I.selectOption('Which OS do you use?', ['Android', 'iOS']);  Parameters   select   field located by label|name|CSS|XPath|strict locator  option", 
            "title": "selectOption"
        }, 
        {
            "location": "/helpers/Puppeteer/#setcookie", 
            "text": "Sets a cookie  I.setCookie({name: 'auth', value: true});  Parameters   cookie", 
            "title": "setCookie"
        }, 
        {
            "location": "/helpers/Puppeteer/#switchto", 
            "text": "Switches frame or in case of null locator reverts to parent.  Parameters   locator", 
            "title": "switchTo"
        }, 
        {
            "location": "/helpers/Puppeteer/#switchtonexttab", 
            "text": "Switch focus to a particular tab by its number. It waits tabs loading and then switch tab  I.switchToNextTab();\nI.switchToNextTab(2);  Parameters   num    (optional, default  1 )", 
            "title": "switchToNextTab"
        }, 
        {
            "location": "/helpers/Puppeteer/#switchtoprevioustab", 
            "text": "Switch focus to a particular tab by its number. It waits tabs loading and then switch tab  I.switchToPreviousTab();\nI.switchToPreviousTab(2);  Parameters   num    (optional, default  1 )", 
            "title": "switchToPreviousTab"
        }, 
        {
            "location": "/helpers/Puppeteer/#wait", 
            "text": "Pauses execution for a number of seconds.  I.wait(2); // wait 2 secs  Parameters   sec", 
            "title": "wait"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitfordetached", 
            "text": "Waits for an element to become not attached to the DOM on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForDetached('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForDetached"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitforelement", 
            "text": "Waits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForElement"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitforenabled", 
            "text": "Waits for element to become enabled (by default waits for 1sec).\nElement can be located by CSS or XPath.  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForEnabled"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitforfunction", 
            "text": "Waits for a function to return true (waits for 1 sec by default).\nRunning in browser context.  I.waitForFunction(fn[, [args[, timeout]])  I.waitForFunction(() =  window.requests == 0);\nI.waitForFunction(() =  window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) =  window.requests == count, [3], 5) // pass args and wait for 5 sec  Parameters   function   to be executed in browser context  args   arguments for function  fn     argsOrSec    (optional, default  null )  sec   time seconds to wait, 1 by default", 
            "title": "waitForFunction"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitforinvisible", 
            "text": "Waits for an element to be removed or become invisible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForInvisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForInvisible"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitfornavigation", 
            "text": "Waits for navigation to finish. By default takes configured  waitForNavigation  option.  See  Pupeteer's reference  Parameters   opts   Any", 
            "title": "waitForNavigation"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitforrequest", 
            "text": "Waits for a network request.  I.waitForRequest('http://example.com/resource');\nI.waitForRequest(request =  request.url() === 'http://example.com'   request.method() === 'GET');  Parameters   urlOrPredicate   Any    sec   Any", 
            "title": "waitForRequest"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitforresponse", 
            "text": "Waits for a network request.  I.waitForResponse('http://example.com/resource');\nI.waitForResponse(request =  request.url() === 'http://example.com'   request.method() === 'GET');  Parameters   urlOrPredicate   Any    sec   Any", 
            "title": "waitForResponse"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitfortext", 
            "text": "Waits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.  I.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');  Parameters   text   to wait for  sec   seconds to wait  context   element located by CSS|XPath|strict locator", 
            "title": "waitForText"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitforvalue", 
            "text": "Waits for the specified value to be in value attribute  I.waitForValue('//input',  GoodValue );  Parameters   field   input field  locator     value   expected value  sec   seconds to wait, 1 sec by default", 
            "title": "waitForValue"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitforvisible", 
            "text": "Waits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForVisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForVisible"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitinurl", 
            "text": "Waiting for the part of the URL to match the expected. Useful for SPA to understand that page was changed.  I.waitInUrl('/info', 2);  Parameters   urlPart     sec    (optional, default  null )", 
            "title": "waitInUrl"
        }, 
        {
            "location": "/helpers/Puppeteer/#waitnumberofvisibleelements", 
            "text": "Waits for a specified number of elements on the page  I.waitNumberOfVisibleElements('a', 3);  Parameters   locator     seconds     num     sec", 
            "title": "waitNumberOfVisibleElements"
        }, 
        {
            "location": "/helpers/Puppeteer/#waittohide", 
            "text": "Waits for an element to hide (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitToHide('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitToHide"
        }, 
        {
            "location": "/helpers/Puppeteer/#waituntil", 
            "text": "Waits for a function to return true (waits for 1sec by default).  I.waitUntil(() =  window.requests == 0);\nI.waitUntil(() =  window.requests == 0, 5);  Parameters   function   function which is executed in browser context.  fn     sec   time seconds to wait, 1 by default", 
            "title": "waitUntil"
        }, 
        {
            "location": "/helpers/Puppeteer/#waiturlequals", 
            "text": "Waits for the entire URL to match the expected  I.waitUrlEquals('/info', 2);\nI.waitUrlEquals('http://127.0.0.1:8000/info');  Parameters   urlPart     sec    (optional, default  null )", 
            "title": "waitUrlEquals"
        }, 
        {
            "location": "/helpers/Nightmare/", 
            "text": "Nightmare\n\n\nNightmare helper wraps \nNightmare\n library to provide\nfastest headless testing using Electron engine. Unlike Selenium-based drivers this uses\nChromium-based browser with Electron with lots of client side scripts, thus should be less stable and\nless trusted.\n\n\nRequires \nnightmare\n package to be installed.\n\n\nConfiguration\n\n\nThis helper should be configured in codecept.json\n\n\n\n\nurl\n - base url of website to be tested\n\n\nrestart\n (optional, default: true) - restart browser between tests.\n\n\ndisableScreenshots\n (optional, default: false)  - don't save screenshot on failure.\n\n\nuniqueScreenshotNames\n (optional, default: false)  - option to prevent screenshot override if you have scenarios with the same name in different suites.\n\n\nfullPageScreenshots\n (optional, default: false) - make full page screenshots on failure.\n\n\nkeepBrowserState\n (optional, default: false)  - keep browser state between tests when \nrestart\n set to false.\n\n\nkeepCookies\n (optional, default: false)  - keep cookies between tests when \nrestart\n set to false.\n\n\nwaitForAction\n: (optional) how long to wait after click, doubleClick or PressKey actions in ms. Default: 500.\n\n\nwaitForTimeout\n: (optional) default wait* timeout in ms. Default: 1000.\n\n\n\n\nwindowSize\n: (optional) default window size. Set a dimension like \n640x480\n.\n\n\n\n\n\n\noptions from \nNightmare configuration\n\n\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\n_locate\n\n\nLocate elements by different locator types, including strict locator.\nShould be used in custom helpers.\n\n\nThis method return promise with array of IDs of found elements.\nActual elements can be accessed inside \nevaluate\n by using \ncodeceptjs.fetchElement()\n\nclient-side function:\n\n\n// get an inner text of an element\n\nlet browser = this.helpers['Nightmare'].browser;\nlet value = this.helpers['Nightmare']._locate({name: 'password'}).then(function(els) {\n  return browser.evaluate(function(el) {\n    return codeceptjs.fetchElement(el).value;\n  }, els[0]);\n});\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\namOnPage\n\n\nOpens a web page in a browser. Requires relative or absolute url.\nIf url starts with \n/\n, opens a web page of a site defined in \nurl\n config parameter.\n\n\nI.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page\n\n\n\n\nParameters\n\n\n\n\nurl\n  url path or global urlIn a second argument a list of request headers can be passed:\njs\n    I.amOnPage('/auth', { 'x-my-custom-header': 'some value' })\n\n\nheaders\n   (optional, default \nnull\n)\n\n\n\n\nappendField\n\n\nAppends text to a input field or textarea.\nField is located by name, label, CSS or XPath\n\n\nI.appendField('#myTextField', 'appended');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  text value\n\n\n\n\nattachFile\n\n\nAttaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remote system (if tests are running remotely).\n\n\nI.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\npathToFile\n  local file path relative to codecept.json config file##### Limitations:-   works only with CSS selectors.\n\n\ndoesn't work if the Chromium DevTools panel is open (as Chromium allows only one attachment to the debugger at a time. \nSee more\n)\n\n\n\n\n\n\n\n\ncheckOption\n\n\nSelects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nfield\n  checkbox located by label\n\n\nname\n\n\nCSS\n\n\n\n\n\n\n\n\n\n\nclearCookie\n\n\nClears a cookie by name,\nif none provided clears all cookies\n\n\nI.clearCookie();\nI.clearCookie('test');\n\n\n\n\nParameters\n\n\n\n\ncookie\n  (optional)\n\n\n\n\nclearField\n\n\nClears a \ntextarea\n or text \ninput\n element's value.\n\n\nI.clearField('Email');\nI.clearField('user[email]');\nI.clearField('#email');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\nclick\n\n\nPerform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nlocator\n  clickable link or button located by text, or any element located by CSS\n\n\nXPath\n\n\nstrict locator\n\n\n\n\n\n\n\n\n\n\ndontSee\n\n\nOpposite to \nsee\n. Checks that a text is not present on a page.\nUse context parameter to narrow down the search.\n\n\nI.dontSee('Login'); // assume we are already logged in\n\n\n\n\nParameters\n\n\n\n\ntext\n  is not present\n\n\ncontext\n  (optional) element located by CSS|XPath|strict locator in which to perfrom search\n\n\n\n\ndontSeeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is not checked.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\ndontSeeCookie\n\n\nChecks that cookie with given name does not exist.\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\ndontSeeCurrentUrlEquals\n\n\nChecks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeElement\n\n\nOpposite to \nseeElement\n. Checks that element is not visible (or in DOM)\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeElementInDOM\n\n\nOpposite to \nseeElementInDOM\n. Checks that element is not on page.\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\n\n\ndontSeeInCurrentUrl\n\n\nChecks that current url does not contain a provided fragment.\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\ndontSeeInField\n\n\nChecks that value of input field or textare doesn't equal to given value\nOpposite to \nseeInField\n.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  is not expected to be a field value\n\n\n\n\ndontSeeInSource\n\n\nChecks that the current page contains the given string in its raw source code\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndontSeeInTitle\n\n\nChecks that title does not contain text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\ndoubleClick\n\n\nPerforms a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.\n\n\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\ncontext\n  \n\n\n\n\nexecuteAsyncScript\n\n\nExecutes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.\n\n\nExample: In Vue.js to make components completely rendered we are waiting for \nnextTick\n.\n\n\nI.executeAsyncScript(function(done) {\nVue.nextTick(done); // waiting for next tick\n});\n\n\n\n\nBy passing value to \ndone()\n function you can return values.\nAdditional arguments can be passed as well, while \ndone\n function is always last parameter in arguments list.\n\n\nlet val = await I.executeAsyncScript(function(url, done) {\n// in browser context\n$.ajax(url, { success: (data) =\n done(data); }\n}, 'http://ajax.callback.url/');\n\n\n\n\nParameters\n\n\n\n\nfn\n  function to be executed in browser context\n\n\n\n\nexecuteScript\n\n\nExecutes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use async function and await to receive results.\n\n\nExample with jQuery DatePicker:\n\n\n// change date of jQuery DatePicker\nI.executeScript(function() {\n// now we are inside browser context\n$('date').datetimepicker('setDate', new Date());\n});\n\n\n\n\nCan return values. Don't forget to use \nawait\n to get them.\n\n\nlet date = await I.executeScript(function(el) {\n// only basic types can be returned\nreturn $(el).datetimepicker('getDate').toString();\n}, '#date'); // passing jquery selector\n\n\n\n\nParameters\n\n\n\n\nfn\n  function to be executed in browser context\n\n\n\n\nfillField\n\n\nFills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.\n\n\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\ngrabAttributeFrom\n\n\nRetrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet hint = await I.grabAttributeFrom('#tooltip', 'title');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nattr\n  \n\n\n\n\ngrabCookie\n\n\nGets a cookie object by name\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');\n\n\n\n\nParameters\n\n\n\n\nname\n  Returns cookie in JSON format. If name not passed returns all cookies for this domain.Multiple cookies can be received by passing query object:\njs\n    I.grabCookie({ secure: true});\nIf you'd like get all cookies for all urls, use: \n.grabCookie({ url: null }).\n\n\n\n\ngrabCurrentUrl\n\n\nGet current URL from browser.\nResumes test execution, so should be used inside an async function.\n\n\nlet url = await I.grabCurrentUrl();\nconsole.log(`Current URL is [${url}]`);\n\n\n\n\ngrabHAR\n\n\nGet HAR\n\n\nlet har = await I.grabHAR();\nfs.writeFileSync('sample.har', JSON.stringify({log: har}));\n\n\n\n\ngrabNumberOfVisibleElements\n\n\nGrab number of visible elements by locator\n\n\nI.grabNumberOfVisibleElements('p');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\n\n\ngrabPageScrollPosition\n\n\nRetrieves a page scroll position and returns it to test.\nResumes test execution, so \nshould be used inside an async function with \nawait\n operator.\n\n\nlet { x, y } = await I.grabPageScrollPosition();\n\n\n\n\ngrabTextFrom\n\n\nRetrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet pin = await I.grabTextFrom('#pin');\n\n\n\n\nIf multiple elements found returns an array of texts.\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\n\n\ngrabTitle\n\n\nRetrieves a page title and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet title = await I.grabTitle();\n\n\n\n\ngrabValueFrom\n\n\nRetrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async function with \nawait\n operator.\n\n\nlet email = await I.grabValueFrom('input[name=email]');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\n\n\nhaveHeader\n\n\nAdd a header override for all HTTP requests. If header is undefined, the header overrides will be reset.\n\n\nI.haveHeader('x-my-custom-header', 'some value');\nI.haveHeader(); // clear headers\n\n\n\n\nParameters\n\n\n\n\nheader\n  \n\n\nvalue\n  \n\n\n\n\nmoveCursorTo\n\n\nMoves cursor to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\n\n\nI.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\noffsetX\n   (optional, default \n0\n)\n\n\noffsetY\n   (optional, default \n0\n)\n\n\n\n\npressKey\n\n\nSends \ninput event\n on a page.\nCan submit special keys like 'Enter', 'Backspace', etc\n\n\nParameters\n\n\n\n\nkey\n  \n\n\n\n\nrefresh\n\n\nReload the page\n\n\nrefreshPage\n\n\nReload the current page.\n\n\n`I.refreshPage();\n\n\n\n\nresizeWindow\n\n\nResize the current window to provided width and height.\nFirst parameter can be set to \nmaximize\n\n\nParameters\n\n\n\n\nwidth\n  or \nmaximize\n\n\nheight\n  \n\n\n\n\nsaveScreenshot\n\n\nSaves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder. \nOptionally resize the window to the full available page \nscrollHeight\n and \nscrollWidth\n to capture the entire page by passing \ntrue\n in as the second argument.\n\n\nI.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png',true) \\\\resizes to available scrollHeight and scrollWidth before taking screenshot\n\n\n\n\nParameters\n\n\n\n\nfileName\n  \n\n\nfullPage\n  (optional)\n\n\n\n\nscrollPageToBottom\n\n\nScroll page to the bottom\n\n\nI.scrollPageToBottom();\n\n\n\n\nscrollPageToTop\n\n\nScroll page to the top\n\n\nI.scrollPageToTop();\n\n\n\n\nscrollTo\n\n\nScrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options\n\n\nI.scrollTo('footer');\nI.scrollTo('#submit', 5,5);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\noffsetX\n   (optional, default \n0\n)\n\n\noffsetY\n   (optional, default \n0\n)\n\n\n\n\nsee\n\n\nChecks that a page contains a visible text.\nUse context parameter to narrow down the search.\n\n\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n\n\n\n\nParameters\n\n\n\n\ntext\n  expected on page\n\n\ncontext\n  (optional) element located by CSS|Xpath|strict locator in which to search for text\n\n\n\n\nseeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is checked.\n\n\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\n\n\nseeCookie\n\n\nChecks that cookie with given name exists.\n\n\nI.seeCookie('Auth');\n\n\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\nseeCurrentUrlEquals\n\n\nChecks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:\n\n\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeElement\n\n\nChecks that a given Element is visible\nElement is located by CSS or XPath.\n\n\nI.seeElement('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeElementInDOM\n\n\nChecks that a given Element is present in the DOM\nElement is located by CSS or XPath.\n\n\nI.seeElementInDOM('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\n\n\nseeInCurrentUrl\n\n\nChecks that current url contains a provided fragment.\n\n\nI.seeInCurrentUrl('/register'); // we are on registration page\n\n\n\n\nParameters\n\n\n\n\nurl\n  \n\n\n\n\nseeInField\n\n\nChecks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.\n\n\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\nseeInSource\n\n\nChecks that the current page contains the given string in its raw source code.\n\n\nI.seeInSource('\nh1\nGreen eggs \namp; ham\n/h1\n');\n\n\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeInTitle\n\n\nChecks that title contains text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\n\n\nseeNumberOfElements\n\n\nasserts that an element appears a given number of times in the DOM\nElement is located by label or name or CSS or XPath.\n\n\nI.seeNumberOfElements('#submitBtn', 1);\n\n\n\n\nParameters\n\n\n\n\nselector\n  \n\n\nnum\n  \n\n\n\n\nseeNumberOfVisibleElements\n\n\nasserts that an element is visible a given number of times\nElement is located by CSS or XPath.\n\n\nI.seeNumberOfVisibleElements('.buttons', 3);\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nnum\n  \n\n\n\n\nselectOption\n\n\nSelects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.\n\n\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n\n\n\nProvide an array for the second argument to select multiple options.\n\n\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n\n\n\n\nParameters\n\n\n\n\nselect\n  field located by label|name|CSS|XPath|strict locator\n\n\noption\n  \n\n\n\n\nsetCookie\n\n\nSets a cookie\n\n\nI.setCookie({name: 'auth', value: true});\n\n\n\n\nParameters\n\n\n\n\ncookie\n  Wrapper for \n.cookies.set(cookie)\n.\n    \nSee more\n\n\n\n\ntriggerMouseEvent\n\n\nSends \ninput event\n on a page.\nShould be a mouse event like:\n {\ntype: 'mouseDown',\nx: args.x,\ny: args.y,\nbutton: \"left\"\n}\n\n\nParameters\n\n\n\n\nevent\n  \n\n\n\n\nwait\n\n\nPauses execution for a number of seconds.\n\n\nI.wait(2); // wait 2 secs\n\n\n\n\nParameters\n\n\n\n\nsec\n  \n\n\n\n\nwaitForDetached\n\n\nWaits for an element to become not attached to the DOM on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForDetached('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForElement\n\n\nWaits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForFunction\n\n\nWaits for a function to return true (waits for 1 sec by default).\nRunning in browser context.\n\n\nI.waitForFunction(fn[, [args[, timeout]])\n\n\n\n\nI.waitForFunction(() =\n window.requests == 0);\nI.waitForFunction(() =\n window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) =\n window.requests == count, [3], 5) // pass args and wait for 5 sec\n\n\n\n\nParameters\n\n\n\n\nfunction\n  to be executed in browser context\n\n\nargs\n  arguments for function\n\n\nfn\n  \n\n\nargsOrSec\n   (optional, default \nnull\n)\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForInvisible\n\n\nWaits for an element to be removed or become invisible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForInvisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitForText\n\n\nWaits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.\n\n\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n\n\n\n\nParameters\n\n\n\n\ntext\n  to wait for\n\n\nsec\n  seconds to wait\n\n\ncontext\n  element located by CSS|XPath|strict locator\n\n\n\n\nwaitForVisible\n\n\nWaits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitForVisible('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default\n\n\n\n\nwaitToHide\n\n\nWaits for an element to hide (by default waits for 1sec).\nElement can be located by CSS or XPath.\n\n\nI.waitToHide('#popup');\n\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nsec\n  time seconds to wait, 1 by default", 
            "title": "Nightmare"
        }, 
        {
            "location": "/helpers/Nightmare/#nightmare", 
            "text": "Nightmare helper wraps  Nightmare  library to provide\nfastest headless testing using Electron engine. Unlike Selenium-based drivers this uses\nChromium-based browser with Electron with lots of client side scripts, thus should be less stable and\nless trusted.  Requires  nightmare  package to be installed.", 
            "title": "Nightmare"
        }, 
        {
            "location": "/helpers/Nightmare/#configuration", 
            "text": "This helper should be configured in codecept.json   url  - base url of website to be tested  restart  (optional, default: true) - restart browser between tests.  disableScreenshots  (optional, default: false)  - don't save screenshot on failure.  uniqueScreenshotNames  (optional, default: false)  - option to prevent screenshot override if you have scenarios with the same name in different suites.  fullPageScreenshots  (optional, default: false) - make full page screenshots on failure.  keepBrowserState  (optional, default: false)  - keep browser state between tests when  restart  set to false.  keepCookies  (optional, default: false)  - keep cookies between tests when  restart  set to false.  waitForAction : (optional) how long to wait after click, doubleClick or PressKey actions in ms. Default: 500.  waitForTimeout : (optional) default wait* timeout in ms. Default: 1000.   windowSize : (optional) default window size. Set a dimension like  640x480 .    options from  Nightmare configuration    Parameters   config", 
            "title": "Configuration"
        }, 
        {
            "location": "/helpers/Nightmare/#_locate", 
            "text": "Locate elements by different locator types, including strict locator.\nShould be used in custom helpers.  This method return promise with array of IDs of found elements.\nActual elements can be accessed inside  evaluate  by using  codeceptjs.fetchElement() \nclient-side function:  // get an inner text of an element\n\nlet browser = this.helpers['Nightmare'].browser;\nlet value = this.helpers['Nightmare']._locate({name: 'password'}).then(function(els) {\n  return browser.evaluate(function(el) {\n    return codeceptjs.fetchElement(el).value;\n  }, els[0]);\n});  Parameters   locator", 
            "title": "_locate"
        }, 
        {
            "location": "/helpers/Nightmare/#amonpage", 
            "text": "Opens a web page in a browser. Requires relative or absolute url.\nIf url starts with  / , opens a web page of a site defined in  url  config parameter.  I.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page  Parameters   url   url path or global urlIn a second argument a list of request headers can be passed: js\n    I.amOnPage('/auth', { 'x-my-custom-header': 'some value' })  headers    (optional, default  null )", 
            "title": "amOnPage"
        }, 
        {
            "location": "/helpers/Nightmare/#appendfield", 
            "text": "Appends text to a input field or textarea.\nField is located by name, label, CSS or XPath  I.appendField('#myTextField', 'appended');  Parameters   field   located by label|name|CSS|XPath|strict locator  value   text value", 
            "title": "appendField"
        }, 
        {
            "location": "/helpers/Nightmare/#attachfile", 
            "text": "Attaches a file to element located by label, name, CSS or XPath\nPath to file is relative current codecept directory (where codecept.json is located).\nFile will be uploaded to remote system (if tests are running remotely).  I.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');  Parameters   locator   field located by label|name|CSS|XPath|strict locator  pathToFile   local file path relative to codecept.json config file##### Limitations:-   works only with CSS selectors.  doesn't work if the Chromium DevTools panel is open (as Chromium allows only one attachment to the debugger at a time.  See more )", 
            "title": "attachFile"
        }, 
        {
            "location": "/helpers/Nightmare/#checkoption", 
            "text": "Selects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.  The second parameter is a context (CSS or XPath locator) to narrow the search.  I.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');  Parameters     -    field   checkbox located by label  name  CSS", 
            "title": "checkOption"
        }, 
        {
            "location": "/helpers/Nightmare/#clearcookie", 
            "text": "Clears a cookie by name,\nif none provided clears all cookies  I.clearCookie();\nI.clearCookie('test');  Parameters   cookie   (optional)", 
            "title": "clearCookie"
        }, 
        {
            "location": "/helpers/Nightmare/#clearfield", 
            "text": "Clears a  textarea  or text  input  element's value.  I.clearField('Email');\nI.clearField('user[email]');\nI.clearField('#email');  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "clearField"
        }, 
        {
            "location": "/helpers/Nightmare/#click", 
            "text": "Perform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.  The second parameter is a context (CSS or XPath locator) to narrow the search.  // simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});  Parameters     -    locator   clickable link or button located by text, or any element located by CSS  XPath  strict locator", 
            "title": "click"
        }, 
        {
            "location": "/helpers/Nightmare/#dontsee", 
            "text": "Opposite to  see . Checks that a text is not present on a page.\nUse context parameter to narrow down the search.  I.dontSee('Login'); // assume we are already logged in  Parameters   text   is not present  context   (optional) element located by CSS|XPath|strict locator in which to perfrom search", 
            "title": "dontSee"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseecheckboxischecked", 
            "text": "Verifies that the specified checkbox is not checked.  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "dontSeeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseecookie", 
            "text": "Checks that cookie with given name does not exist.  Parameters   name", 
            "title": "dontSeeCookie"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseecurrenturlequals", 
            "text": "Checks that current url is not equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.  Parameters   url", 
            "title": "dontSeeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeelement", 
            "text": "Opposite to  seeElement . Checks that element is not visible (or in DOM)  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElement"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeelementindom", 
            "text": "Opposite to  seeElementInDOM . Checks that element is not on page.  Parameters   locator   located by CSS|XPath|Strict locator", 
            "title": "dontSeeElementInDOM"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeincurrenturl", 
            "text": "Checks that current url does not contain a provided fragment.  Parameters   url", 
            "title": "dontSeeInCurrentUrl"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeinfield", 
            "text": "Checks that value of input field or textare doesn't equal to given value\nOpposite to  seeInField .  Parameters   field   located by label|name|CSS|XPath|strict locator  value   is not expected to be a field value", 
            "title": "dontSeeInField"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code  Parameters   text", 
            "title": "dontSeeInSource"
        }, 
        {
            "location": "/helpers/Nightmare/#dontseeintitle", 
            "text": "Checks that title does not contain text.  Parameters   text", 
            "title": "dontSeeInTitle"
        }, 
        {
            "location": "/helpers/Nightmare/#doubleclick", 
            "text": "Performs a double-click on an element matched by link|button|label|CSS or XPath.\nContext can be specified as second parameter to narrow search.  I.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');  Parameters   locator     context", 
            "title": "doubleClick"
        }, 
        {
            "location": "/helpers/Nightmare/#executeasyncscript", 
            "text": "Executes async script on page.\nProvided function should execute a passed callback (as first argument) to signal it is finished.  Example: In Vue.js to make components completely rendered we are waiting for  nextTick .  I.executeAsyncScript(function(done) {\nVue.nextTick(done); // waiting for next tick\n});  By passing value to  done()  function you can return values.\nAdditional arguments can be passed as well, while  done  function is always last parameter in arguments list.  let val = await I.executeAsyncScript(function(url, done) {\n// in browser context\n$.ajax(url, { success: (data) =  done(data); }\n}, 'http://ajax.callback.url/');  Parameters   fn   function to be executed in browser context", 
            "title": "executeAsyncScript"
        }, 
        {
            "location": "/helpers/Nightmare/#executescript", 
            "text": "Executes sync script on a page.\nPass arguments to function as additional parameters.\nWill return execution result to a test.\nIn this case you should use async function and await to receive results.  Example with jQuery DatePicker:  // change date of jQuery DatePicker\nI.executeScript(function() {\n// now we are inside browser context\n$('date').datetimepicker('setDate', new Date());\n});  Can return values. Don't forget to use  await  to get them.  let date = await I.executeScript(function(el) {\n// only basic types can be returned\nreturn $(el).datetimepicker('getDate').toString();\n}, '#date'); // passing jquery selector  Parameters   fn   function to be executed in browser context", 
            "title": "executeScript"
        }, 
        {
            "location": "/helpers/Nightmare/#fillfield", 
            "text": "Fills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.  // by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "fillField"
        }, 
        {
            "location": "/helpers/Nightmare/#grabattributefrom", 
            "text": "Retrieves an attribute from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let hint = await I.grabAttributeFrom('#tooltip', 'title');  Parameters   locator   element located by CSS|XPath|strict locator  attr", 
            "title": "grabAttributeFrom"
        }, 
        {
            "location": "/helpers/Nightmare/#grabcookie", 
            "text": "Gets a cookie object by name\nResumes test execution, so  should be used inside async with  await  operator.  let cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');  Parameters   name   Returns cookie in JSON format. If name not passed returns all cookies for this domain.Multiple cookies can be received by passing query object: js\n    I.grabCookie({ secure: true}); If you'd like get all cookies for all urls, use:  .grabCookie({ url: null }).", 
            "title": "grabCookie"
        }, 
        {
            "location": "/helpers/Nightmare/#grabcurrenturl", 
            "text": "Get current URL from browser.\nResumes test execution, so should be used inside an async function.  let url = await I.grabCurrentUrl();\nconsole.log(`Current URL is [${url}]`);", 
            "title": "grabCurrentUrl"
        }, 
        {
            "location": "/helpers/Nightmare/#grabhar", 
            "text": "Get HAR  let har = await I.grabHAR();\nfs.writeFileSync('sample.har', JSON.stringify({log: har}));", 
            "title": "grabHAR"
        }, 
        {
            "location": "/helpers/Nightmare/#grabnumberofvisibleelements", 
            "text": "Grab number of visible elements by locator  I.grabNumberOfVisibleElements('p');  Parameters   locator", 
            "title": "grabNumberOfVisibleElements"
        }, 
        {
            "location": "/helpers/Nightmare/#grabpagescrollposition", 
            "text": "Retrieves a page scroll position and returns it to test.\nResumes test execution, so  should be used inside an async function with  await  operator.  let { x, y } = await I.grabPageScrollPosition();", 
            "title": "grabPageScrollPosition"
        }, 
        {
            "location": "/helpers/Nightmare/#grabtextfrom", 
            "text": "Retrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let pin = await I.grabTextFrom('#pin');  If multiple elements found returns an array of texts.  Parameters   locator   element located by CSS|XPath|strict locator", 
            "title": "grabTextFrom"
        }, 
        {
            "location": "/helpers/Nightmare/#grabtitle", 
            "text": "Retrieves a page title and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let title = await I.grabTitle();", 
            "title": "grabTitle"
        }, 
        {
            "location": "/helpers/Nightmare/#grabvaluefrom", 
            "text": "Retrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async function with  await  operator.  let email = await I.grabValueFrom('input[name=email]');  Parameters   locator   field located by label|name|CSS|XPath|strict locator", 
            "title": "grabValueFrom"
        }, 
        {
            "location": "/helpers/Nightmare/#haveheader", 
            "text": "Add a header override for all HTTP requests. If header is undefined, the header overrides will be reset.  I.haveHeader('x-my-custom-header', 'some value');\nI.haveHeader(); // clear headers  Parameters   header     value", 
            "title": "haveHeader"
        }, 
        {
            "location": "/helpers/Nightmare/#movecursorto", 
            "text": "Moves cursor to element matched by locator.\nExtra shift can be set with offsetX and offsetY options  I.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);  Parameters   locator     offsetX    (optional, default  0 )  offsetY    (optional, default  0 )", 
            "title": "moveCursorTo"
        }, 
        {
            "location": "/helpers/Nightmare/#presskey", 
            "text": "Sends  input event  on a page.\nCan submit special keys like 'Enter', 'Backspace', etc  Parameters   key", 
            "title": "pressKey"
        }, 
        {
            "location": "/helpers/Nightmare/#refresh", 
            "text": "Reload the page", 
            "title": "refresh"
        }, 
        {
            "location": "/helpers/Nightmare/#refreshpage", 
            "text": "Reload the current page.  `I.refreshPage();", 
            "title": "refreshPage"
        }, 
        {
            "location": "/helpers/Nightmare/#resizewindow", 
            "text": "Resize the current window to provided width and height.\nFirst parameter can be set to  maximize  Parameters   width   or  maximize  height", 
            "title": "resizeWindow"
        }, 
        {
            "location": "/helpers/Nightmare/#savescreenshot", 
            "text": "Saves a screenshot to ouput folder (set in codecept.json).\nFilename is relative to output folder. \nOptionally resize the window to the full available page  scrollHeight  and  scrollWidth  to capture the entire page by passing  true  in as the second argument.  I.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png',true) \\\\resizes to available scrollHeight and scrollWidth before taking screenshot  Parameters   fileName     fullPage   (optional)", 
            "title": "saveScreenshot"
        }, 
        {
            "location": "/helpers/Nightmare/#scrollpagetobottom", 
            "text": "Scroll page to the bottom  I.scrollPageToBottom();", 
            "title": "scrollPageToBottom"
        }, 
        {
            "location": "/helpers/Nightmare/#scrollpagetotop", 
            "text": "Scroll page to the top  I.scrollPageToTop();", 
            "title": "scrollPageToTop"
        }, 
        {
            "location": "/helpers/Nightmare/#scrollto", 
            "text": "Scrolls to element matched by locator.\nExtra shift can be set with offsetX and offsetY options  I.scrollTo('footer');\nI.scrollTo('#submit', 5,5);  Parameters   locator     offsetX    (optional, default  0 )  offsetY    (optional, default  0 )", 
            "title": "scrollTo"
        }, 
        {
            "location": "/helpers/Nightmare/#see", 
            "text": "Checks that a page contains a visible text.\nUse context parameter to narrow down the search.  I.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator  Parameters   text   expected on page  context   (optional) element located by CSS|Xpath|strict locator in which to search for text", 
            "title": "see"
        }, 
        {
            "location": "/helpers/Nightmare/#seecheckboxischecked", 
            "text": "Verifies that the specified checkbox is checked.  I.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});  Parameters   field   located by label|name|CSS|XPath|strict locator", 
            "title": "seeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Nightmare/#seecookie", 
            "text": "Checks that cookie with given name exists.  I.seeCookie('Auth');  Parameters   name", 
            "title": "seeCookie"
        }, 
        {
            "location": "/helpers/Nightmare/#seecurrenturlequals", 
            "text": "Checks that current url is equal to provided one.\nIf a relative url provided, a configured url will be prepended to it.\nSo both examples will work:  I.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');  Parameters   url", 
            "title": "seeCurrentUrlEquals"
        }, 
        {
            "location": "/helpers/Nightmare/#seeelement", 
            "text": "Checks that a given Element is visible\nElement is located by CSS or XPath.  I.seeElement('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElement"
        }, 
        {
            "location": "/helpers/Nightmare/#seeelementindom", 
            "text": "Checks that a given Element is present in the DOM\nElement is located by CSS or XPath.  I.seeElementInDOM('#modal');  Parameters   locator   located by CSS|XPath|strict locator", 
            "title": "seeElementInDOM"
        }, 
        {
            "location": "/helpers/Nightmare/#seeincurrenturl", 
            "text": "Checks that current url contains a provided fragment.  I.seeInCurrentUrl('/register'); // we are on registration page  Parameters   url", 
            "title": "seeInCurrentUrl"
        }, 
        {
            "location": "/helpers/Nightmare/#seeinfield", 
            "text": "Checks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.  I.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "seeInField"
        }, 
        {
            "location": "/helpers/Nightmare/#seeinsource", 
            "text": "Checks that the current page contains the given string in its raw source code.  I.seeInSource(' h1 Green eggs  amp; ham /h1 ');  Parameters   text", 
            "title": "seeInSource"
        }, 
        {
            "location": "/helpers/Nightmare/#seeintitle", 
            "text": "Checks that title contains text.  Parameters   text", 
            "title": "seeInTitle"
        }, 
        {
            "location": "/helpers/Nightmare/#seenumberofelements", 
            "text": "asserts that an element appears a given number of times in the DOM\nElement is located by label or name or CSS or XPath.  I.seeNumberOfElements('#submitBtn', 1);  Parameters   selector     num", 
            "title": "seeNumberOfElements"
        }, 
        {
            "location": "/helpers/Nightmare/#seenumberofvisibleelements", 
            "text": "asserts that an element is visible a given number of times\nElement is located by CSS or XPath.  I.seeNumberOfVisibleElements('.buttons', 3);  Parameters   locator     num", 
            "title": "seeNumberOfVisibleElements"
        }, 
        {
            "location": "/helpers/Nightmare/#selectoption", 
            "text": "Selects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.  I.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');  Provide an array for the second argument to select multiple options.  I.selectOption('Which OS do you use?', ['Android', 'iOS']);  Parameters   select   field located by label|name|CSS|XPath|strict locator  option", 
            "title": "selectOption"
        }, 
        {
            "location": "/helpers/Nightmare/#setcookie", 
            "text": "Sets a cookie  I.setCookie({name: 'auth', value: true});  Parameters   cookie   Wrapper for  .cookies.set(cookie) .\n     See more", 
            "title": "setCookie"
        }, 
        {
            "location": "/helpers/Nightmare/#triggermouseevent", 
            "text": "Sends  input event  on a page.\nShould be a mouse event like:\n {\ntype: 'mouseDown',\nx: args.x,\ny: args.y,\nbutton: \"left\"\n}  Parameters   event", 
            "title": "triggerMouseEvent"
        }, 
        {
            "location": "/helpers/Nightmare/#wait", 
            "text": "Pauses execution for a number of seconds.  I.wait(2); // wait 2 secs  Parameters   sec", 
            "title": "wait"
        }, 
        {
            "location": "/helpers/Nightmare/#waitfordetached", 
            "text": "Waits for an element to become not attached to the DOM on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForDetached('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForDetached"
        }, 
        {
            "location": "/helpers/Nightmare/#waitforelement", 
            "text": "Waits for element to be present on page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForElement"
        }, 
        {
            "location": "/helpers/Nightmare/#waitforfunction", 
            "text": "Waits for a function to return true (waits for 1 sec by default).\nRunning in browser context.  I.waitForFunction(fn[, [args[, timeout]])  I.waitForFunction(() =  window.requests == 0);\nI.waitForFunction(() =  window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) =  window.requests == count, [3], 5) // pass args and wait for 5 sec  Parameters   function   to be executed in browser context  args   arguments for function  fn     argsOrSec    (optional, default  null )  sec   time seconds to wait, 1 by default", 
            "title": "waitForFunction"
        }, 
        {
            "location": "/helpers/Nightmare/#waitforinvisible", 
            "text": "Waits for an element to be removed or become invisible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForInvisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForInvisible"
        }, 
        {
            "location": "/helpers/Nightmare/#waitfortext", 
            "text": "Waits for a text to appear (by default waits for 1sec).\nElement can be located by CSS or XPath.\nNarrow down search results by providing context.  I.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');  Parameters   text   to wait for  sec   seconds to wait  context   element located by CSS|XPath|strict locator", 
            "title": "waitForText"
        }, 
        {
            "location": "/helpers/Nightmare/#waitforvisible", 
            "text": "Waits for an element to become visible on a page (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitForVisible('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitForVisible"
        }, 
        {
            "location": "/helpers/Nightmare/#waittohide", 
            "text": "Waits for an element to hide (by default waits for 1sec).\nElement can be located by CSS or XPath.  I.waitToHide('#popup');  Parameters   locator   element located by CSS|XPath|strict locator  sec   time seconds to wait, 1 by default", 
            "title": "waitToHide"
        }, 
        {
            "location": "/helpers/Appium/", 
            "text": "Appium\n\n\nAppium helper extends \nWebriverIO\n helper.\n It supports all browser methods and also includes special methods for mobile apps testing.\n You can use this helper to test Web on desktop and mobile devices and mobile apps.\n\n\nAppium Installation\n\n\nAppium is an open source test automation framework for use with native, hybrid and mobile web apps that implements the WebDriver protocol.\nIt allows you to run Selenium tests on mobile devices and also test native, hybrid and mobile web apps.\n\n\nDownload and install \nAppium\n\n\nnpm install -g appium\n\n\n\n\nLaunch the daemon: \nappium\n\n\nHelper configuration\n\n\nThis helper should be configured in codecept.json or codecept.conf.js\n\n\n\n\napp\n: Application path. Local path or remote URL to an .ipa or .apk file, or a .zip containing one of these. Alias to desiredCapabilities.appPackage\n\n\nhost\n: (default: 'localhost') Appium host\n\n\nport\n: (default: '4723') Appium port\n\n\nplatform\n: (Android or IOS), which mobile OS to use; alias to desiredCapabilities.platformName\n\n\nrestart\n: restart browser or app between tests (default: true), if set to false cookies will be cleaned but browser window will be kept and for apps nothing will be changed.\n\n\ndesiredCapabilities\n: [], Appium capabilities, see below\n\n\nplatformName\n - Which mobile OS platform to use\n\n\nappPackage\n - Java package of the Android app you want to run\n\n\nappActivity\n - Activity name for the Android activity you want to launch from your package.\n\n\ndeviceName\n: The kind of mobile device or emulator to use\n\n\nplatformVersion\n: Mobile OS version\n\n\napp\n - The absolute local path or remote http URL to an .ipa or .apk file, or a .zip containing one of these. Appium will attempt to install this app binary on the appropriate device first.\n\n\nbrowserName\n: Name of mobile web browser to automate. Should be an empty string if automating an app instead.\n\n\n\n\n\n\n\n\nExample:\n\n\n{\n  helpers: {\n      Appium: {\n          platform: \nAndroid\n,\n          desiredCapabilities: {\n              appPackage: \ncom.example.android.myApp\n,\n              appActivity: \nMainActivity\n,\n              deviceName: \nOnePlus3\n,\n              platformVersion: \n6.0.1\n\n          }\n      }\n    }\n}\n\n\n\n\nAdditional configuration params can be used from \nhttps://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md\n\n\nAccess From Helpers\n\n\nReceive a Appium client from a custom helper by accessing \nbrowser\n property:\n\n\nlet browser = this.helpers['Appium'].browser\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\n_switchToContext\n\n\nSwitch to the specified context.\n\n\nParameters\n\n\n\n\ncontext\n  the context to switch to\n\n\n\n\nappendField\n\n\nAppends text to a input field or textarea.\nField is located by name, label, CSS or XPath\n\n\nI.appendField('#myTextField', 'appended');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  text value\n\n\n\n\ncheckOption\n\n\nSelects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\n-   \nfield\n  checkbox located by label\n\n\nname\n\n\nCSS\n\n\n\n\n\n\n\n\n\n\n-   \ncheckbox\n\n\n\n\n\n\n\n\n\n\n\n\nclick\n\n\nPerform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.\n\n\nThe second parameter is a context (CSS or XPath locator) to narrow the search.\n\n\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n\n\n\n\nParameters\n\n\n\n\nlocator\n  clickable link or button located by text, or any element located by CSS|XPath|strict locator\n\n\nbutton\n  \n\n\ncontext\n  (optional) element to search in CSS|XPath|Strict locator\n\n\n\n\ncloseApp\n\n\nClose the given application.\n\n\nI.closeApp();\n\n\n\n\nAppium: support only iOS\n\n\nconstructor\n\n\nAppium Special Methods for Mobile only\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\ndontSee\n\n\nOpposite to \nsee\n. Checks that a text is not present on a page.\nUse context parameter to narrow down the search.\n\n\nI.dontSee('Login'); // assume we are already logged in\n\n\n\n\nParameters\n\n\n\n\ntext\n  is not present\n\n\ncontext\n  (optional) element located by CSS|XPath|strict locator in which to perfrom search\n\n\n\n\ndontSeeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is not checked.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\ncheckbox\n  \n\n\n\n\ndontSeeElement\n\n\nOpposite to \nseeElement\n. Checks that element is not visible (or in DOM)\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|Strict locator\n\n\nel\n  \n\n\ncontext\n  \n\n\n\n\ndontSeeInField\n\n\nChecks that value of input field or textare doesn't equal to given value\nOpposite to \nseeInField\n.\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  is not expected to be a field value\n\n\n\n\nfillField\n\n\nFills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.\n\n\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\ngrabAllContexts\n\n\nGet list of all available contexts\n\n\nlet contexts = await I.grabAllContexts();\n\n\n\nAppium: support Android and iOS\n\n\ngrabContext\n\n\nRetrieve current context\n\n\nlet context = await I.grabContext();\n\n\n\n\nAppium: support Android and iOS\n\n\ngrabCurrentActivity\n\n\nGet current device activity.\n\n\nlet activity = await I.grabCurrentActivity();\n\n\n\n\nAppium: support only Android\n\n\ngrabNetworkConnection\n\n\nGet information about the current network connection (Data/WIFI/Airplane).\nThe actual server value will be a number. However WebdriverIO additional\nproperties to the response object to allow easier assertions.\n\n\nlet con = await I.grabNetworkConnection();\n\n\n\n\nAppium: support only Android\n\n\ngrabOrientation\n\n\nGet current orientation.\n\n\nlet orientation = await I.grabOrientation();\n\n\n\n\nAppium: support Android and iOS\n\n\ngrabSettings\n\n\nGet all the currently specified settings.\n\n\nlet settings = await I.grabSettings();\n\n\n\n\nAppium: support Android and iOS\n\n\ngrabTextFrom\n\n\nRetrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async with \nawait\n operator.\n\n\nlet pin = await I.grabTextFrom('#pin');\n\n\n\n\nIf multiple elements found returns an array of texts.\n\n\nParameters\n\n\n\n\nlocator\n  element located by CSS|XPath|strict locator\n\n\nel\n  \n\n\n\n\ngrabValueFrom\n\n\nRetrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so \nshould be used inside async function with \nawait\n operator.\n\n\nlet email = await I.grabValueFrom('input[name=email]');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  field located by label|name|CSS|XPath|strict locator\n\n\nel\n  \n\n\n\n\nhideDeviceKeyboard\n\n\nHide the keyboard.\n\n\n// taps outside to hide keyboard per default\nI.hideDeviceKeyboard();\nI.hideDeviceKeyboard('tapOutside');\n\n// or by pressing key\nI.hideDeviceKeyboard('pressKey', 'Done');\n\n\n\n\nParameters\n\n\n\n\nstrategy\n  desired strategy to close keyboard (\u2018tapOutside\u2019 or \u2018pressKey\u2019)Appium: support Android and iOS\n\n\nkey\n  \n\n\n\n\ninstallApp\n\n\nInstall an app on device.\n\n\nI.installApp('/path/to/file.apk');\n\n\n\n\nParameters\n\n\n\n\npath\n  path to apk fileAppium: support only Android\n\n\n\n\nmakeTouchAction\n\n\nThe Touch Action API provides the basis of all gestures that can be\nautomated in Appium. At its core is the ability to chain together ad hoc\nindividual actions, which will then be applied to an element in the\napplication on the device.\n\nSee complete documentation\n\n\nI.makeTouchAction(\n~buttonStartWebviewCD\n, 'tap');\n\n\n\n\nAppium: support Android and iOS\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\naction\n  \n\n\n\n\nopenNotifications\n\n\nOpen the notifications panel on the device.\n\n\nI.openNotifications();\n\n\n\n\nAppium: support only Android\n\n\npullFile\n\n\nPulls a file from the device.\n\n\nI.pullFile('/storage/emulated/0/DCIM/logo.png', 'my/path');\n// save file to output dir\nI.pullFile('/storage/emulated/0/DCIM/logo.png', output_dir);\n\n\n\n\nAppium: support Android and iOS\n\n\nParameters\n\n\n\n\npath\n  \n\n\ndest\n  \n\n\n\n\nremoveApp\n\n\nRemove an app from the device.\n\n\nI.removeApp('com.example.android.apis');\n\n\n\n\nParameters\n\n\n\n\nbundleId\n  String  ID of bundled appAppium: support only Android\n\n\n\n\nrotate\n\n\nPerform a rotation gesture centered on the specified element.\n\n\nI.rotate(120, 120)\n\n\n\n\nSee corresponding \nwebdriverio reference\n.\n\n\nAppium: support only iOS\n\n\nParameters\n\n\n\n\nx\n  \n\n\ny\n  \n\n\nduration\n  \n\n\nradius\n  \n\n\nrotation\n  \n\n\ntouchCount\n  \n\n\n\n\nrunInWeb\n\n\nExecute code only in Web mode.\n\n\nI.runInWeb(() =\n {\n   I.waitForElement('#data');\n   I.seeInCurrentUrl('/data');\n});\n\n\n\n\nParameters\n\n\n\n\nfn\n \nAny\n \n\n\n\n\nrunOnAndroid\n\n\nExecute code only on Android\n\n\nI.runOnAndroid(() =\n {\n   I.click('io.selendroid.testapp:id/buttonTest');\n});\n\n\n\n\nAdditional filter can be applied by checking for capabilities.\nFor instance, this code will be executed only on Android 6.0:\n\n\nI.runOnAndroid({platformVersion: '6.0'},() =\n {\n   // ...\n});\n\n\n\n\nAlso capabilities can be checked by a function.\nIn this case, code will be executed only on Android \n= 6.\n\n\nI.runOnAndroid((caps) =\n {\n   // caps is current config of desiredCapabiliites\n   return caps.platformVersion \n= 6\n},() =\n {\n   // ...\n});\n\n\n\n\nParameters\n\n\n\n\ncaps\n \nAny\n \n\n\nfn\n \nAny\n \n\n\n\n\nrunOnIOS\n\n\nExecute code only on iOS\n\n\nI.runOnIOS(() =\n {\n   I.click('//UIAApplication[1]/UIAWindow[1]/UIAButton[1]');\n   I.see('Hi, IOS', '~welcome');\n});\n\n\n\n\nAdditional filter can be applied by checking for capabilities.\nFor instance, this code will be executed only on iPhone 5s:\n\n\nI.runOnIOS({deviceName: 'iPhone 5s'},() =\n {\n   // ...\n});\n\n\n\n\nAlso capabilities can be checked by a function.\n\n\nI.runOnAndroid((caps) =\n {\n   // caps is current config of desiredCapabiliites\n   return caps.platformVersion \n= 6\n},() =\n {\n   // ...\n});\n\n\n\n\nParameters\n\n\n\n\ncaps\n \nAny\n \n\n\nfn\n \nAny\n \n\n\n\n\nsee\n\n\nChecks that a page contains a visible text.\nUse context parameter to narrow down the search.\n\n\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n\n\n\n\nParameters\n\n\n\n\ntext\n  expected on page\n\n\ncontext\n  (optional) element located by CSS|Xpath|strict locator in which to search for text\n\n\n\n\nseeAppIsInstalled\n\n\nCheck if an app is installed.\n\n\nI.seeAppIsInstalled(\ncom.example.android.apis\n);\n\n\n\n\nParameters\n\n\n\n\nbundleId\n  String  ID of bundled appAppium: support only Android\n\n\n\n\nseeAppIsNotInstalled\n\n\nCheck if an app is not installed.\n\n\nI.seeAppIsNotInstalled(\ncom.example.android.apis\n);\n\n\n\n\nParameters\n\n\n\n\nbundleId\n  String  ID of bundled appAppium: support only Android\n\n\n\n\nseeCheckboxIsChecked\n\n\nVerifies that the specified checkbox is checked.\n\n\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\ncheckbox\n  \n\n\n\n\nseeCurrentActivityIs\n\n\nCheck current activity on an Android device.\n\n\nI.seeCurrentActivityIs(\n.HomeScreenActivity\n)\n\n\n\n\nAppium: support only Android\n\n\nParameters\n\n\n\n\ncurrentActivity\n  \n\n\n\n\nseeDeviceIsLocked\n\n\nCheck whether the device is locked.\n\n\nI.seeDeviceIsLocked();\n\n\n\n\nAppium: support only Android\n\n\nseeDeviceIsUnlocked\n\n\nCheck whether the device is not locked.\n\n\nI.seeDeviceIsUnlocked();\n\n\n\n\nAppium: support only Android\n\n\nseeElement\n\n\nChecks that a given Element is visible\nElement is located by CSS or XPath.\n\n\nI.seeElement('#modal');\n\n\n\n\nParameters\n\n\n\n\nlocator\n  located by CSS|XPath|strict locator\n\n\nel\n  \n\n\n\n\nseeInField\n\n\nChecks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.\n\n\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n\n\n\n\nParameters\n\n\n\n\nfield\n  located by label|name|CSS|XPath|strict locator\n\n\nvalue\n  \n\n\n\n\nseeOrientationIs\n\n\nCheck the device orientation\n\n\nI.seeOrientationIs('PORTRAIT');\nI.seeOrientationIs('LANDSCAPE')\n\n\n\n\nParameters\n\n\n\n\norientation\n  LANDSCAPE or PORTRAITAppium: support Android and iOS\n\n\n\n\nselectOption\n\n\nSelects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.\n\n\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n\n\n\nProvide an array for the second argument to select multiple options.\n\n\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n\n\n\n\nParameters\n\n\n\n\nselect\n  field located by label|name|CSS|XPath|strict locator\n\n\noption\n  Support only web testing!\n\n\n\n\nsendDeviceKeyEvent\n\n\nSend a key event to the device.\nList of keys: \nhttps://developer.android.com/reference/android/view/KeyEvent.html\n\n\nI.sendDeviceKeyEvent(3);\n\n\n\n\nParameters\n\n\n\n\nkeyValue\n  Device specific key valueAppium: support only Android\n\n\n\n\nsetImmediateValue\n\n\nSet immediate value in app.\n\n\nSee corresponding \nwebdriverio reference\n.\n\n\nAppium: support only iOS\n\n\nParameters\n\n\n\n\nid\n  \n\n\nvalue\n  \n\n\n\n\nsetNetworkConnection\n\n\nSet network connection mode.\n\n\n\n\nairplane mode\n\n\nwifi mode\n\n\ndata data\n\n\n\n\nI.setNetworkConnection(0) // airplane mode off, wifi off, data off\nI.setNetworkConnection(1) // airplane mode on, wifi off, data off\nI.setNetworkConnection(2) // airplane mode off, wifi on, data off\nI.setNetworkConnection(4) // airplane mode off, wifi off, data on\nI.setNetworkConnection(6) // airplane mode off, wifi on, data on\n\n\n\n\nSee corresponding \nwebdriverio reference\n.\n\n\nAppium: support only Android\n\n\nParameters\n\n\n\n\nvalue\n  \n\n\n\n\nsetOrientation\n\n\nSet a device orientation. Will fail, if app will not set orientation\n\n\nI.setOrientation('PORTRAIT');\nI.setOrientation('LANDSCAPE')\n\n\n\n\nParameters\n\n\n\n\norientation\n  LANDSCAPE or PORTRAITAppium: support Android and iOS\n\n\n\n\nsetSettings\n\n\nUpdate the current setting on the device\n\n\nI.setSettings({cyberdelia: 'open'});\n\n\n\n\nParameters\n\n\n\n\nsettings\n  objectAppium: support Android and iOS\n\n\n\n\nshakeDevice\n\n\nPerform a shake action on the device.\n\n\nI.shakeDevice();\n\n\n\n\nAppium: support only iOS\n\n\nsimulateTouchId\n\n\nSimulate Touch ID with either valid (match == true) or invalid (match == false) fingerprint.\n\n\nI.touchId(); // simulates valid fingerprint\nI.touchId(true); // simulates valid fingerprint\nI.touchId(false); // simulates invalid fingerprint\n\n\n\n\nAppium: support only iOS\nTODO: not tested\n\n\nParameters\n\n\n\n\nmatch\n  \n\n\n\n\nstartActivity\n\n\nStart an arbitrary Android activity during a session.\n\n\nI.startActivity('io.selendroid.testapp', '.RegisterUserActivity');\n\n\n\n\nAppium: support only Android\n\n\nParameters\n\n\n\n\nappPackage\n  \n\n\nappActivity\n  \n\n\n\n\nswipe\n\n\nPerform a swipe on the screen or an element.\n\n\nlet locator = \n#io.selendroid.testapp:id/LinearLayout1\n;\nI.swipe(locator, 800, 1200, 1000);\n\n\n\n\nSee complete reference\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nxoffset\n  \n\n\nyoffset\n  \n\n\nspeed\n  (optional), 1000 by defaultAppium: support Android and iOS\n\n\n\n\nswipeDown\n\n\nPerform a swipe down on an element.\n\n\nlet locator = \n#io.selendroid.testapp:id/LinearLayout1\n;\nI.swipeDown(locator); // simple swipe\nI.swipeDown(locator, 500); // set speed\nI.swipeDown(locator, 1200, 1000); // set offset and speed\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nyoffset\n  (optional)\n\n\nspeed\n  (optional), 1000 by defaultAppium: support Android and iOS\n\n\n\n\nswipeLeft\n\n\nPerform a swipe left on an element.\n\n\nlet locator = \n#io.selendroid.testapp:id/LinearLayout1\n;\nI.swipeLeft(locator); // simple swipe\nI.swipeLeft(locator, 500); // set speed\nI.swipeLeft(locator, 1200, 1000); // set offset and speed\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nxoffset\n  (optional)\n\n\nspeed\n  (optional), 1000 by defaultAppium: support Android and iOS\n\n\n\n\nswipeRight\n\n\nPerform a swipe right on an element.\n\n\nlet locator = \n#io.selendroid.testapp:id/LinearLayout1\n;\nI.swipeRight(locator); // simple swipe\nI.swipeRight(locator, 500); // set speed\nI.swipeRight(locator, 1200, 1000); // set offset and speed\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nxoffset\n  (optional)\n\n\nspeed\n  (optional), 1000 by defaultAppium: support Android and iOS\n\n\n\n\nswipeTo\n\n\nPerform a swipe in selected direction on an element to searchable element.\n\n\nI.swipeTo(\n \nandroid.widget.CheckBox\n, // searchable element\n \n//android.widget.ScrollView/android.widget.LinearLayout\n, // scroll element\n  \nup\n, // direction\n   30,\n   100,\n   500);\n\n\n\n\nParameters\n\n\n\n\nsearchableLocator\n  \n\n\nscrollLocator\n  \n\n\ndirection\n  \n\n\ntimeout\n  \n\n\noffset\n  \n\n\nspeed\n  Appium: support Android and iOS\n\n\n\n\nswipeUp\n\n\nPerform a swipe up on an element.\n\n\nlet locator = \n#io.selendroid.testapp:id/LinearLayout1\n;\nI.swipeUp(locator); // simple swipe\nI.swipeUp(locator, 500); // set speed\nI.swipeUp(locator, 1200, 1000); // set offset and speed\n\n\n\n\nParameters\n\n\n\n\nlocator\n  \n\n\nyoffset\n  (optional)\n\n\nspeed\n  (optional), 1000 by defaultAppium: support Android and iOS\n\n\n\n\nswitchToNative\n\n\nSwitches to native context.\nBy default switches to NATIVE_APP context unless other specified.\n\n\nI.switchToNative();\n\n// or set context explicitly\nI.switchToNative('SOME_OTHER_CONTEXT');\n\n\n\n\nParameters\n\n\n\n\ncontext\n \nAny\n \n\n\n\n\nswitchToWeb\n\n\nSwitches to web context.\nIf no context is provided switches to the first detected web context\n\n\n// switch to first web context\nI.switchToWeb();\n\n// or set the context explicitly\nI.switchToWeb('WEBVIEW_io.selendroid.testapp');\n\n\n\n\nParameters\n\n\n\n\ncontext\n \n[string]\n \n\n\n\n\ntap\n\n\nTaps on element.\n\n\nI.tap(\n~buttonStartWebviewCD\n);\n\n\n\n\nShortcut for \nmakeTouchAction\n\n\nParameters\n\n\n\n\nlocator\n \nAny\n \n\n\n\n\ntouchPerform\n\n\nPerforms a specific touch action.\nThe action object need to contain the action name, x/y coordinates\n\n\nI.touchPerform([{\n    action: 'press',\n    options: {\n      x: 100,\n      y: 200\n    }\n}, {action: 'release'}])\n\nI.touchPerform([{\n   action: 'tap',\n   options: {\n       element: '1', // json web element was queried before\n       x: 10,   // x offset\n       y: 20,   // y offset\n       count: 1 // number of touches\n   }\n}]);\n\n\n\n\nAppium: support Android and iOS\n\n\nParameters\n\n\n\n\nactions", 
            "title": "Appium"
        }, 
        {
            "location": "/helpers/Appium/#appium", 
            "text": "Appium helper extends  WebriverIO  helper.\n It supports all browser methods and also includes special methods for mobile apps testing.\n You can use this helper to test Web on desktop and mobile devices and mobile apps.", 
            "title": "Appium"
        }, 
        {
            "location": "/helpers/Appium/#appium-installation", 
            "text": "Appium is an open source test automation framework for use with native, hybrid and mobile web apps that implements the WebDriver protocol.\nIt allows you to run Selenium tests on mobile devices and also test native, hybrid and mobile web apps.  Download and install  Appium  npm install -g appium  Launch the daemon:  appium", 
            "title": "Appium Installation"
        }, 
        {
            "location": "/helpers/Appium/#helper-configuration", 
            "text": "This helper should be configured in codecept.json or codecept.conf.js   app : Application path. Local path or remote URL to an .ipa or .apk file, or a .zip containing one of these. Alias to desiredCapabilities.appPackage  host : (default: 'localhost') Appium host  port : (default: '4723') Appium port  platform : (Android or IOS), which mobile OS to use; alias to desiredCapabilities.platformName  restart : restart browser or app between tests (default: true), if set to false cookies will be cleaned but browser window will be kept and for apps nothing will be changed.  desiredCapabilities : [], Appium capabilities, see below  platformName  - Which mobile OS platform to use  appPackage  - Java package of the Android app you want to run  appActivity  - Activity name for the Android activity you want to launch from your package.  deviceName : The kind of mobile device or emulator to use  platformVersion : Mobile OS version  app  - The absolute local path or remote http URL to an .ipa or .apk file, or a .zip containing one of these. Appium will attempt to install this app binary on the appropriate device first.  browserName : Name of mobile web browser to automate. Should be an empty string if automating an app instead.     Example:  {\n  helpers: {\n      Appium: {\n          platform:  Android ,\n          desiredCapabilities: {\n              appPackage:  com.example.android.myApp ,\n              appActivity:  MainActivity ,\n              deviceName:  OnePlus3 ,\n              platformVersion:  6.0.1 \n          }\n      }\n    }\n}  Additional configuration params can be used from  https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md", 
            "title": "Helper configuration"
        }, 
        {
            "location": "/helpers/Appium/#access-from-helpers", 
            "text": "Receive a Appium client from a custom helper by accessing  browser  property:  let browser = this.helpers['Appium'].browser  Parameters   config", 
            "title": "Access From Helpers"
        }, 
        {
            "location": "/helpers/Appium/#_switchtocontext", 
            "text": "Switch to the specified context.  Parameters   context   the context to switch to", 
            "title": "_switchToContext"
        }, 
        {
            "location": "/helpers/Appium/#appendfield", 
            "text": "Appends text to a input field or textarea.\nField is located by name, label, CSS or XPath  I.appendField('#myTextField', 'appended');  Parameters   field   located by label|name|CSS|XPath|strict locator  value   text value", 
            "title": "appendField"
        }, 
        {
            "location": "/helpers/Appium/#checkoption", 
            "text": "Selects a checkbox or radio button.\nElement is located by label or name or CSS or XPath.  The second parameter is a context (CSS or XPath locator) to narrow the search.  I.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');  Parameters     -    field   checkbox located by label  name  CSS      -    checkbox", 
            "title": "checkOption"
        }, 
        {
            "location": "/helpers/Appium/#click", 
            "text": "Perform a click on a link or a button, given by a locator.\nIf a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.\nFor buttons, the \"value\" attribute, \"name\" attribute, and inner text are searched. For links, the link text is searched.\nFor images, the \"alt\" attribute and inner text of any parent links are searched.  The second parameter is a context (CSS or XPath locator) to narrow the search.  // simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});  Parameters   locator   clickable link or button located by text, or any element located by CSS|XPath|strict locator  button     context   (optional) element to search in CSS|XPath|Strict locator", 
            "title": "click"
        }, 
        {
            "location": "/helpers/Appium/#closeapp", 
            "text": "Close the given application.  I.closeApp();  Appium: support only iOS", 
            "title": "closeApp"
        }, 
        {
            "location": "/helpers/Appium/#constructor", 
            "text": "Appium Special Methods for Mobile only  Parameters   config", 
            "title": "constructor"
        }, 
        {
            "location": "/helpers/Appium/#dontsee", 
            "text": "Opposite to  see . Checks that a text is not present on a page.\nUse context parameter to narrow down the search.  I.dontSee('Login'); // assume we are already logged in  Parameters   text   is not present  context   (optional) element located by CSS|XPath|strict locator in which to perfrom search", 
            "title": "dontSee"
        }, 
        {
            "location": "/helpers/Appium/#dontseecheckboxischecked", 
            "text": "Verifies that the specified checkbox is not checked.  Parameters   field   located by label|name|CSS|XPath|strict locator  checkbox", 
            "title": "dontSeeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Appium/#dontseeelement", 
            "text": "Opposite to  seeElement . Checks that element is not visible (or in DOM)  Parameters   locator   located by CSS|XPath|Strict locator  el     context", 
            "title": "dontSeeElement"
        }, 
        {
            "location": "/helpers/Appium/#dontseeinfield", 
            "text": "Checks that value of input field or textare doesn't equal to given value\nOpposite to  seeInField .  Parameters   field   located by label|name|CSS|XPath|strict locator  value   is not expected to be a field value", 
            "title": "dontSeeInField"
        }, 
        {
            "location": "/helpers/Appium/#fillfield", 
            "text": "Fills a text field or textarea, after clearing its value, with the given string.\nField is located by name, label, CSS, or XPath.  // by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', '123456');\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "fillField"
        }, 
        {
            "location": "/helpers/Appium/#graballcontexts", 
            "text": "Get list of all available contexts  let contexts = await I.grabAllContexts();  Appium: support Android and iOS", 
            "title": "grabAllContexts"
        }, 
        {
            "location": "/helpers/Appium/#grabcontext", 
            "text": "Retrieve current context  let context = await I.grabContext();  Appium: support Android and iOS", 
            "title": "grabContext"
        }, 
        {
            "location": "/helpers/Appium/#grabcurrentactivity", 
            "text": "Get current device activity.  let activity = await I.grabCurrentActivity();  Appium: support only Android", 
            "title": "grabCurrentActivity"
        }, 
        {
            "location": "/helpers/Appium/#grabnetworkconnection", 
            "text": "Get information about the current network connection (Data/WIFI/Airplane).\nThe actual server value will be a number. However WebdriverIO additional\nproperties to the response object to allow easier assertions.  let con = await I.grabNetworkConnection();  Appium: support only Android", 
            "title": "grabNetworkConnection"
        }, 
        {
            "location": "/helpers/Appium/#graborientation", 
            "text": "Get current orientation.  let orientation = await I.grabOrientation();  Appium: support Android and iOS", 
            "title": "grabOrientation"
        }, 
        {
            "location": "/helpers/Appium/#grabsettings", 
            "text": "Get all the currently specified settings.  let settings = await I.grabSettings();  Appium: support Android and iOS", 
            "title": "grabSettings"
        }, 
        {
            "location": "/helpers/Appium/#grabtextfrom", 
            "text": "Retrieves a text from an element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async with  await  operator.  let pin = await I.grabTextFrom('#pin');  If multiple elements found returns an array of texts.  Parameters   locator   element located by CSS|XPath|strict locator  el", 
            "title": "grabTextFrom"
        }, 
        {
            "location": "/helpers/Appium/#grabvaluefrom", 
            "text": "Retrieves a value from a form element located by CSS or XPath and returns it to test.\nResumes test execution, so  should be used inside async function with  await  operator.  let email = await I.grabValueFrom('input[name=email]');  Parameters   locator   field located by label|name|CSS|XPath|strict locator  el", 
            "title": "grabValueFrom"
        }, 
        {
            "location": "/helpers/Appium/#hidedevicekeyboard", 
            "text": "Hide the keyboard.  // taps outside to hide keyboard per default\nI.hideDeviceKeyboard();\nI.hideDeviceKeyboard('tapOutside');\n\n// or by pressing key\nI.hideDeviceKeyboard('pressKey', 'Done');  Parameters   strategy   desired strategy to close keyboard (\u2018tapOutside\u2019 or \u2018pressKey\u2019)Appium: support Android and iOS  key", 
            "title": "hideDeviceKeyboard"
        }, 
        {
            "location": "/helpers/Appium/#installapp", 
            "text": "Install an app on device.  I.installApp('/path/to/file.apk');  Parameters   path   path to apk fileAppium: support only Android", 
            "title": "installApp"
        }, 
        {
            "location": "/helpers/Appium/#maketouchaction", 
            "text": "The Touch Action API provides the basis of all gestures that can be\nautomated in Appium. At its core is the ability to chain together ad hoc\nindividual actions, which will then be applied to an element in the\napplication on the device. See complete documentation  I.makeTouchAction( ~buttonStartWebviewCD , 'tap');  Appium: support Android and iOS  Parameters   locator     action", 
            "title": "makeTouchAction"
        }, 
        {
            "location": "/helpers/Appium/#opennotifications", 
            "text": "Open the notifications panel on the device.  I.openNotifications();  Appium: support only Android", 
            "title": "openNotifications"
        }, 
        {
            "location": "/helpers/Appium/#pullfile", 
            "text": "Pulls a file from the device.  I.pullFile('/storage/emulated/0/DCIM/logo.png', 'my/path');\n// save file to output dir\nI.pullFile('/storage/emulated/0/DCIM/logo.png', output_dir);  Appium: support Android and iOS  Parameters   path     dest", 
            "title": "pullFile"
        }, 
        {
            "location": "/helpers/Appium/#removeapp", 
            "text": "Remove an app from the device.  I.removeApp('com.example.android.apis');  Parameters   bundleId   String  ID of bundled appAppium: support only Android", 
            "title": "removeApp"
        }, 
        {
            "location": "/helpers/Appium/#rotate", 
            "text": "Perform a rotation gesture centered on the specified element.  I.rotate(120, 120)  See corresponding  webdriverio reference .  Appium: support only iOS  Parameters   x     y     duration     radius     rotation     touchCount", 
            "title": "rotate"
        }, 
        {
            "location": "/helpers/Appium/#runinweb", 
            "text": "Execute code only in Web mode.  I.runInWeb(() =  {\n   I.waitForElement('#data');\n   I.seeInCurrentUrl('/data');\n});  Parameters   fn   Any", 
            "title": "runInWeb"
        }, 
        {
            "location": "/helpers/Appium/#runonandroid", 
            "text": "Execute code only on Android  I.runOnAndroid(() =  {\n   I.click('io.selendroid.testapp:id/buttonTest');\n});  Additional filter can be applied by checking for capabilities.\nFor instance, this code will be executed only on Android 6.0:  I.runOnAndroid({platformVersion: '6.0'},() =  {\n   // ...\n});  Also capabilities can be checked by a function.\nIn this case, code will be executed only on Android  = 6.  I.runOnAndroid((caps) =  {\n   // caps is current config of desiredCapabiliites\n   return caps.platformVersion  = 6\n},() =  {\n   // ...\n});  Parameters   caps   Any    fn   Any", 
            "title": "runOnAndroid"
        }, 
        {
            "location": "/helpers/Appium/#runonios", 
            "text": "Execute code only on iOS  I.runOnIOS(() =  {\n   I.click('//UIAApplication[1]/UIAWindow[1]/UIAButton[1]');\n   I.see('Hi, IOS', '~welcome');\n});  Additional filter can be applied by checking for capabilities.\nFor instance, this code will be executed only on iPhone 5s:  I.runOnIOS({deviceName: 'iPhone 5s'},() =  {\n   // ...\n});  Also capabilities can be checked by a function.  I.runOnAndroid((caps) =  {\n   // caps is current config of desiredCapabiliites\n   return caps.platformVersion  = 6\n},() =  {\n   // ...\n});  Parameters   caps   Any    fn   Any", 
            "title": "runOnIOS"
        }, 
        {
            "location": "/helpers/Appium/#see", 
            "text": "Checks that a page contains a visible text.\nUse context parameter to narrow down the search.  I.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator  Parameters   text   expected on page  context   (optional) element located by CSS|Xpath|strict locator in which to search for text", 
            "title": "see"
        }, 
        {
            "location": "/helpers/Appium/#seeappisinstalled", 
            "text": "Check if an app is installed.  I.seeAppIsInstalled( com.example.android.apis );  Parameters   bundleId   String  ID of bundled appAppium: support only Android", 
            "title": "seeAppIsInstalled"
        }, 
        {
            "location": "/helpers/Appium/#seeappisnotinstalled", 
            "text": "Check if an app is not installed.  I.seeAppIsNotInstalled( com.example.android.apis );  Parameters   bundleId   String  ID of bundled appAppium: support only Android", 
            "title": "seeAppIsNotInstalled"
        }, 
        {
            "location": "/helpers/Appium/#seecheckboxischecked", 
            "text": "Verifies that the specified checkbox is checked.  I.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});  Parameters   field   located by label|name|CSS|XPath|strict locator  checkbox", 
            "title": "seeCheckboxIsChecked"
        }, 
        {
            "location": "/helpers/Appium/#seecurrentactivityis", 
            "text": "Check current activity on an Android device.  I.seeCurrentActivityIs( .HomeScreenActivity )  Appium: support only Android  Parameters   currentActivity", 
            "title": "seeCurrentActivityIs"
        }, 
        {
            "location": "/helpers/Appium/#seedeviceislocked", 
            "text": "Check whether the device is locked.  I.seeDeviceIsLocked();  Appium: support only Android", 
            "title": "seeDeviceIsLocked"
        }, 
        {
            "location": "/helpers/Appium/#seedeviceisunlocked", 
            "text": "Check whether the device is not locked.  I.seeDeviceIsUnlocked();  Appium: support only Android", 
            "title": "seeDeviceIsUnlocked"
        }, 
        {
            "location": "/helpers/Appium/#seeelement", 
            "text": "Checks that a given Element is visible\nElement is located by CSS or XPath.  I.seeElement('#modal');  Parameters   locator   located by CSS|XPath|strict locator  el", 
            "title": "seeElement"
        }, 
        {
            "location": "/helpers/Appium/#seeinfield", 
            "text": "Checks that the given input field or textarea equals to given value.\nFor fuzzy locators, fields are matched by label text, the \"name\" attribute, CSS, and XPath.  I.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');  Parameters   field   located by label|name|CSS|XPath|strict locator  value", 
            "title": "seeInField"
        }, 
        {
            "location": "/helpers/Appium/#seeorientationis", 
            "text": "Check the device orientation  I.seeOrientationIs('PORTRAIT');\nI.seeOrientationIs('LANDSCAPE')  Parameters   orientation   LANDSCAPE or PORTRAITAppium: support Android and iOS", 
            "title": "seeOrientationIs"
        }, 
        {
            "location": "/helpers/Appium/#selectoption", 
            "text": "Selects an option in a drop-down select.\nField is searched by label | name | CSS | XPath.\nOption is selected by visible text or by value.  I.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');  Provide an array for the second argument to select multiple options.  I.selectOption('Which OS do you use?', ['Android', 'iOS']);  Parameters   select   field located by label|name|CSS|XPath|strict locator  option   Support only web testing!", 
            "title": "selectOption"
        }, 
        {
            "location": "/helpers/Appium/#senddevicekeyevent", 
            "text": "Send a key event to the device.\nList of keys:  https://developer.android.com/reference/android/view/KeyEvent.html  I.sendDeviceKeyEvent(3);  Parameters   keyValue   Device specific key valueAppium: support only Android", 
            "title": "sendDeviceKeyEvent"
        }, 
        {
            "location": "/helpers/Appium/#setimmediatevalue", 
            "text": "Set immediate value in app.  See corresponding  webdriverio reference .  Appium: support only iOS  Parameters   id     value", 
            "title": "setImmediateValue"
        }, 
        {
            "location": "/helpers/Appium/#setnetworkconnection", 
            "text": "Set network connection mode.   airplane mode  wifi mode  data data   I.setNetworkConnection(0) // airplane mode off, wifi off, data off\nI.setNetworkConnection(1) // airplane mode on, wifi off, data off\nI.setNetworkConnection(2) // airplane mode off, wifi on, data off\nI.setNetworkConnection(4) // airplane mode off, wifi off, data on\nI.setNetworkConnection(6) // airplane mode off, wifi on, data on  See corresponding  webdriverio reference .  Appium: support only Android  Parameters   value", 
            "title": "setNetworkConnection"
        }, 
        {
            "location": "/helpers/Appium/#setorientation", 
            "text": "Set a device orientation. Will fail, if app will not set orientation  I.setOrientation('PORTRAIT');\nI.setOrientation('LANDSCAPE')  Parameters   orientation   LANDSCAPE or PORTRAITAppium: support Android and iOS", 
            "title": "setOrientation"
        }, 
        {
            "location": "/helpers/Appium/#setsettings", 
            "text": "Update the current setting on the device  I.setSettings({cyberdelia: 'open'});  Parameters   settings   objectAppium: support Android and iOS", 
            "title": "setSettings"
        }, 
        {
            "location": "/helpers/Appium/#shakedevice", 
            "text": "Perform a shake action on the device.  I.shakeDevice();  Appium: support only iOS", 
            "title": "shakeDevice"
        }, 
        {
            "location": "/helpers/Appium/#simulatetouchid", 
            "text": "Simulate Touch ID with either valid (match == true) or invalid (match == false) fingerprint.  I.touchId(); // simulates valid fingerprint\nI.touchId(true); // simulates valid fingerprint\nI.touchId(false); // simulates invalid fingerprint  Appium: support only iOS\nTODO: not tested  Parameters   match", 
            "title": "simulateTouchId"
        }, 
        {
            "location": "/helpers/Appium/#startactivity", 
            "text": "Start an arbitrary Android activity during a session.  I.startActivity('io.selendroid.testapp', '.RegisterUserActivity');  Appium: support only Android  Parameters   appPackage     appActivity", 
            "title": "startActivity"
        }, 
        {
            "location": "/helpers/Appium/#swipe", 
            "text": "Perform a swipe on the screen or an element.  let locator =  #io.selendroid.testapp:id/LinearLayout1 ;\nI.swipe(locator, 800, 1200, 1000);  See complete reference  Parameters   locator     xoffset     yoffset     speed   (optional), 1000 by defaultAppium: support Android and iOS", 
            "title": "swipe"
        }, 
        {
            "location": "/helpers/Appium/#swipedown", 
            "text": "Perform a swipe down on an element.  let locator =  #io.selendroid.testapp:id/LinearLayout1 ;\nI.swipeDown(locator); // simple swipe\nI.swipeDown(locator, 500); // set speed\nI.swipeDown(locator, 1200, 1000); // set offset and speed  Parameters   locator     yoffset   (optional)  speed   (optional), 1000 by defaultAppium: support Android and iOS", 
            "title": "swipeDown"
        }, 
        {
            "location": "/helpers/Appium/#swipeleft", 
            "text": "Perform a swipe left on an element.  let locator =  #io.selendroid.testapp:id/LinearLayout1 ;\nI.swipeLeft(locator); // simple swipe\nI.swipeLeft(locator, 500); // set speed\nI.swipeLeft(locator, 1200, 1000); // set offset and speed  Parameters   locator     xoffset   (optional)  speed   (optional), 1000 by defaultAppium: support Android and iOS", 
            "title": "swipeLeft"
        }, 
        {
            "location": "/helpers/Appium/#swiperight", 
            "text": "Perform a swipe right on an element.  let locator =  #io.selendroid.testapp:id/LinearLayout1 ;\nI.swipeRight(locator); // simple swipe\nI.swipeRight(locator, 500); // set speed\nI.swipeRight(locator, 1200, 1000); // set offset and speed  Parameters   locator     xoffset   (optional)  speed   (optional), 1000 by defaultAppium: support Android and iOS", 
            "title": "swipeRight"
        }, 
        {
            "location": "/helpers/Appium/#swipeto", 
            "text": "Perform a swipe in selected direction on an element to searchable element.  I.swipeTo(\n  android.widget.CheckBox , // searchable element\n  //android.widget.ScrollView/android.widget.LinearLayout , // scroll element\n   up , // direction\n   30,\n   100,\n   500);  Parameters   searchableLocator     scrollLocator     direction     timeout     offset     speed   Appium: support Android and iOS", 
            "title": "swipeTo"
        }, 
        {
            "location": "/helpers/Appium/#swipeup", 
            "text": "Perform a swipe up on an element.  let locator =  #io.selendroid.testapp:id/LinearLayout1 ;\nI.swipeUp(locator); // simple swipe\nI.swipeUp(locator, 500); // set speed\nI.swipeUp(locator, 1200, 1000); // set offset and speed  Parameters   locator     yoffset   (optional)  speed   (optional), 1000 by defaultAppium: support Android and iOS", 
            "title": "swipeUp"
        }, 
        {
            "location": "/helpers/Appium/#switchtonative", 
            "text": "Switches to native context.\nBy default switches to NATIVE_APP context unless other specified.  I.switchToNative();\n\n// or set context explicitly\nI.switchToNative('SOME_OTHER_CONTEXT');  Parameters   context   Any", 
            "title": "switchToNative"
        }, 
        {
            "location": "/helpers/Appium/#switchtoweb", 
            "text": "Switches to web context.\nIf no context is provided switches to the first detected web context  // switch to first web context\nI.switchToWeb();\n\n// or set the context explicitly\nI.switchToWeb('WEBVIEW_io.selendroid.testapp');  Parameters   context   [string]", 
            "title": "switchToWeb"
        }, 
        {
            "location": "/helpers/Appium/#tap", 
            "text": "Taps on element.  I.tap( ~buttonStartWebviewCD );  Shortcut for  makeTouchAction  Parameters   locator   Any", 
            "title": "tap"
        }, 
        {
            "location": "/helpers/Appium/#touchperform", 
            "text": "Performs a specific touch action.\nThe action object need to contain the action name, x/y coordinates  I.touchPerform([{\n    action: 'press',\n    options: {\n      x: 100,\n      y: 200\n    }\n}, {action: 'release'}])\n\nI.touchPerform([{\n   action: 'tap',\n   options: {\n       element: '1', // json web element was queried before\n       x: 10,   // x offset\n       y: 20,   // y offset\n       count: 1 // number of touches\n   }\n}]);  Appium: support Android and iOS  Parameters   actions", 
            "title": "touchPerform"
        }, 
        {
            "location": "/helpers/REST/", 
            "text": "REST\n\n\nREST helper allows to send additional requests to the REST API during acceptance tests.\n\nUnirest\n library is used to perform requests.\n\n\nConfiguration\n\n\n\n\nendpoint: API base URL\n\n\ntimeout: timeout for requests in milliseconds. 10000ms by default\n\n\ndefaultHeaders: a list of default headers\n\n\nresetHeaders: set to true to reset headers  between requests. Disabled by default\n\n\nfollowRedirect: set to true to enable automatic redirect. Disabled by default\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\n_cleanRequestHeaders\n\n\nChanges headers to default if reset headers option is true\n\n\n_executeRequest\n\n\nExecutes unirest request\n\n\nParameters\n\n\n\n\nrequest\n \nAny\n \n\n\n\n\n_url\n\n\nGenerates url based on format sent (takes endpoint + url if latter lacks 'http')\n\n\nParameters\n\n\n\n\nurl\n \nAny\n \n\n\n\n\namFollowingRequestRedirects\n\n\nSet response auto-redirects ON\n\n\nI.amFollowingRequestRedirects(); // To enable auto-redirects\n\n\n\n\namNotFollowingRequestRedirects\n\n\nSet response auto-redirects OFF\n\n\nI.amNotFollowingRequestRedirects(); // To disable auto-redirects\n\n\n\n\nhaveRequestHeaders\n\n\nSet headers for the request\n\n\nI.haveRequestHeaders({\n   'Accept': 'application/json',\n   'User-Agent': 'Unirest Node.js'\n});\n\n\n\n\nParameters\n\n\n\n\ncustomHeaders\n \nAny\n \n\n\n\n\nresetRequestHeaders\n\n\nReset headers for the request to default state\n\n\nI.resetRequestHeaders();\n\n\n\n\nsendDeleteRequest\n\n\nSends DELETE request to API.\n\n\nI.sendDeleteRequest('/api/users/1');\n\n\n\n\nParameters\n\n\n\n\nurl\n \nAny\n \n\n\nheaders\n \nobject\n \n\n\n\n\nsendGetRequest\n\n\nSend GET request to REST API\n\n\nI.sendGetRequest('/api/users.json');\n\n\n\n\nParameters\n\n\n\n\nurl\n \nAny\n \n\n\nheaders\n \nobject\n \n\n\n\n\nsendPatchRequest\n\n\nSends PATCH request to API.\n\n\nI.sendPatchRequest('/api/users.json', { \nemail\n: \nuser@user.com\n });\n\n\n\n\nParameters\n\n\n\n\nurl\n \nstring\n \n\n\npayload\n \nobject\n \n\n\nheaders\n \nobject\n \n\n\n\n\nsendPostRequest\n\n\nSends POST request to API.\n\n\nI.sendPostRequest('/api/users.json', { \nemail\n: \nuser@user.com\n });\n\n\n\n\nParameters\n\n\n\n\nurl\n \nAny\n \n\n\npayload\n \nAny\n \n\n\nheaders\n \nobject\n \n\n\n\n\nsendPutRequest\n\n\nSends PUT request to API.\n\n\nI.sendPutRequest('/api/users.json', { \nemail\n: \nuser@user.com\n });\n\n\n\n\nParameters\n\n\n\n\nurl\n \nstring\n \n\n\npayload\n \nobject\n \n\n\nheaders\n \nobject\n \n\n\n\n\nsetRequestTimeout\n\n\nSet timeout for the request\n\n\nI.setRequestTimeout(10000); // In milliseconds\n\n\n\n\nParameters\n\n\n\n\nnewTimeout", 
            "title": "REST"
        }, 
        {
            "location": "/helpers/REST/#rest", 
            "text": "REST helper allows to send additional requests to the REST API during acceptance tests. Unirest  library is used to perform requests.", 
            "title": "REST"
        }, 
        {
            "location": "/helpers/REST/#configuration", 
            "text": "endpoint: API base URL  timeout: timeout for requests in milliseconds. 10000ms by default  defaultHeaders: a list of default headers  resetHeaders: set to true to reset headers  between requests. Disabled by default  followRedirect: set to true to enable automatic redirect. Disabled by default   Parameters   config", 
            "title": "Configuration"
        }, 
        {
            "location": "/helpers/REST/#_cleanrequestheaders", 
            "text": "Changes headers to default if reset headers option is true", 
            "title": "_cleanRequestHeaders"
        }, 
        {
            "location": "/helpers/REST/#_executerequest", 
            "text": "Executes unirest request  Parameters   request   Any", 
            "title": "_executeRequest"
        }, 
        {
            "location": "/helpers/REST/#_url", 
            "text": "Generates url based on format sent (takes endpoint + url if latter lacks 'http')  Parameters   url   Any", 
            "title": "_url"
        }, 
        {
            "location": "/helpers/REST/#amfollowingrequestredirects", 
            "text": "Set response auto-redirects ON  I.amFollowingRequestRedirects(); // To enable auto-redirects", 
            "title": "amFollowingRequestRedirects"
        }, 
        {
            "location": "/helpers/REST/#amnotfollowingrequestredirects", 
            "text": "Set response auto-redirects OFF  I.amNotFollowingRequestRedirects(); // To disable auto-redirects", 
            "title": "amNotFollowingRequestRedirects"
        }, 
        {
            "location": "/helpers/REST/#haverequestheaders", 
            "text": "Set headers for the request  I.haveRequestHeaders({\n   'Accept': 'application/json',\n   'User-Agent': 'Unirest Node.js'\n});  Parameters   customHeaders   Any", 
            "title": "haveRequestHeaders"
        }, 
        {
            "location": "/helpers/REST/#resetrequestheaders", 
            "text": "Reset headers for the request to default state  I.resetRequestHeaders();", 
            "title": "resetRequestHeaders"
        }, 
        {
            "location": "/helpers/REST/#senddeleterequest", 
            "text": "Sends DELETE request to API.  I.sendDeleteRequest('/api/users/1');  Parameters   url   Any    headers   object", 
            "title": "sendDeleteRequest"
        }, 
        {
            "location": "/helpers/REST/#sendgetrequest", 
            "text": "Send GET request to REST API  I.sendGetRequest('/api/users.json');  Parameters   url   Any    headers   object", 
            "title": "sendGetRequest"
        }, 
        {
            "location": "/helpers/REST/#sendpatchrequest", 
            "text": "Sends PATCH request to API.  I.sendPatchRequest('/api/users.json', {  email :  user@user.com  });  Parameters   url   string    payload   object    headers   object", 
            "title": "sendPatchRequest"
        }, 
        {
            "location": "/helpers/REST/#sendpostrequest", 
            "text": "Sends POST request to API.  I.sendPostRequest('/api/users.json', {  email :  user@user.com  });  Parameters   url   Any    payload   Any    headers   object", 
            "title": "sendPostRequest"
        }, 
        {
            "location": "/helpers/REST/#sendputrequest", 
            "text": "Sends PUT request to API.  I.sendPutRequest('/api/users.json', {  email :  user@user.com  });  Parameters   url   string    payload   object    headers   object", 
            "title": "sendPutRequest"
        }, 
        {
            "location": "/helpers/REST/#setrequesttimeout", 
            "text": "Set timeout for the request  I.setRequestTimeout(10000); // In milliseconds  Parameters   newTimeout", 
            "title": "setRequestTimeout"
        }, 
        {
            "location": "/helpers/ApiDataFactory/", 
            "text": "ApiDataFactory\n\n\nHelper for managing remote data using REST API.\nUses data generators like \nrosie\n or factory girl to create new record.\n\n\nBy defining a factory you set the rules of how data is generated.\nThis data will be saved on server via REST API and deleted in the end of a test.\n\n\nUse Case\n\n\nAcceptance tests interact with a websites using UI and real browser.\nThere is no way to create data for a specific test other than from user interface.\nThat makes tests slow and fragile. Instead of testing a single feature you need to follow all creation/removal process.\n\n\nThis helper solves this problem.\nMost of web application have API, and it can be used to create and delete test records.\nBy combining REST API with Factories you can easily create records for tests:\n\n\nI.have('user', { login: 'davert', email: 'davert@mail.com' });\nlet id = await I.have('post', { title: 'My first post'});\nI.haveMultiple('comment', 3, {post_id: id});\n\n\n\n\nTo make this work you need\n\n\n\n\nREST API endpoint which allows to perform create / delete requests and\n\n\ndefine data generation rules\n\n\n\n\nSetup\n\n\nInstall \nRosie\n and \nFaker\n libraries.\n\n\nnpm i rosie faker --save-dev`\n\n\n\n\nCreate a factory file for a resource.\n\n\nSee the example for Posts factories:\n\n\n// tests/factories/posts.js\n\nvar Factory = require('rosie').Factory;\nvar faker = require('faker');\n\nmodule.exports = new Factory()\n   // no need to set id, it will be set by REST API\n   .attr('author', () =\n faker.name.findName())\n   .attr('title', () =\n faker.lorem.sentence())\n   .attr('body', () =\n faker.lorem.paragraph());\n\n\n\n\nFor more options see \nrosie documentation\n.\n\n\nThen configure ApiDataHelper to match factories and REST API:\n\n\nConfiguration\n\n\nApiDataFactory has following config options:\n\n\n\n\nendpoint\n: base URL for the API to send requests to.\n\n\ncleanup\n: should inserted records be deleted up after tests. Default: true\n\n\nfactories\n: list of defined factories\n\n\nREST\n: configuration for REST requests\n\n\n\n\nSee the example:\n\n\n \nApiDataFactory\n: {\n   \nendpoint\n: \nhttp://user.com/api\n,\n   \ncleanup\n: true,\n   \nfactories\n: {\n     \npost\n: {\n        \nuri\n: \n/posts\n\n        \nfactory\n: \n./factories/post\n\n     },\n     \ncomment\n: {\n       \nfactory\n: \n./factories/comment\n,\n       \ncreate\n: { \npost\n: \n/comments/create\n },\n       \ndelete\n: { \npost\n: \n/comments/delete\n }\n     }\n   }\n}\n\n\n\n\nIt is required to set REST API \nendpoint\n which is the baseUrl for all API requests.\nFactory file is expected to be passed via \nfactory\n option.\n\n\nThis Helper uses \nREST\n helper and accepts its configuration in \"REST\" section.\nSo, in order to set default headers or timeout you should add:\n\n\nApiDataFactory\n: {\n   \nREST\n: {\n     \ntimeout\n: \n100000\n,\n     \ndefaultHeaders\n: {\n       \nauth\n: \n111111\n\n     }\n  }\n}\n\n\n\n\nApi Requests\n\n\nBy default to create a record ApiDataFactory will use endpoint and plural factory name:\n\n\n\n\ncreate: \nPOST {endpoint}/{resource} data\n\n\ndelete: \nDELETE {endpoint}/{resource}/id\n\n\n\n\nExample (\nendpoint\n: \nhttp://app.com/api\n):\n\n\n\n\ncreate: POST request to \nhttp://app.com/api/users\n\n\ndelete: DELETE request to \nhttp://app.com/api/users/1\n\n\n\n\nHowever this behavior can be configured with following options:\n\n\n\n\nuri\n: set different resource uri. Example: \nuri: account\n =\n \nhttp://app.com/api/account\n.\n\n\ncreate\n: override create options. Expected format: \n{ method: uri }\n. Example: \n{ \"post\": \"/users/create\" }\n\n\ndelete\n: override delete options. Expected format: \n{ method: uri }\n. Example: \n{ \"post\": \"/users/delete/{id}\" }\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\n_fetchId\n\n\nFetches id of a record after it was created by \nhave\n.\nBy default fetched \nid\n attribute from JSON body.\n\n\nCustomize it from custom Helper file:\n\n\nthis.helpers['ApiDataFactory']._fetchId = (body, factory) {\n   return body[factory][0].id;\n}\n\n\n\n\nParameters\n\n\n\n\nbody\n \nAny\n \n\n\nfactory\n \nAny\n \n\n\n\n\n_requestCreate\n\n\nExecutes request to create a record in API.\nCan be replaced from a in custom helper.\n\n\nParameters\n\n\n\n\nfactory\n \nAny\n \n\n\ndata\n \nAny\n \n\n\n\n\n_requestDelete\n\n\nExecutes request to delete a record in API\nCan be replaced from a custom helper.\n\n\nParameters\n\n\n\n\nfactory\n \nAny\n \n\n\nid\n \nAny\n \n\n\n\n\nhave\n\n\nGenerates a new record using factory and saves API request to store it.\n\n\n// create a user\nI.have('user');\n// create user with defined email\nI.have('user', { email: 'user@user.com'});\n\n\n\n\nParameters\n\n\n\n\nfactory\n \nAny\n factory to use\n\n\nparams\n \nAny\n predefined parameters\n\n\n\n\nhaveMultiple\n\n\nGenerates bunch of records and saves multiple API requests to store them.\n\n\n// create 3 posts\nI.have('post', 3);\n\n// create 3 posts by one author\nI.have('post', 3, { author: 'davert' });\n\n\n\n\nParameters\n\n\n\n\nfactory\n \nAny\n \n\n\ntimes\n \nAny\n \n\n\nparams\n \nAny", 
            "title": "ApiDataFactory"
        }, 
        {
            "location": "/helpers/ApiDataFactory/#apidatafactory", 
            "text": "Helper for managing remote data using REST API.\nUses data generators like  rosie  or factory girl to create new record.  By defining a factory you set the rules of how data is generated.\nThis data will be saved on server via REST API and deleted in the end of a test.", 
            "title": "ApiDataFactory"
        }, 
        {
            "location": "/helpers/ApiDataFactory/#use-case", 
            "text": "Acceptance tests interact with a websites using UI and real browser.\nThere is no way to create data for a specific test other than from user interface.\nThat makes tests slow and fragile. Instead of testing a single feature you need to follow all creation/removal process.  This helper solves this problem.\nMost of web application have API, and it can be used to create and delete test records.\nBy combining REST API with Factories you can easily create records for tests:  I.have('user', { login: 'davert', email: 'davert@mail.com' });\nlet id = await I.have('post', { title: 'My first post'});\nI.haveMultiple('comment', 3, {post_id: id});  To make this work you need   REST API endpoint which allows to perform create / delete requests and  define data generation rules   Setup  Install  Rosie  and  Faker  libraries.  npm i rosie faker --save-dev`  Create a factory file for a resource.  See the example for Posts factories:  // tests/factories/posts.js\n\nvar Factory = require('rosie').Factory;\nvar faker = require('faker');\n\nmodule.exports = new Factory()\n   // no need to set id, it will be set by REST API\n   .attr('author', () =  faker.name.findName())\n   .attr('title', () =  faker.lorem.sentence())\n   .attr('body', () =  faker.lorem.paragraph());  For more options see  rosie documentation .  Then configure ApiDataHelper to match factories and REST API:  Configuration  ApiDataFactory has following config options:   endpoint : base URL for the API to send requests to.  cleanup : should inserted records be deleted up after tests. Default: true  factories : list of defined factories  REST : configuration for REST requests   See the example:    ApiDataFactory : {\n    endpoint :  http://user.com/api ,\n    cleanup : true,\n    factories : {\n      post : {\n         uri :  /posts \n         factory :  ./factories/post \n     },\n      comment : {\n        factory :  ./factories/comment ,\n        create : {  post :  /comments/create  },\n        delete : {  post :  /comments/delete  }\n     }\n   }\n}  It is required to set REST API  endpoint  which is the baseUrl for all API requests.\nFactory file is expected to be passed via  factory  option.  This Helper uses  REST  helper and accepts its configuration in \"REST\" section.\nSo, in order to set default headers or timeout you should add:  ApiDataFactory : {\n    REST : {\n      timeout :  100000 ,\n      defaultHeaders : {\n        auth :  111111 \n     }\n  }\n}  Api Requests  By default to create a record ApiDataFactory will use endpoint and plural factory name:   create:  POST {endpoint}/{resource} data  delete:  DELETE {endpoint}/{resource}/id   Example ( endpoint :  http://app.com/api ):   create: POST request to  http://app.com/api/users  delete: DELETE request to  http://app.com/api/users/1   However this behavior can be configured with following options:   uri : set different resource uri. Example:  uri: account  =   http://app.com/api/account .  create : override create options. Expected format:  { method: uri } . Example:  { \"post\": \"/users/create\" }  delete : override delete options. Expected format:  { method: uri } . Example:  { \"post\": \"/users/delete/{id}\" }   Parameters   config", 
            "title": "Use Case"
        }, 
        {
            "location": "/helpers/ApiDataFactory/#_fetchid", 
            "text": "Fetches id of a record after it was created by  have .\nBy default fetched  id  attribute from JSON body.  Customize it from custom Helper file:  this.helpers['ApiDataFactory']._fetchId = (body, factory) {\n   return body[factory][0].id;\n}  Parameters   body   Any    factory   Any", 
            "title": "_fetchId"
        }, 
        {
            "location": "/helpers/ApiDataFactory/#_requestcreate", 
            "text": "Executes request to create a record in API.\nCan be replaced from a in custom helper.  Parameters   factory   Any    data   Any", 
            "title": "_requestCreate"
        }, 
        {
            "location": "/helpers/ApiDataFactory/#_requestdelete", 
            "text": "Executes request to delete a record in API\nCan be replaced from a custom helper.  Parameters   factory   Any    id   Any", 
            "title": "_requestDelete"
        }, 
        {
            "location": "/helpers/ApiDataFactory/#have", 
            "text": "Generates a new record using factory and saves API request to store it.  // create a user\nI.have('user');\n// create user with defined email\nI.have('user', { email: 'user@user.com'});  Parameters   factory   Any  factory to use  params   Any  predefined parameters", 
            "title": "have"
        }, 
        {
            "location": "/helpers/ApiDataFactory/#havemultiple", 
            "text": "Generates bunch of records and saves multiple API requests to store them.  // create 3 posts\nI.have('post', 3);\n\n// create 3 posts by one author\nI.have('post', 3, { author: 'davert' });  Parameters   factory   Any    times   Any    params   Any", 
            "title": "haveMultiple"
        }, 
        {
            "location": "/helpers/FileSystem/", 
            "text": "FileSystem\n\n\nHelper for testing filesystem.\nCan be easily used to check file structures:\n\n\nI.amInPath('test');\nI.seeFile('codecept.json');\nI.seeInThisFile('FileSystem');\nI.dontSeeInThisFile(\nWebDriverIO\n);\n\n\n\n\namInPath\n\n\nEnters a directory In local filesystem.\nStarts from a current directory\n\n\nParameters\n\n\n\n\nopenPath\n  \n\n\n\n\ndontSeeFileContentsEqual\n\n\nChecks that contents of file found by \nseeFile\n doesn't equal to text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\nencoding\n  \n\n\n\n\ndontSeeInThisFile\n\n\nChecks that file found by \nseeFile\n doesn't include text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\nencoding\n  \n\n\n\n\nseeFile\n\n\nChecks that file exists\n\n\nParameters\n\n\n\n\nname\n  \n\n\n\n\nseeFileContentsEqual\n\n\nChecks that contents of file found by \nseeFile\n equal to text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\nencoding\n  \n\n\n\n\nseeInThisFile\n\n\nChecks that file found by \nseeFile\n includes a text.\n\n\nParameters\n\n\n\n\ntext\n  \n\n\nencoding\n  \n\n\n\n\nwriteToFile\n\n\nWrites test to file\n\n\nParameters\n\n\n\n\nname\n  \n\n\ntext", 
            "title": "FileSystem"
        }, 
        {
            "location": "/helpers/FileSystem/#filesystem", 
            "text": "Helper for testing filesystem.\nCan be easily used to check file structures:  I.amInPath('test');\nI.seeFile('codecept.json');\nI.seeInThisFile('FileSystem');\nI.dontSeeInThisFile( WebDriverIO );", 
            "title": "FileSystem"
        }, 
        {
            "location": "/helpers/FileSystem/#aminpath", 
            "text": "Enters a directory In local filesystem.\nStarts from a current directory  Parameters   openPath", 
            "title": "amInPath"
        }, 
        {
            "location": "/helpers/FileSystem/#dontseefilecontentsequal", 
            "text": "Checks that contents of file found by  seeFile  doesn't equal to text.  Parameters   text     encoding", 
            "title": "dontSeeFileContentsEqual"
        }, 
        {
            "location": "/helpers/FileSystem/#dontseeinthisfile", 
            "text": "Checks that file found by  seeFile  doesn't include text.  Parameters   text     encoding", 
            "title": "dontSeeInThisFile"
        }, 
        {
            "location": "/helpers/FileSystem/#seefile", 
            "text": "Checks that file exists  Parameters   name", 
            "title": "seeFile"
        }, 
        {
            "location": "/helpers/FileSystem/#seefilecontentsequal", 
            "text": "Checks that contents of file found by  seeFile  equal to text.  Parameters   text     encoding", 
            "title": "seeFileContentsEqual"
        }, 
        {
            "location": "/helpers/FileSystem/#seeinthisfile", 
            "text": "Checks that file found by  seeFile  includes a text.  Parameters   text     encoding", 
            "title": "seeInThisFile"
        }, 
        {
            "location": "/helpers/FileSystem/#writetofile", 
            "text": "Writes test to file  Parameters   name     text", 
            "title": "writeToFile"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nLocal\n\n\nUse NPM install CodeceptJS:\n\n\nnpm install --save-dev codeceptjs\n\n\n\n\nand started as\n\n\n./node_modules/.bin/codeceptjs\n\n\n\n\nTo use it with WebDriverIO install webdriverio package:\n\n\nnpm install webdriverio --save-dev\n\n\n\n\nTo use it with Protractor install protractor package:\n\n\nnpm install protractor --save-dev\n\n\n\n\nTo use it with Nightmare install nightmare and nightmare-upload packages:\n\n\nnpm install nightmare --save-dev\n\n\n\n\nTo use it with Puppeteer install puppeteer package:\n\n\nnpm install puppeteer --save-dev\n\n\n\n\nWebDriver\n\n\nWebDriver based helpers like WebDriverIO, Protractor, Selenium WebDriver will require \nSelenium Server\n or \nPhantomJS\n installed. They will also require ChromeDriver or GeckoDriver to run corresponding browsers.\n\n\nWe recommend to install them manually or use NPM packages:\n\n\n\n\nSelenium Standalone\n to install and run Selenium, ChromeDriver, Firefox Driver with one package.\n\n\nPhantomjs\n: to install and execute Phantomjs\n\n\n\n\nor use \nDocker\n for headless browser testing.\n\n\nLaunch Selenium with Chrome browser inside a Docker container:\n\n\ndocker run --net=host selenium/standalone-chrome\n\n\n\n\nGlobal\n\n\nCodeceptJS can be installed via NPM globally:\n\n\n[sudo] npm install -g codeceptjs webdriverio\n# or\n[sudo] npm install -g codeceptjs protractor\n# or\n[sudo] npm install -g codeceptjs puppeteer\n# or\n[sudo] npm install -g codeceptjs nightmare\n\n\n\n\nthen it can be started as\n\n\ncodeceptjs", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#local", 
            "text": "Use NPM install CodeceptJS:  npm install --save-dev codeceptjs  and started as  ./node_modules/.bin/codeceptjs  To use it with WebDriverIO install webdriverio package:  npm install webdriverio --save-dev  To use it with Protractor install protractor package:  npm install protractor --save-dev  To use it with Nightmare install nightmare and nightmare-upload packages:  npm install nightmare --save-dev  To use it with Puppeteer install puppeteer package:  npm install puppeteer --save-dev", 
            "title": "Local"
        }, 
        {
            "location": "/installation/#webdriver", 
            "text": "WebDriver based helpers like WebDriverIO, Protractor, Selenium WebDriver will require  Selenium Server  or  PhantomJS  installed. They will also require ChromeDriver or GeckoDriver to run corresponding browsers.  We recommend to install them manually or use NPM packages:   Selenium Standalone  to install and run Selenium, ChromeDriver, Firefox Driver with one package.  Phantomjs : to install and execute Phantomjs   or use  Docker  for headless browser testing.  Launch Selenium with Chrome browser inside a Docker container:  docker run --net=host selenium/standalone-chrome", 
            "title": "WebDriver"
        }, 
        {
            "location": "/installation/#global", 
            "text": "CodeceptJS can be installed via NPM globally:  [sudo] npm install -g codeceptjs webdriverio\n# or\n[sudo] npm install -g codeceptjs protractor\n# or\n[sudo] npm install -g codeceptjs puppeteer\n# or\n[sudo] npm install -g codeceptjs nightmare  then it can be started as  codeceptjs", 
            "title": "Global"
        }, 
        {
            "location": "/commands/", 
            "text": "Commands\n\n\nRun\n\n\nExecutes tests. Requires \ncodecept.json\n config to be present in provided path.\n\n\n\n\nRun all tests from current dir\n\n\ncodeceptjs run\n\n\n\n\nLoad config and run tests from \ntest\n dir\n\n\ncodeceptjs run -c test\n\n\n\n\nRun only tests with \"signin\" word in name\n\n\ncodeceptjs run --grep \nsignin\n\n\n\n\n\nRun all tests without \"@IEOnly\" word in name\n\n\ncodeceptjs run --grep \n@IEOnly\n --invert\n\n\n\n\nRun single test [path to codecept.js] [test filename]\n\n\ncodeceptjs run github_test.js\n\n\n\n\nRun single test with steps printed\n\n\ncodeceptjs run github_test.js --steps\n\n\n\n\nRun single test in debug mode\n\n\ncodeceptjs run github_test.js --debug\n\n\n\n\nRun test with internal logs printed (global promises, and events).\n\n\ncodeceptjs run github_test.js --verbose\n\n\n\n\nSelect config file manually (\n-c\n or \n--config\n option)\n\n\ncodeceptjs run -c my.codecept.conf.js\ncodeceptjs run --config path/to/codecept.json\n\n\n\n\nOverride config on the fly. Provide valid JSON which will be merged into current config:\n\n\ncodeceptjs run --override '{ \nhelpers\n: {\nWebDriverIO\n: {\nbrowser\n: \nchrome\n}}}'\n\n\n\n\nRun tests and produce xunit report:\n\n\ncodeceptjs run --reporter xunit\n\n\n\n\nUse any of \nMocha reporters\n used.\n\n\nRun multiple\n\n\nRun multiple suites.\n\n\ncodeceptjs run-multiple smoke:chrome regression:firefox\n\n\n\n\nInit\n\n\nCreates \ncodecept.json\n file in current directory:\n\n\ncodeceptjs init\n\n\n\n\nOr in provided path\n\n\ncodecept init test\n\n\n\n\nShell\n\n\nInteractive shell. Allows to try \nI.\n commands in runtime\n\n\ncodeceptjs shell\n\n\n\n\nGenerators\n\n\nCreate new test\n\n\ncodeceptjs generate test\n\n\n\n\nCreate new pageobject\n\n\ncodeceptjs generate pageobject\n\n\n\n\nCreate new helper\n\n\ncodeceptjs generate helper\n\n\n\n\nTypeScript Definitions\n\n\nTypeScript Definitions allows IDEs to provide autocompletion when writing tests.\n\n\ncodeceptjs def\ncodeceptjs def --config path/to/codecept.json\n\n\n\n\nProduces \nsteps.d.ts\n file, which referenced in the very beginning of a test file.\n\n\n/// \nreference path=\n./steps.d.ts\n /\n\nFeature('My new test');\n\n\n\n\nAfter doing that IDE should provide autocompletion for \nI\n object inside \nScenario\n and \nwithin\n blocks.\n\n\nList Commands\n\n\nPrints all available methods of \nI\n to console\n\n\ncodeceptjs list", 
            "title": "Commands"
        }, 
        {
            "location": "/commands/#commands", 
            "text": "", 
            "title": "Commands"
        }, 
        {
            "location": "/commands/#run", 
            "text": "Executes tests. Requires  codecept.json  config to be present in provided path.   Run all tests from current dir  codeceptjs run  Load config and run tests from  test  dir  codeceptjs run -c test  Run only tests with \"signin\" word in name  codeceptjs run --grep  signin   Run all tests without \"@IEOnly\" word in name  codeceptjs run --grep  @IEOnly  --invert  Run single test [path to codecept.js] [test filename]  codeceptjs run github_test.js  Run single test with steps printed  codeceptjs run github_test.js --steps  Run single test in debug mode  codeceptjs run github_test.js --debug  Run test with internal logs printed (global promises, and events).  codeceptjs run github_test.js --verbose  Select config file manually ( -c  or  --config  option)  codeceptjs run -c my.codecept.conf.js\ncodeceptjs run --config path/to/codecept.json  Override config on the fly. Provide valid JSON which will be merged into current config:  codeceptjs run --override '{  helpers : { WebDriverIO : { browser :  chrome }}}'  Run tests and produce xunit report:  codeceptjs run --reporter xunit  Use any of  Mocha reporters  used.", 
            "title": "Run"
        }, 
        {
            "location": "/commands/#run-multiple", 
            "text": "Run multiple suites.  codeceptjs run-multiple smoke:chrome regression:firefox", 
            "title": "Run multiple"
        }, 
        {
            "location": "/commands/#init", 
            "text": "Creates  codecept.json  file in current directory:  codeceptjs init  Or in provided path  codecept init test", 
            "title": "Init"
        }, 
        {
            "location": "/commands/#shell", 
            "text": "Interactive shell. Allows to try  I.  commands in runtime  codeceptjs shell", 
            "title": "Shell"
        }, 
        {
            "location": "/commands/#generators", 
            "text": "Create new test  codeceptjs generate test  Create new pageobject  codeceptjs generate pageobject  Create new helper  codeceptjs generate helper", 
            "title": "Generators"
        }, 
        {
            "location": "/commands/#typescript-definitions", 
            "text": "TypeScript Definitions allows IDEs to provide autocompletion when writing tests.  codeceptjs def\ncodeceptjs def --config path/to/codecept.json  Produces  steps.d.ts  file, which referenced in the very beginning of a test file.  ///  reference path= ./steps.d.ts  / \nFeature('My new test');  After doing that IDE should provide autocompletion for  I  object inside  Scenario  and  within  blocks.", 
            "title": "TypeScript Definitions"
        }, 
        {
            "location": "/commands/#list-commands", 
            "text": "Prints all available methods of  I  to console  codeceptjs list", 
            "title": "List Commands"
        }, 
        {
            "location": "/locators/", 
            "text": "Locators\n\n\nCodeceptJS provides flexible strategies for locating elements:\n\n\n\n\nCSS and XPath locators\n\n\nSemantic locators\n: by link text, by button text, by field names, etc.\n\n\nLocator Builder\n\n\nID locators\n: by CSS id or by accessibility id\n\n\n\n\nMost methods in CodeceptJS use locators which can be either a string or an object.\n\n\nIf the locator is an object, it should have a single element, with the key signifying the locator type (\nid\n, \nname\n, \ncss\n, \nxpath\n, \nlink\n, or \nclass\n) and the value being the locator itself. This is called a \"strict\" locator.\n\n\nExamples:\n\n\n\n\n{id: 'foo'} matches \ndiv id=\"foo\"\n\n\n{name: 'foo'} matches \ndiv name=\"foo\"\n\n\n{css: 'input[type=input][value=foo]'} matches \ninput type=\"input\" value=\"foo\"\n\n\n{xpath: \"//input[@type='submit'][contains(@value, 'foo')]\"} matches \ninput type=\"submit\" value=\"foobar\"\n\n\n{class: 'foo'} matches \ndiv class=\"foo\"\n\n\n\n\nWriting good locators can be tricky.\nThe Mozilla team has written an excellent guide titled \nWriting reliable locators for Selenium and WebDriver tests\n.\n\n\nIf you prefer, you may also pass a string for the locator. This is called a \"fuzzy\" locator.\nIn this case, CodeceptJS uses a variety of heuristics (depending on the exact method called) to determine what element you're referring to. If you are locating a clickable element or an input element, CodeceptJS will use \nsemantic locators\n.\n\n\nFor example, here's the heuristic used for the \nfillField\n method:\n\n\n\n\nDoes the locator look like an ID selector (e.g. \"#foo\")? If so, try to find an input element matching that ID.\n\n\nIf nothing found, check if locator looks like a CSS selector. If so, run it.\n\n\nIf nothing found, check if locator looks like an XPath expression. If so, run it.\n\n\nIf nothing found, check if there is an input element with a corresponding name.\n\n\nIf nothing found, check if there is a label with specified text for input element.\n\n\nIf nothing found, throw an \nElementNotFound\n exception.\n\n\n\n\nBe warned that fuzzy locators can be significantly slower than strict locators.\nIf speed is a concern, it's recommended you stick with explicitly specifying the locator type via object syntax.\n\n\nCSS and XPath\n\n\nBoth CSS and XPath is supported. Usually CodeceptJS can guess locator's type:\n\n\n// select by CSS\nI.seeElement('.user .profile');\nI.seeElement('#user-name');\n\n// select by XPath\nI.seeElement('//table/tr/td[position()=3]');\n\n\n\n\nTo specify exact locator type use \nstrict locators\n:\n\n\n// it's not clear that 'button' is actual CSS locator\nI.seeElement({ css: 'button' });\n\n// it's not clear that 'descendant::table/tr' is actual XPath locator\nI.seeElement({ xpath: 'descendant::table/tr' });\n\n\n\n\nSemantic Locators\n\n\nCodeceptJS can guess an element's locator from context.\nFor example, when clicking CodeceptJS will try to find a link or button by their text\nWhen typing into a field this field can be located by its name, placeholder.\n\n\nI.click('Sign In');\nI.fillField('Username', 'davert');\n\n\n\n\nVarious strategies are used to locate semantic elements. However, they may run slower than specifying locator by XPath or CSS.\n\n\nLocator Builder\n\n\nCodeceptJS provides a fluent builder to compose custom locators in JavaScript. Use \nlocate\n function to start.\n\n\nTo locate \na\n element inside \nlabel\n with text: 'Hello' use:\n\n\nlocate('a')\n  .withAttr({ href: '#' })\n  .inside(locate('label').withText('Hello'));\n\n\n\n\nwhich will produce following XPath:\n\n\n.//a[@href = '#'][ancestor::label[contains(., 'Hello')]]\n\n\n\n\nLocator builder accepts both XPath and CSS as parameters but converts them to XPath as more feature-rich format.\nSometimes provided locators can get very long so it's recommended to simplify the output by providing a brief description for generated XPath:\n\n\nlocate('//table')\n  .find('a')\n  .withText('Edit')\n  .as('edit button')\n// will be printed as 'edit button'\n\n\n\n\nlocate\n has following methods:\n\n\nfind\n\n\nFinds an element inside a located.\n\n\n// find td inside a table\nlocate('table').find('td');\n\n\n\n\nSwitches current element to found one.\nCan accept another \nlocate\n call or strict locator.\n\n\nwithAttr\n\n\nFind an element with provided attributes\n\n\n// find input with placeholder 'Type in name'\nlocate('input').withAttr({ placeholder: 'Type in name' });\n\n\n\n\nwithChild\n\n\nFinds an element which contains a child element provided:\n\n\n// finds form with \nselect\n inside it\nlocate('form').withChild('select');\n\n\n\n\nwithText\n\n\nFinds element containing a text\n\n\nlocate('span').withText('Warning');\n\n\n\n\nfirst\n\n\nGet first element:\n\n\nlocate('#table td').first();\n\n\n\n\nlast\n\n\nGet last element:\n\n\nlocate('#table td').last();\n\n\n\n\nat\n\n\nGet element at position:\n\n\n// first element\nlocate('#table td').at(1);\n// second element\nlocate('#table td').at(2);\n// second element from end\nlocate('#table td').at(-2);\n\n\n\n\ninside\n\n\nFinds an element which contains an provided ancestor:\n\n\n// finds `select` element inside #user_profile\nlocate('select').inside('form#user_profile');\n\n\n\n\nbefore\n\n\nFinds element located before the provided one\n\n\n// finds `button` before .btn-cancel\nlocate('button').before('.btn-cancel');\n\n\n\n\nafter\n\n\nFinds element located after the provided one\n\n\n// finds `button` after .btn-cancel\nlocate('button').after('.btn-cancel');\n\n\n\n\nID Locators\n\n\nID locators are best to select the exact semantic element in web and mobile testing:\n\n\n\n\n#user\n or \n{ id: 'user' }\n finds element with id=\"user\"\n\n\n~user\n finds element with accessibility id \"user\" (in Mobile testing) or with \naria-label=user\n.\n\n\n\n\ndone()", 
            "title": "Locators"
        }, 
        {
            "location": "/locators/#locators", 
            "text": "CodeceptJS provides flexible strategies for locating elements:   CSS and XPath locators  Semantic locators : by link text, by button text, by field names, etc.  Locator Builder  ID locators : by CSS id or by accessibility id   Most methods in CodeceptJS use locators which can be either a string or an object.  If the locator is an object, it should have a single element, with the key signifying the locator type ( id ,  name ,  css ,  xpath ,  link , or  class ) and the value being the locator itself. This is called a \"strict\" locator.  Examples:   {id: 'foo'} matches  div id=\"foo\"  {name: 'foo'} matches  div name=\"foo\"  {css: 'input[type=input][value=foo]'} matches  input type=\"input\" value=\"foo\"  {xpath: \"//input[@type='submit'][contains(@value, 'foo')]\"} matches  input type=\"submit\" value=\"foobar\"  {class: 'foo'} matches  div class=\"foo\"   Writing good locators can be tricky.\nThe Mozilla team has written an excellent guide titled  Writing reliable locators for Selenium and WebDriver tests .  If you prefer, you may also pass a string for the locator. This is called a \"fuzzy\" locator.\nIn this case, CodeceptJS uses a variety of heuristics (depending on the exact method called) to determine what element you're referring to. If you are locating a clickable element or an input element, CodeceptJS will use  semantic locators .  For example, here's the heuristic used for the  fillField  method:   Does the locator look like an ID selector (e.g. \"#foo\")? If so, try to find an input element matching that ID.  If nothing found, check if locator looks like a CSS selector. If so, run it.  If nothing found, check if locator looks like an XPath expression. If so, run it.  If nothing found, check if there is an input element with a corresponding name.  If nothing found, check if there is a label with specified text for input element.  If nothing found, throw an  ElementNotFound  exception.   Be warned that fuzzy locators can be significantly slower than strict locators.\nIf speed is a concern, it's recommended you stick with explicitly specifying the locator type via object syntax.", 
            "title": "Locators"
        }, 
        {
            "location": "/locators/#css-and-xpath", 
            "text": "Both CSS and XPath is supported. Usually CodeceptJS can guess locator's type:  // select by CSS\nI.seeElement('.user .profile');\nI.seeElement('#user-name');\n\n// select by XPath\nI.seeElement('//table/tr/td[position()=3]');  To specify exact locator type use  strict locators :  // it's not clear that 'button' is actual CSS locator\nI.seeElement({ css: 'button' });\n\n// it's not clear that 'descendant::table/tr' is actual XPath locator\nI.seeElement({ xpath: 'descendant::table/tr' });", 
            "title": "CSS and XPath"
        }, 
        {
            "location": "/locators/#semantic-locators", 
            "text": "CodeceptJS can guess an element's locator from context.\nFor example, when clicking CodeceptJS will try to find a link or button by their text\nWhen typing into a field this field can be located by its name, placeholder.  I.click('Sign In');\nI.fillField('Username', 'davert');  Various strategies are used to locate semantic elements. However, they may run slower than specifying locator by XPath or CSS.", 
            "title": "Semantic Locators"
        }, 
        {
            "location": "/locators/#locator-builder", 
            "text": "CodeceptJS provides a fluent builder to compose custom locators in JavaScript. Use  locate  function to start.  To locate  a  element inside  label  with text: 'Hello' use:  locate('a')\n  .withAttr({ href: '#' })\n  .inside(locate('label').withText('Hello'));  which will produce following XPath:  .//a[@href = '#'][ancestor::label[contains(., 'Hello')]]  Locator builder accepts both XPath and CSS as parameters but converts them to XPath as more feature-rich format.\nSometimes provided locators can get very long so it's recommended to simplify the output by providing a brief description for generated XPath:  locate('//table')\n  .find('a')\n  .withText('Edit')\n  .as('edit button')\n// will be printed as 'edit button'  locate  has following methods:  find  Finds an element inside a located.  // find td inside a table\nlocate('table').find('td');  Switches current element to found one.\nCan accept another  locate  call or strict locator.  withAttr  Find an element with provided attributes  // find input with placeholder 'Type in name'\nlocate('input').withAttr({ placeholder: 'Type in name' });  withChild  Finds an element which contains a child element provided:  // finds form with  select  inside it\nlocate('form').withChild('select');  withText  Finds element containing a text  locate('span').withText('Warning');  first  Get first element:  locate('#table td').first();  last  Get last element:  locate('#table td').last();  at  Get element at position:  // first element\nlocate('#table td').at(1);\n// second element\nlocate('#table td').at(2);\n// second element from end\nlocate('#table td').at(-2);  inside  Finds an element which contains an provided ancestor:  // finds `select` element inside #user_profile\nlocate('select').inside('form#user_profile');  before  Finds element located before the provided one  // finds `button` before .btn-cancel\nlocate('button').before('.btn-cancel');  after  Finds element located after the provided one  // finds `button` after .btn-cancel\nlocate('button').after('.btn-cancel');", 
            "title": "Locator Builder"
        }, 
        {
            "location": "/locators/#id-locators", 
            "text": "ID locators are best to select the exact semantic element in web and mobile testing:   #user  or  { id: 'user' }  finds element with id=\"user\"  ~user  finds element with accessibility id \"user\" (in Mobile testing) or with  aria-label=user .   done()", 
            "title": "ID Locators"
        }, 
        {
            "location": "/reports/", 
            "text": "Reporters\n\n\nCli\n\n\n(default)\n\n\nBy default CodeceptJS provides cli reporter with console output.\nTest names and failures will be printed to screen.\n\n\nGitHub --\n \u2713 search in 2577ms\n \u2713 signin in 2170ms\n \u2716 register in 1306ms\n\n-- FAILURES:\n\n  1) GitHub: register:\n      Field q not found by name|text|CSS|XPath\n\n  Scenario Steps:\n\n  - I.fillField(\nq\n, \naaa\n) at examples/github_test.js:29:7\n  - I.fillField(\nuser[password]\n, \nuser@user.com\n) at examples/github_test.js:28:7\n  - I.fillField(\nuser[email]\n, \nuser@user.com\n) at examples/github_test.js:27:7\n  - I.fillField(\nuser[login]\n, \nUser\n) at examples/github_test.js:26:7\n\n\n\n  Run with --verbose flag to see NodeJS stacktrace\n\n\n\n\nFor dynamic step-by-step output add \n--steps\n option to \nrun\n command:\n\n\nGitHub --\n search\n \u2022 I am on page \nhttps://github.com\n\n \u2022 I am on page \nhttps://github.com/search\n\n \u2022 I fill field \nSearch GitHub\n, \nCodeceptJS\n\n \u2022 I press key \nEnter\n\n \u2022 I see \nCodeception/CodeceptJS\n, \na\n\n \u2713 OK in 2681ms\n\n signin\n \u2022 I am on page \nhttps://github.com\n\n \u2022 I click \nSign in\n\n \u2022 I see \nSign in to GitHub\n\n \u2022 I fill field \nUsername or email address\n, \nsomething@totest.com\n\n \u2022 I fill field \nPassword\n, \n123456\n\n \u2022 I click \nSign in\n\n \u2022 I see \nIncorrect username or password.\n, \n.flash-error\n\n \u2713 OK in 2252ms\n\n register\n \u2022 I am on page \nhttps://github.com\n\n   Within .js-signup-form:\n   \u2022 I fill field \nuser[login]\n, \nUser\n\n   \u2022 I fill field \nuser[email]\n, \nuser@user.com\n\n   \u2022 I fill field \nuser[password]\n, \nuser@user.com\n\n   \u2022 I fill field \nq\n, \naaa\n\n \u2716 FAILED in 1260ms\n\n\n\n\nTo get additional information about test execution use \n--debug\n option. This will show execution steps\nas well as notices from test runner. To get even more information with more technical details like error stack traces,\nand global promises, or events use \n--verbose\n mode.\n\n\nGitHub --\n register\n   [1] Starting recording promises\n   Emitted | test.before\n \n WebDriverIO._before\n   [1] Queued | hook WebDriverIO._before()\n   [1] Queued | amOnPage: https://github.com\n   Emitted | step.before (I am on page \nhttps://github.com\n)\n \u2022 I am on page \nhttps://github.com\n\n   Emitted | step.after (I am on page \nhttps://github.com\n)\n   Emitted | test.start ([object Object])\n...\n\n\n\n\nPlease use verbose output when reporting issues to GitHub.\n\n\nAllure\n\n\n(recommended)\n\n\nAllure reporter\n is a tool to store and display test reports.\nIt provides nice web UI which contains all important information on test execution.\nCodeceptJS has built-in support for Allure reports. Inside reports you will have all steps, substeps and screenshots.\n\n\n\n\nDisclaimer: Allure is a standalone tool. Please refer to \nAllure documentation\n to learn more about using Allure reports.\n\n\nAllure requires \nJava 8\n to work. Then Allure can be installed via NPM:\n\n\nnpm install -g allure-commandline --save-dev\n\n\n\n\nAdd \nAllure plugin\n in config under \nplugins\n section.\n\n\nplugins\n: {\n    \nallure\n: {\n    }\n}\n\n\n\n\nRun tests with allure plugin enabled:\n\n\ncodeceptjs run --plugins allure\n\n\n\n\n(optionally) To enable allure plugin permanently include \n\"enabled\": true\n into plugin config:\n\n\nplugins\n: {\n    \nallure\n: {\n      \nenabled\n: true\n    }\n}\n\n\n\n\nLaunch Allure server and see the report like on a screenshot above:\n\n\nallure serve output\n\n\n\n\nAllure reporter aggregates data from other plugins like \nstepByStepReport\n and \nscreenshotOnFail\n\n\nXML\n\n\nUse default xunit reporter of Mocha to print xml reports. Provide \n--reporter xunit\n to get the report to screen.\nIt is recommended to use more powerful \nmocha-junit-reporter\n package\nto get better support for Jenkins CI.\n\n\nInstall it via NPM (locally or globally, depending on CodeceptJS installation type):\n\n\nnpm i mocha-junit-reporter\n\n\n\n\nAdditional configuration should be added to \ncodecept.json\n to print xml report to \noutput\n directory:\n\n\n  \nmocha\n: {\n    \nreporterOptions\n: {\n        \nmochaFile\n: \noutput/result.xml\n\n    }\n  },\n\n\n\n\nExecute CodeceptJS with JUnit reporter:\n\n\ncodeceptjs run --reporter mocha-junit-reporter\n\n\n\n\nResult will be located at \noutput/result.xml\n file.\n\n\nHtml\n\n\nBest HTML reports could be produced with \nmochawesome\n reporter.\n\n\n\n\nInstall it via NPM:\n\n\nnpm i mochawesome\n\n\n\n\nIf you get an error like this\n\n\nmochawesome\n reporter not found\n\ninvalid reporter \nmochawesome\n\n\n\n\n\nMake sure to have mocha installed or install it:\n\n\nnpm i mocha -D\n\n\n\n\nConfigure it to use \noutput\n directory to print HTML reports:\n\n\n  \nmocha\n: {\n    \nreporterOptions\n: {\n        \nreportDir\n: \noutput\n\n    }\n  },\n\n\n\n\nExecute CodeceptJS with HTML reporter:\n\n\ncodeceptjs run --reporter mochawesome\n\n\n\n\nResult will be located at \noutput/index.html\n file.\n\n\nAdvanced usage\n\n\nWant to have screenshots for failed tests?\nThen add Mochawesome helper to your config:\n\n\n  \nhelpers\n: {\n    \nMochawesome\n: {\n        \nuniqueScreenshotNames\n: \ntrue\n\n    }\n  },\n\n\n\n\nThen tests with failure will have screenshots.\n\n\nConfiguration\n\n\nThis helper should be configured in codecept.json\n\n\n\n\nuniqueScreenshotNames\n (optional, default: false) - option to prevent screenshot override if you have scenarios with the same name in different suites. This option should be the same as in common helper.\n\n\ndisableScreenshots\n (optional, default: false)  - don't save screenshot on failure. This option should be the same as in common helper.\n\n\n\n\nAlso if you will add Mochawesome helper, then you will able to add custom context in report:\n\n\naddMochawesomeContext\n\n\nAdds context to executed test in HTML report:\n\n\nI.addMochawesomeContext('simple string');\nI.addMochawesomeContext('http://www.url.com/pathname');\nI.addMochawesomeContext('http://www.url.com/screenshot-maybe.jpg');\nI.addMochawesomeContext({title: 'expected output',\n                         value: {\n                           a: 1,\n                           b: '2',\n                           c: 'd'\n                         }\n});\n\n\n\n\nParameters\n\n\n\n\ncontext\n  string, url, path to screenshot, object. See \nthis\n\n\n\n\nMulti Reports\n\n\nWant to use several reporters in the same time? Try to use \nmocha-multi\n reporter\n\n\nInstall it via NPM:\n\n\nnpm i mocha-multi\n\n\n\n\nConfigure mocha-multi with reports that you want:\n\n\n  \nmocha\n: {\n    \nreporterOptions\n: {\n      \ncodeceptjs-cli-reporter\n: {\n        \nstdout\n: \n-\n,\n        \noptions\n: {\n          \nverbose\n: true,\n          \nsteps\n: true,\n        }\n      },\n      \nmochawesome\n: {\n       \nstdout\n: \n./output/console.log\n,\n       \noptions\n: {\n         \nreportDir\n: \n./output\n,\n         \nreportFilename\n: \nreport\n\n      }\n    }\n  }\n\n\n\n\nExecute CodeceptJS with mocha-multi reporter:\n\n\ncodeceptjs run --reporter mocha-multi\n\n\n\n\nThis will give you cli with steps in console and HTML report in \noutput\n directory.", 
            "title": "Reports"
        }, 
        {
            "location": "/reports/#reporters", 
            "text": "", 
            "title": "Reporters"
        }, 
        {
            "location": "/reports/#cli", 
            "text": "(default)  By default CodeceptJS provides cli reporter with console output.\nTest names and failures will be printed to screen.  GitHub --\n \u2713 search in 2577ms\n \u2713 signin in 2170ms\n \u2716 register in 1306ms\n\n-- FAILURES:\n\n  1) GitHub: register:\n      Field q not found by name|text|CSS|XPath\n\n  Scenario Steps:\n\n  - I.fillField( q ,  aaa ) at examples/github_test.js:29:7\n  - I.fillField( user[password] ,  user@user.com ) at examples/github_test.js:28:7\n  - I.fillField( user[email] ,  user@user.com ) at examples/github_test.js:27:7\n  - I.fillField( user[login] ,  User ) at examples/github_test.js:26:7\n\n\n\n  Run with --verbose flag to see NodeJS stacktrace  For dynamic step-by-step output add  --steps  option to  run  command:  GitHub --\n search\n \u2022 I am on page  https://github.com \n \u2022 I am on page  https://github.com/search \n \u2022 I fill field  Search GitHub ,  CodeceptJS \n \u2022 I press key  Enter \n \u2022 I see  Codeception/CodeceptJS ,  a \n \u2713 OK in 2681ms\n\n signin\n \u2022 I am on page  https://github.com \n \u2022 I click  Sign in \n \u2022 I see  Sign in to GitHub \n \u2022 I fill field  Username or email address ,  something@totest.com \n \u2022 I fill field  Password ,  123456 \n \u2022 I click  Sign in \n \u2022 I see  Incorrect username or password. ,  .flash-error \n \u2713 OK in 2252ms\n\n register\n \u2022 I am on page  https://github.com \n   Within .js-signup-form:\n   \u2022 I fill field  user[login] ,  User \n   \u2022 I fill field  user[email] ,  user@user.com \n   \u2022 I fill field  user[password] ,  user@user.com \n   \u2022 I fill field  q ,  aaa \n \u2716 FAILED in 1260ms  To get additional information about test execution use  --debug  option. This will show execution steps\nas well as notices from test runner. To get even more information with more technical details like error stack traces,\nand global promises, or events use  --verbose  mode.  GitHub --\n register\n   [1] Starting recording promises\n   Emitted | test.before\n   WebDriverIO._before\n   [1] Queued | hook WebDriverIO._before()\n   [1] Queued | amOnPage: https://github.com\n   Emitted | step.before (I am on page  https://github.com )\n \u2022 I am on page  https://github.com \n   Emitted | step.after (I am on page  https://github.com )\n   Emitted | test.start ([object Object])\n...  Please use verbose output when reporting issues to GitHub.", 
            "title": "Cli"
        }, 
        {
            "location": "/reports/#allure", 
            "text": "(recommended)  Allure reporter  is a tool to store and display test reports.\nIt provides nice web UI which contains all important information on test execution.\nCodeceptJS has built-in support for Allure reports. Inside reports you will have all steps, substeps and screenshots.   Disclaimer: Allure is a standalone tool. Please refer to  Allure documentation  to learn more about using Allure reports.  Allure requires  Java 8  to work. Then Allure can be installed via NPM:  npm install -g allure-commandline --save-dev  Add  Allure plugin  in config under  plugins  section.  plugins : {\n     allure : {\n    }\n}  Run tests with allure plugin enabled:  codeceptjs run --plugins allure  (optionally) To enable allure plugin permanently include  \"enabled\": true  into plugin config:  plugins : {\n     allure : {\n       enabled : true\n    }\n}  Launch Allure server and see the report like on a screenshot above:  allure serve output  Allure reporter aggregates data from other plugins like  stepByStepReport  and  screenshotOnFail", 
            "title": "Allure"
        }, 
        {
            "location": "/reports/#xml", 
            "text": "Use default xunit reporter of Mocha to print xml reports. Provide  --reporter xunit  to get the report to screen.\nIt is recommended to use more powerful  mocha-junit-reporter  package\nto get better support for Jenkins CI.  Install it via NPM (locally or globally, depending on CodeceptJS installation type):  npm i mocha-junit-reporter  Additional configuration should be added to  codecept.json  to print xml report to  output  directory:     mocha : {\n     reporterOptions : {\n         mochaFile :  output/result.xml \n    }\n  },  Execute CodeceptJS with JUnit reporter:  codeceptjs run --reporter mocha-junit-reporter  Result will be located at  output/result.xml  file.", 
            "title": "XML"
        }, 
        {
            "location": "/reports/#html", 
            "text": "Best HTML reports could be produced with  mochawesome  reporter.   Install it via NPM:  npm i mochawesome  If you get an error like this  mochawesome  reporter not found\n\ninvalid reporter  mochawesome   Make sure to have mocha installed or install it:  npm i mocha -D  Configure it to use  output  directory to print HTML reports:     mocha : {\n     reporterOptions : {\n         reportDir :  output \n    }\n  },  Execute CodeceptJS with HTML reporter:  codeceptjs run --reporter mochawesome  Result will be located at  output/index.html  file.  Advanced usage  Want to have screenshots for failed tests?\nThen add Mochawesome helper to your config:     helpers : {\n     Mochawesome : {\n         uniqueScreenshotNames :  true \n    }\n  },  Then tests with failure will have screenshots.  Configuration  This helper should be configured in codecept.json   uniqueScreenshotNames  (optional, default: false) - option to prevent screenshot override if you have scenarios with the same name in different suites. This option should be the same as in common helper.  disableScreenshots  (optional, default: false)  - don't save screenshot on failure. This option should be the same as in common helper.   Also if you will add Mochawesome helper, then you will able to add custom context in report:  addMochawesomeContext  Adds context to executed test in HTML report:  I.addMochawesomeContext('simple string');\nI.addMochawesomeContext('http://www.url.com/pathname');\nI.addMochawesomeContext('http://www.url.com/screenshot-maybe.jpg');\nI.addMochawesomeContext({title: 'expected output',\n                         value: {\n                           a: 1,\n                           b: '2',\n                           c: 'd'\n                         }\n});  Parameters   context   string, url, path to screenshot, object. See  this", 
            "title": "Html"
        }, 
        {
            "location": "/reports/#multi-reports", 
            "text": "Want to use several reporters in the same time? Try to use  mocha-multi  reporter  Install it via NPM:  npm i mocha-multi  Configure mocha-multi with reports that you want:     mocha : {\n     reporterOptions : {\n       codeceptjs-cli-reporter : {\n         stdout :  - ,\n         options : {\n           verbose : true,\n           steps : true,\n        }\n      },\n       mochawesome : {\n        stdout :  ./output/console.log ,\n        options : {\n          reportDir :  ./output ,\n          reportFilename :  report \n      }\n    }\n  }  Execute CodeceptJS with mocha-multi reporter:  codeceptjs run --reporter mocha-multi  This will give you cli with steps in console and HTML report in  output  directory.", 
            "title": "Multi Reports"
        }, 
        {
            "location": "/configuration/", 
            "text": "Configuration\n\n\nCodeceptJS configuration is set in \ncodecept.json\n file.\n\n\nAfter running \ncodeceptjs init\n it should be saved in test root.\n\n\nHere is an overview of available options with their defaults:\n\n\n\n\ntests\n: \n\"./*_test.js\"\n - pattern to locate tests\n\n\ngrep\n: - patern to filter tests by name\n\n\ninclude\n: \n{}\n - actors and page objects to be registered in DI container and included in tests. Accepts objects and module \nrequire\n paths\n\n\ntimeout\n: \n10000\n - default tests timeout\n\n\noutput\n: \n\"./output\"\n - where to store failure screenshots, etc\n\n\nhelpers\n: \n{}\n - list of enabled helpers\n\n\nmocha\n: \n{}\n - mocha options, \nreporters\n can be configured here\n\n\nmultiple\n: \n{}\n - multiple options, see \nMultiple Execution\n\n\nbootstrap\n: \n\"./bootstrap.js\"\n - an option to run code \nbefore\n tests are run. See \nHooks\n).\n\n\nbootstrapAll\n: \n\"./bootstrap.js\"\n - an option to run code \nbefore\n all test suites are run when using the run-multiple mode. See \nHooks\n).\n\n\nteardown\n: - an option to run code \nafter\n  all test suites are run when using the run-multiple mode. See \nHooks\n.\n\n\nteardownAll\n: - an option to run code \nafter\n tests are run. See \nHooks\n.\n\n\nnoGlobals\n: \nfalse\n - disable registering global variables like \nActor\n, \nHelper\n, \npause\n, \nwithin\n, \nDataTable\n\n\nhooks\n: - include custom listeners to plug into execution workflow. See \nCustom Hooks\n\n\ntranslation\n: - \nlocale\n to be used to print s  teps output, as well as used in source code.\n\n\n\n\nDynamic Configuration\n\n\nBy default \ncodecept.json\n is used for configuration. You can override its values in runtime by using \n--override\n or \n-o\n option in command line, passing valid JSON as a value:\n\n\ncodeceptjs run -o '{ \nhelpers\n: {\nWebDriverIO\n: {\nbrowser\n: \nfirefox\n}}}'\n\n\n\n\nYou can also switch to JS configuration format for more dynamic options.\n Create \ncodecept.conf.js\n file and make it export \nconfig\n property.\n\n\nSee the config example:\n\n\nexports.config = {\n  helpers: {\n    WebDriverIO: {\n      // load variables from the environment and provide defaults\n      url: process.env.CODECEPT_URL || 'http://localhost:3000',\n\n      user: process.env.CLOUDSERVICE_USER,\n      key: process.env.CLOUDSERVICE_KEY,\n\n      coloredLogs: true,\n      waitForTimeout: 10000\n    }\n  },\n\n  // don't build monolithic configs\n  mocha: require('./mocha.conf.js') || {},\n  include: {\n    I: './src/steps_file.js',\n    loginPage: './src/pages/login_page',\n    dashboardPage: new DashboardPage()\n  }\n\n  // here goes config as it was in codecept.json\n  // ....\n};\n\n\n\n\n(Don't copy-paste this config, it's just demo)\n\n\nIf you prefer to store your configuration files in a different location, or with a different name, you can do that with \n--config\n or `-c:\n\n\ncodeceptjs run --config=./path/to/my/config.json\n\n\n\n\nProfile\n\n\nUsing values from \nprocess.profile\n you can change the config dynamically.\nIt provides value of \n--profile\n option passed to runner.\nUse its value to change config value on the fly.\n\n\nFor instance, with the config above we can change browser value using \nprofile\n option\n\n\ncodeceptjs run --profile firefox\n\n\n\n\nexports.config = {\n  helpers: {\n    WebDriverIO: {\n      url: 'http://localhost:3000',\n      // load value from `profile`\n      browser: process.profile || 'firefox'\n\n    }\n  }\n};", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#configuration", 
            "text": "CodeceptJS configuration is set in  codecept.json  file.  After running  codeceptjs init  it should be saved in test root.  Here is an overview of available options with their defaults:   tests :  \"./*_test.js\"  - pattern to locate tests  grep : - patern to filter tests by name  include :  {}  - actors and page objects to be registered in DI container and included in tests. Accepts objects and module  require  paths  timeout :  10000  - default tests timeout  output :  \"./output\"  - where to store failure screenshots, etc  helpers :  {}  - list of enabled helpers  mocha :  {}  - mocha options,  reporters  can be configured here  multiple :  {}  - multiple options, see  Multiple Execution  bootstrap :  \"./bootstrap.js\"  - an option to run code  before  tests are run. See  Hooks ).  bootstrapAll :  \"./bootstrap.js\"  - an option to run code  before  all test suites are run when using the run-multiple mode. See  Hooks ).  teardown : - an option to run code  after   all test suites are run when using the run-multiple mode. See  Hooks .  teardownAll : - an option to run code  after  tests are run. See  Hooks .  noGlobals :  false  - disable registering global variables like  Actor ,  Helper ,  pause ,  within ,  DataTable  hooks : - include custom listeners to plug into execution workflow. See  Custom Hooks  translation : -  locale  to be used to print s  teps output, as well as used in source code.", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#dynamic-configuration", 
            "text": "By default  codecept.json  is used for configuration. You can override its values in runtime by using  --override  or  -o  option in command line, passing valid JSON as a value:  codeceptjs run -o '{  helpers : { WebDriverIO : { browser :  firefox }}}'  You can also switch to JS configuration format for more dynamic options.\n Create  codecept.conf.js  file and make it export  config  property.  See the config example:  exports.config = {\n  helpers: {\n    WebDriverIO: {\n      // load variables from the environment and provide defaults\n      url: process.env.CODECEPT_URL || 'http://localhost:3000',\n\n      user: process.env.CLOUDSERVICE_USER,\n      key: process.env.CLOUDSERVICE_KEY,\n\n      coloredLogs: true,\n      waitForTimeout: 10000\n    }\n  },\n\n  // don't build monolithic configs\n  mocha: require('./mocha.conf.js') || {},\n  include: {\n    I: './src/steps_file.js',\n    loginPage: './src/pages/login_page',\n    dashboardPage: new DashboardPage()\n  }\n\n  // here goes config as it was in codecept.json\n  // ....\n};  (Don't copy-paste this config, it's just demo)  If you prefer to store your configuration files in a different location, or with a different name, you can do that with  --config  or `-c:  codeceptjs run --config=./path/to/my/config.json", 
            "title": "Dynamic Configuration"
        }, 
        {
            "location": "/configuration/#profile", 
            "text": "Using values from  process.profile  you can change the config dynamically.\nIt provides value of  --profile  option passed to runner.\nUse its value to change config value on the fly.  For instance, with the config above we can change browser value using  profile  option  codeceptjs run --profile firefox  exports.config = {\n  helpers: {\n    WebDriverIO: {\n      url: 'http://localhost:3000',\n      // load value from `profile`\n      browser: process.profile || 'firefox'\n\n    }\n  }\n};", 
            "title": "Profile"
        }, 
        {
            "location": "/plugins/", 
            "text": "allure\n\n\nAllure reporter\n\n\n\n\nEnables Allure reporter.\n\n\nUsage\n\n\nTo start please install \nallure-commandline\n package (which requires Java 8)\n\n\nnpm install -g allure-commandline --save-dev\n\n\n\nAdd this plugin to config file:\n\n\nplugins\n: {\n    \nallure\n: {}\n}\n\n\n\n\nRun tests with allure plugin enabled:\n\n\ncodeceptjs run --plugins allure\n\n\n\nBy default, allure reports are saved to \noutput\n directory.\nLaunch Allure server and see the report like on a screenshot above:\n\n\nallure serve output\n\n\n\nConfiguration\n\n\n\n\ntargetDir\n - a directory where allure reports should be stored. Standard output directory is set by default.\n\n\n\n\nParameters\n\n\n\n\nconfig\n \nAny\n \n\n\n\n\nretryFailedStep\n\n\nRetries each failed step in a test.\n\n\nAdd this plugin to config file:\n\n\nplugins\n: {\n    \nrunFailedStep\n: {\n       \nenabled\n: true\n    }\n}\n\n\n\n\nRun tests with plugin enabled:\n\n\ncodeceptjs run --plugins retryFailedStep\n\n\n\nConfiguration:\n\n\n\n\nretries\n - number of retries (by default 5),\n\n\nwhen\n - function, when to perform a retry (accepts error as parameter)\n\n\nfactor\n - The exponential factor to use. Default is 2.\n\n\nminTimeout\n - The number of milliseconds before starting the first retry. Default is 1000.\n\n\nmaxTimeout\n - The maximum number of milliseconds between two retries. Default is Infinity.\n\n\nrandomize\n - Randomizes the timeouts by multiplying with a factor between 1 to 2. Default is false.\n\n\n\n\nThis plugin is very basic so it's recommended to improve it to match your custom needs.\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\nscreenshotOnFail\n\n\nCreates screenshot on failure. Screenshot is saved into \noutput\n directory.\n\n\nInitially this functionality was part of corresponding helper but has been moved into plugin since 1.4\n\n\nThis plugin is \nenabled by default\n.\n\n\nConfiguration\n\n\nConfiguration can either be taken from a corresponding helper (deprecated) or a from plugin config (recommended).\n\n\nplugins\n: {\n   \nscreenshotOnFail\n: {\n     \nenabled\n: true\n   }\n}\n\n\n\n\nPossible config options:\n\n\n\n\nuniqueScreenshotNames\n: use unique names for screenshot. Default: false.\n\n\nfullPageScreenshots\n: make full page screenshots. Default: false.\n\n\n\n\nParameters\n\n\n\n\nconfig\n  \n\n\n\n\nstepByStepReport\n\n\n\n\nGenerates step by step report for a test.\nAfter each step in a test a screenshot is created. After test executed screenshots are combined into slideshow.\nBy default, reports are generated only for failed tests.\n\n\nRun tests with plugin enabled:\n\n\ncodeceptjs run --plugins stepByStepReport\n\n\n\nConfiguration\n\n\nplugins\n: {\n   \nstepByStepReport\n: {\n     \nenabled\n: true\n   }\n}\n\n\n\n\nPossible config options:\n\n\n\n\ndeleteSuccessful\n: do not save screenshots for successfully executed tests. Default: true.\n\n\nanimateSlides\n: should animation for slides to be used. Default: true.\n\n\nignoreSteps\n: steps to ignore in report. Array of RegExps is expected. Recommended to skip \ngrab*\n and \nwait*\n steps.\n\n\nfullPageScreenshots\n: should full page screenshots be used. Default: false.\n\n\n\n\nAllure Reports\n\n\nIf Allure plugin is enabled this plugin attaches each saved screenshot to allure report.\n\n\nParameters\n\n\n\n\nconfig\n \nAny", 
            "title": "Plugins"
        }, 
        {
            "location": "/plugins/#allure", 
            "text": "Allure reporter   Enables Allure reporter.  Usage  To start please install  allure-commandline  package (which requires Java 8)  npm install -g allure-commandline --save-dev  Add this plugin to config file:  plugins : {\n     allure : {}\n}  Run tests with allure plugin enabled:  codeceptjs run --plugins allure  By default, allure reports are saved to  output  directory.\nLaunch Allure server and see the report like on a screenshot above:  allure serve output  Configuration   targetDir  - a directory where allure reports should be stored. Standard output directory is set by default.   Parameters   config   Any", 
            "title": "allure"
        }, 
        {
            "location": "/plugins/#retryfailedstep", 
            "text": "Retries each failed step in a test.  Add this plugin to config file:  plugins : {\n     runFailedStep : {\n        enabled : true\n    }\n}  Run tests with plugin enabled:  codeceptjs run --plugins retryFailedStep", 
            "title": "retryFailedStep"
        }, 
        {
            "location": "/plugins/#configuration_1", 
            "text": "retries  - number of retries (by default 5),  when  - function, when to perform a retry (accepts error as parameter)  factor  - The exponential factor to use. Default is 2.  minTimeout  - The number of milliseconds before starting the first retry. Default is 1000.  maxTimeout  - The maximum number of milliseconds between two retries. Default is Infinity.  randomize  - Randomizes the timeouts by multiplying with a factor between 1 to 2. Default is false.   This plugin is very basic so it's recommended to improve it to match your custom needs.  Parameters   config", 
            "title": "Configuration:"
        }, 
        {
            "location": "/plugins/#screenshotonfail", 
            "text": "Creates screenshot on failure. Screenshot is saved into  output  directory.  Initially this functionality was part of corresponding helper but has been moved into plugin since 1.4  This plugin is  enabled by default .", 
            "title": "screenshotOnFail"
        }, 
        {
            "location": "/plugins/#configuration_2", 
            "text": "Configuration can either be taken from a corresponding helper (deprecated) or a from plugin config (recommended).  plugins : {\n    screenshotOnFail : {\n      enabled : true\n   }\n}  Possible config options:   uniqueScreenshotNames : use unique names for screenshot. Default: false.  fullPageScreenshots : make full page screenshots. Default: false.   Parameters   config", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/#stepbystepreport", 
            "text": "Generates step by step report for a test.\nAfter each step in a test a screenshot is created. After test executed screenshots are combined into slideshow.\nBy default, reports are generated only for failed tests.  Run tests with plugin enabled:  codeceptjs run --plugins stepByStepReport", 
            "title": "stepByStepReport"
        }, 
        {
            "location": "/plugins/#configuration_3", 
            "text": "plugins : {\n    stepByStepReport : {\n      enabled : true\n   }\n}  Possible config options:   deleteSuccessful : do not save screenshots for successfully executed tests. Default: true.  animateSlides : should animation for slides to be used. Default: true.  ignoreSteps : steps to ignore in report. Array of RegExps is expected. Recommended to skip  grab*  and  wait*  steps.  fullPageScreenshots : should full page screenshots be used. Default: false.", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/#allure-reports", 
            "text": "If Allure plugin is enabled this plugin attaches each saved screenshot to allure report.  Parameters   config   Any", 
            "title": "Allure Reports"
        }, 
        {
            "location": "/translation/", 
            "text": "Translation\n\n\nTest output and the way tests are written can be localized.\nThis way scenarios can be written in almost native language using UTF support of JavaScript.\nIf you have non-English team and you work on non-English project consider enabling translation\nby setting translation to \none of available languages\n.\n\n\nPlease refer to translated steps inside translation files and send Pull Requests to add missing.\n\n\nTo get autocompletion for localized method names generate definitions by running\n\n\ncodeceptjs def\n\n\n\n\nRussian\n\n\nAdd to config:\n\n\n  \ntranslation\n: \nru-RU\n\n\n\n\n\nwhen running with \n--steps\n option steps output will be translated:\n\n\n\n\nThis also enables localized method names for actor object.\n\n\nThis way tests can be written in native language while it is still JavaScript:\n\n\nScenario('\u043f\u0440\u043e\u0431\u0443\u044e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442', (\u042f) =\n {\n    \u042f.\u043d\u0430_\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435('http://yandex.ru/referats');\n    \u042f.\u0432\u0438\u0436\u0443(\n\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442 \u043f\u043e\n);\n    \u042f.\u0432\u044b\u0431\u0438\u0440\u0430\u044e_\u043e\u043f\u0446\u0438\u044e('\u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u0438');\n    \u042f.\u043a\u043b\u0438\u043a\u0430\u044e(\n\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442\n);\n    \u042f.\u0432\u0438\u0436\u0443(\n\u0420\u0435\u0444\u0435\u0440\u0430\u0442 \u043f\u043e \u043f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u0438\n);\n});\n\n\n\n\nPortuguese\n\n\nTo write your tests in portuguese you can enable the portuguese translation in config file like:\n\n\n  \ntranslation\n: \npt-BR\n\n\n\n\n\nNow you can write test like this:\n\n\nScenario('Efetuar login', (Eu) =\n {\n    Eu.estouNaPagina('http://minhaAplicacao.com.br');\n    Eu.preenchoOCampo(\nlogin\n, \nusuario@minhaAplicacao.com.br\n);\n    Eu.preenchoOCampo(\nsenha\n, \n123456\n);\n    Eu.clico(\nEntrar\n);\n    Eu.vejo(\nSeja bem vindo usu\u00e1rio!\n);\n});\n\n\n\n\nItalian\n\n\nAdd to config\n\n\n  \ntranslation\n: \nit-IT\n\n\n\n\n\nNow you can write test like this:\n\n\nScenario('Effettuare il Login su GitHub', (io) =\n {\n    io.sono_sulla_pagina('https://github.com/login');\n    io.compilo_il_campo(\nUsername or email address\n, \ngiuseppe-santoro\n);\n    io.compilo_il_campo(\nPassword\n, \n*********\n);\n    io.faccio_click_su(\nSign in\n);\n    io.vedo(\nLearn Git and GitHub without any code!\n);\n});\n\n\n\n\nPolish\n\n\nAdd to config\n\n\n  \ntranslation\n: \npl-PL\n\n\n\n\n\nNow you can write test like this:\n\n\nScenario('Zak\u0142adanie konta free trial na stronie g\u0142\u00f3wnej GetResponse', (Ja) =\n {\n    Ja.jestem_na_stronie('https://getresponse.com');\n    Ja.wype\u0142niam_pole(\nEmail address\n, \nsjakubowski@getresponse.com\n);\n    Ja.wype\u0142niam_pole(\nPassword\n, \ndigital-marketing-systems\n);\n    Ja.klikam('Sign up');\n    Ja.czekam(1);\n    Ja.widz\u0119_w_adresie_url('/account_free_created.html');\n});\n\n\n\n\nChinese\n\n\nAdd to config:\n\n\n  \ntranslation\n: \nzh-CN\n\n\n\n\n\nor\n\n\n  \ntranslation\n: \nzh-TW\n\n\n\n\n\nThis way tests can be written in Chinese language while it is still JavaScript:\n\n\nFeature('CodeceptJS \u6f14\u793a');\n\nScenario('\u6210\u529f\u63d0\u4ea4\u8868\u5355', (\u6211) =\n {\n    \u6211.\u5728\u9875\u9762('/documentation')\n    \u6211.\u586b\u5199\u5b57\u6bb5('\u7535\u90ae', 'hello@world.com')\n    \u6211.\u586b\u5199\u5b57\u6bb5('\u5bc6\u7801', '123456')\n    \u6211.\u52fe\u9009\u9009\u9879('\u6fc0\u6d3b')\n    \u6211.\u52fe\u9009\u9009\u9879('\u7537');\n    \u6211.\u5355\u51fb('\u521b\u5efa\u7528\u6237')\n    \u6211.\u770b\u5230('\u7528\u6237\u540d\u53ef\u7528')\n    \u6211.\u5728\u5f53\u524d\u7f51\u5740\u4e2d\u770b\u4e0d\u5230('/documentation')\n});\n\n\n\n\nor\n\n\nFeature('CodeceptJS \u6f14\u793a');\n\nScenario('\u6210\u529f\u63d0\u4ea4\u8868\u55ae', (\u6211) =\n {\n    \u6211.\u5728\u9801\u9762('/documentation')\n    \u6211.\u586b\u5beb\u6b04\u4f4d('\u96fb\u90f5', 'hello@world.com')\n    \u6211.\u586b\u5beb\u6b04\u4f4d('\u5bc6\u78bc', '123456')\n    \u6211.\u52fe\u9078\u9078\u9805('\u6d3b\u5316')\n    \u6211.\u52fe\u9078\u9078\u9805('\u7537');\n    \u6211.\u55ae\u64ca('\u5efa\u7acb\u7528\u6236')\n    \u6211.\u770b\u5230('\u7528\u6236\u540d\u53ef\u7528')\n    \u6211.\u5728\u7576\u524d\u7db2\u5740\u4e2d\u770b\u4e0d\u5230('/documentation')\n});", 
            "title": "Translation"
        }, 
        {
            "location": "/translation/#translation", 
            "text": "Test output and the way tests are written can be localized.\nThis way scenarios can be written in almost native language using UTF support of JavaScript.\nIf you have non-English team and you work on non-English project consider enabling translation\nby setting translation to  one of available languages .  Please refer to translated steps inside translation files and send Pull Requests to add missing.  To get autocompletion for localized method names generate definitions by running  codeceptjs def", 
            "title": "Translation"
        }, 
        {
            "location": "/translation/#russian", 
            "text": "Add to config:     translation :  ru-RU   when running with  --steps  option steps output will be translated:   This also enables localized method names for actor object.  This way tests can be written in native language while it is still JavaScript:  Scenario('\u043f\u0440\u043e\u0431\u0443\u044e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442', (\u042f) =  {\n    \u042f.\u043d\u0430_\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435('http://yandex.ru/referats');\n    \u042f.\u0432\u0438\u0436\u0443( \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442 \u043f\u043e );\n    \u042f.\u0432\u044b\u0431\u0438\u0440\u0430\u044e_\u043e\u043f\u0446\u0438\u044e('\u041f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u0438');\n    \u042f.\u043a\u043b\u0438\u043a\u0430\u044e( \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0440\u0435\u0444\u0435\u0440\u0430\u0442 );\n    \u042f.\u0432\u0438\u0436\u0443( \u0420\u0435\u0444\u0435\u0440\u0430\u0442 \u043f\u043e \u043f\u0441\u0438\u0445\u043e\u043b\u043e\u0433\u0438\u0438 );\n});", 
            "title": "Russian"
        }, 
        {
            "location": "/translation/#portuguese", 
            "text": "To write your tests in portuguese you can enable the portuguese translation in config file like:     translation :  pt-BR   Now you can write test like this:  Scenario('Efetuar login', (Eu) =  {\n    Eu.estouNaPagina('http://minhaAplicacao.com.br');\n    Eu.preenchoOCampo( login ,  usuario@minhaAplicacao.com.br );\n    Eu.preenchoOCampo( senha ,  123456 );\n    Eu.clico( Entrar );\n    Eu.vejo( Seja bem vindo usu\u00e1rio! );\n});", 
            "title": "Portuguese"
        }, 
        {
            "location": "/translation/#italian", 
            "text": "Add to config     translation :  it-IT   Now you can write test like this:  Scenario('Effettuare il Login su GitHub', (io) =  {\n    io.sono_sulla_pagina('https://github.com/login');\n    io.compilo_il_campo( Username or email address ,  giuseppe-santoro );\n    io.compilo_il_campo( Password ,  ********* );\n    io.faccio_click_su( Sign in );\n    io.vedo( Learn Git and GitHub without any code! );\n});", 
            "title": "Italian"
        }, 
        {
            "location": "/translation/#polish", 
            "text": "Add to config     translation :  pl-PL   Now you can write test like this:  Scenario('Zak\u0142adanie konta free trial na stronie g\u0142\u00f3wnej GetResponse', (Ja) =  {\n    Ja.jestem_na_stronie('https://getresponse.com');\n    Ja.wype\u0142niam_pole( Email address ,  sjakubowski@getresponse.com );\n    Ja.wype\u0142niam_pole( Password ,  digital-marketing-systems );\n    Ja.klikam('Sign up');\n    Ja.czekam(1);\n    Ja.widz\u0119_w_adresie_url('/account_free_created.html');\n});", 
            "title": "Polish"
        }, 
        {
            "location": "/translation/#chinese", 
            "text": "Add to config:     translation :  zh-CN   or     translation :  zh-TW   This way tests can be written in Chinese language while it is still JavaScript:  Feature('CodeceptJS \u6f14\u793a');\n\nScenario('\u6210\u529f\u63d0\u4ea4\u8868\u5355', (\u6211) =  {\n    \u6211.\u5728\u9875\u9762('/documentation')\n    \u6211.\u586b\u5199\u5b57\u6bb5('\u7535\u90ae', 'hello@world.com')\n    \u6211.\u586b\u5199\u5b57\u6bb5('\u5bc6\u7801', '123456')\n    \u6211.\u52fe\u9009\u9009\u9879('\u6fc0\u6d3b')\n    \u6211.\u52fe\u9009\u9009\u9879('\u7537');\n    \u6211.\u5355\u51fb('\u521b\u5efa\u7528\u6237')\n    \u6211.\u770b\u5230('\u7528\u6237\u540d\u53ef\u7528')\n    \u6211.\u5728\u5f53\u524d\u7f51\u5740\u4e2d\u770b\u4e0d\u5230('/documentation')\n});  or  Feature('CodeceptJS \u6f14\u793a');\n\nScenario('\u6210\u529f\u63d0\u4ea4\u8868\u55ae', (\u6211) =  {\n    \u6211.\u5728\u9801\u9762('/documentation')\n    \u6211.\u586b\u5beb\u6b04\u4f4d('\u96fb\u90f5', 'hello@world.com')\n    \u6211.\u586b\u5beb\u6b04\u4f4d('\u5bc6\u78bc', '123456')\n    \u6211.\u52fe\u9078\u9078\u9805('\u6d3b\u5316')\n    \u6211.\u52fe\u9078\u9078\u9805('\u7537');\n    \u6211.\u55ae\u64ca('\u5efa\u7acb\u7528\u6236')\n    \u6211.\u770b\u5230('\u7528\u6236\u540d\u53ef\u7528')\n    \u6211.\u5728\u7576\u524d\u7db2\u5740\u4e2d\u770b\u4e0d\u5230('/documentation')\n});", 
            "title": "Chinese"
        }, 
        {
            "location": "/docker/", 
            "text": "Codeceptjs Docker\n\n\nCodeceptJS packed into container with the Nightmare, Protractor, Puppeteer, and WebDriverIO drivers.\n\n\nHow to Use\n\n\nThis image comes with the necessary dependencies and packages to execute CodeceptJS tests.\nMount in your CodeceptJS config directory into the \n/tests\n directory in the docker container.\n\n\nSample mount: \n-v path/to/codecept.json:/tests\n\n\nCodeceptJS runner is available inside container as \ncodeceptjs\n.\n\n\nLocally\n\n\nYou can execute CodeceptJS with Puppeteer or Nightmare locally with no extra configuration.\n\n\ndocker run --net=host -v $PWD:/tests codeception/codeceptjs\n\n\n\n\nTo customize execution call \ncodeceptjs\n command:\n\n\n# run tests with steps\ndocker run --net=host -v $PWD:/tests codeception/codeceptjs codeceptjs run --steps\n\n# run tests with @user in a name\ndocker run --net=host -v $PWD:/tests codeception/codeceptjs codeceptjs run --grep \n@user\n\n\n\n\n\nDocker Compose\n\n\nversion: '2'\nservices:\n  codeceptjs:\n    image: codeception/codeceptjs\n    depends_on:\n      - firefox\n      - web\n    volumes:\n      - .:/tests\n  web:\n    image: node\n    command: node app/server.js\n    volumes:\n      - .:/app\n  firefox:\n    image: selenium/standalone-firefox-debug:2.53.0\n    ports:\n      - '4444'\n      - '5900'\n\n\n\n\nLinking Containers\n\n\nIf using the Protractor or WebDriverIO drivers, link the container with a Selenium Standalone docker container with an alias of \nselenium\n. Additionally, make sure your \ncodeceptjs.conf.js\n contains the following to allow CodeceptJS to identify where Selenium is running.\n\n\n  ...\n  helpers: {\n    WebDriverIO: {\n      ...\n      host: process.env.HOST\n      ...\n    }\n  }\n  ...\n\n\n\n\n$ docker run -d -P --name selenium-chrome selenium/standalone-chrome\n\n# Alternatively, selenium/standalone-firefox can be used\n\n$ docker run -it --rm -v /\npath_to_codeceptjs_test_dir\n/:/tests/ --link selenium-chrome:selenium codeception/codeceptjs\n\n\n\n\nYou may run use \n-v $(pwd)/:tests/\n if running this from the root of your CodeceptJS tests directory.\n\nNote: The output of your test run will appear in your local directory if your output path is \n./output\n in the CodeceptJS config\n\n\nNote: If running with the Nightmare driver, it is not necessary to run a selenium docker container and link it. So \n--link selenium-chrome:selenium\n may be omitted\n\n\nBuild\n\n\nTo build this image:\n\n\ndocker build -t codeception/codeceptjs .\n\n\n\n\n\n\nthis directory will be added as \n/codecept\n insde container\n\n\ntests directory is expected to be mounted as \n/tests\n\n\ncodeceptjs\n is a symlink to \n/codecept/bin/codecept.js\n\n\n\n\nPassing Options\n\n\nOptions can be passed by calling \ncodeceptjs\n:\n\n\ndocker run -v $PWD:/tests codeception/codeceptjs codeceptjs run --debug\n\n\n\n\nAlternatively arguments to \ncodecept run\n command can be passed via \nCODECEPT_ARGS\n environment variable. For example to run your tests with debug\noutput:\n\n\nversion: '2'\nservices:\n  codeceptjs:\n    image: codeception/codeceptjs\n    environment:\n      - CODECEPT_ARGS=--debug\n    volumes:\n      - .:/tests", 
            "title": "Docker"
        }, 
        {
            "location": "/docker/#codeceptjs-docker", 
            "text": "CodeceptJS packed into container with the Nightmare, Protractor, Puppeteer, and WebDriverIO drivers.", 
            "title": "Codeceptjs Docker"
        }, 
        {
            "location": "/docker/#how-to-use", 
            "text": "This image comes with the necessary dependencies and packages to execute CodeceptJS tests.\nMount in your CodeceptJS config directory into the  /tests  directory in the docker container.  Sample mount:  -v path/to/codecept.json:/tests  CodeceptJS runner is available inside container as  codeceptjs .  Locally  You can execute CodeceptJS with Puppeteer or Nightmare locally with no extra configuration.  docker run --net=host -v $PWD:/tests codeception/codeceptjs  To customize execution call  codeceptjs  command:  # run tests with steps\ndocker run --net=host -v $PWD:/tests codeception/codeceptjs codeceptjs run --steps\n\n# run tests with @user in a name\ndocker run --net=host -v $PWD:/tests codeception/codeceptjs codeceptjs run --grep  @user   Docker Compose  version: '2'\nservices:\n  codeceptjs:\n    image: codeception/codeceptjs\n    depends_on:\n      - firefox\n      - web\n    volumes:\n      - .:/tests\n  web:\n    image: node\n    command: node app/server.js\n    volumes:\n      - .:/app\n  firefox:\n    image: selenium/standalone-firefox-debug:2.53.0\n    ports:\n      - '4444'\n      - '5900'  Linking Containers  If using the Protractor or WebDriverIO drivers, link the container with a Selenium Standalone docker container with an alias of  selenium . Additionally, make sure your  codeceptjs.conf.js  contains the following to allow CodeceptJS to identify where Selenium is running.    ...\n  helpers: {\n    WebDriverIO: {\n      ...\n      host: process.env.HOST\n      ...\n    }\n  }\n  ...  $ docker run -d -P --name selenium-chrome selenium/standalone-chrome\n\n# Alternatively, selenium/standalone-firefox can be used\n\n$ docker run -it --rm -v / path_to_codeceptjs_test_dir /:/tests/ --link selenium-chrome:selenium codeception/codeceptjs  You may run use  -v $(pwd)/:tests/  if running this from the root of your CodeceptJS tests directory. Note: The output of your test run will appear in your local directory if your output path is  ./output  in the CodeceptJS config  Note: If running with the Nightmare driver, it is not necessary to run a selenium docker container and link it. So  --link selenium-chrome:selenium  may be omitted  Build  To build this image:  docker build -t codeception/codeceptjs .   this directory will be added as  /codecept  insde container  tests directory is expected to be mounted as  /tests  codeceptjs  is a symlink to  /codecept/bin/codecept.js   Passing Options  Options can be passed by calling  codeceptjs :  docker run -v $PWD:/tests codeception/codeceptjs codeceptjs run --debug  Alternatively arguments to  codecept run  command can be passed via  CODECEPT_ARGS  environment variable. For example to run your tests with debug\noutput:  version: '2'\nservices:\n  codeceptjs:\n    image: codeception/codeceptjs\n    environment:\n      - CODECEPT_ARGS=--debug\n    volumes:\n      - .:/tests", 
            "title": "How to Use"
        }, 
        {
            "location": "/changelog/", 
            "text": "1.4.0\n\n\n\n\nAllure Reporter Integration\n. Full inegration with Allure Server. Get nicely looking UI for tests,including steps, nested steps, and screenshots. Thanks \nNatarajan Krishnamurthy @krish\n for sponsoring this feature.\n\n\nPlugins API introduced\n. Create custom plugins for CodeceptJS by hooking into event dispatcher, and using promise recorder.\n\n\nOfficial \nCodeceptJS plugins\n added\n:\n\n\nstepByStepReport\n - creates nicely looking report to see test execution as a slideshow\n. Use this plugin to debug tests in headless environment without recording a video.\n\n\nallure\n - Allure reporter added as plugin.\n\n\nscreenshotOnFail\n - saves screenshot on fail. Replaces similar functionality from helpers.\n\n\nretryFailedStep\n - to rerun each failed step.\n\n\n\n\n\n\n[Puppeteer] Fix \nexecuteAsyncScript\n unexpected token by @jonathanz\n\n\nAdded \noverride\n option to \nrun-multiple\n command by @svarlet\n\n\n\n\n1.3.3\n\n\n\n\nAdded \ninitGlobals()\n function to API of \ncustom runner\n.\n\n\n\n\n1.3.2\n\n\n\n\nInteractve Shell improvements for \npause()\n\n\nAdded \nnext\n command for \nstep-by-step debug\n when using \npause()\n.\n\n\nUse \nAfter(pause);\n in a to start interactive console after last step.\n\n\n\n\n\n\n[Puppeteer] Updated to Puppeteer 1.6.0\n\n\nAdded \nwaitForRequest\n to wait for network request.\n\n\nAdded \nwaitForResponse\n to wait for network response.\n\n\n\n\n\n\nImproved TypeScript definitions to support custom steps and page objects. By @xt1\n\n\nFixed XPath detection to accept XPath which starts with \n./\n by @BenoitZugmeyer\n\n\n\n\n1.3.1\n\n\n\n\nBDD-Gherkin: Fixed running async steps.\n\n\n[Puppeteer] Fixed process hanging for 30 seconds. Page loading timeout default via \ngetPageTimeout\n set 0 seconds.\n\n\n[Puppeteer] Improved displaying client-side console messages in debug mode.\n\n\n[Puppeteer] Fixed closing sessions in \nrestart:false\n mode for multi-session mode.\n\n\n[Protractor] Fixed \ngrabPopupText\n to not throw error popup is not opened.\n\n\n[Protractor] Added info on using 'direct' Protractor driver to helper documentation by @xt1.\n\n\n[WebDriverIO] Added a list of all special keys to WebDriverIO helper by @davertmik and @xt1.\n\n\nImproved TypeScript definitions generator by @xt1\n\n\n\n\n1.3.0\n\n\n\n\nCucumber-style BDD. Introduced \nGherkin support\n. Thanks to \nDavid Vins\n and \nOmedym\n for sponsoring this feature\n.\n\n\n\n\nBasic feature file:\n\n\nFeature: Business rules\n  In order to achieve my goals\n  As a persona\n  I want to be able to interact with a system\n\n  Scenario: do anything in my life\n    Given I need to open Google\n\n\n\n\nStep definition:\n\n\nconst I = actor();\n\nGiven('I need to open Google', () =\n {\n  I.amOnPage('https://google.com');\n});\n\n\n\n\nRun it with \n--features --steps\n flag:\n\n\ncodeceptjs run --steps --features\n\n\n\n\n\n\n\n\nBrekaing Chnage\n \nrun\n command now uses relative path + test name to run exactly one test file.\n\n\n\n\nPrevious behavior (removed):\n\n\ncodeceptjs run basic_test.js\n\n\n\n\nCurrent behavior (relative path to config + a test name)\n\n\ncodeceptjs run tests/basic_test.js\n\n\n\n\nThis change allows using auto-completion when running a specific test.\n\n\n\n\n\n\nNested steps output enabled for page objects.\n\n\nto see high-level steps only run tests with \n--steps\n flag.\n\n\nto see PageObjects implementation run tests with \n--debug\n.\n\n\n\n\n\n\nPageObjects simplified to remove \n_init()\n extra method. Try updated generators and see \nupdated guide\n.\n\n\n[Puppeteer] \nMultiple sessions\n enabled. Requires Puppeteer \n= 1.5\n\n\n[Puppeteer] Stability improvement. Waits for for \nload\n event on page load. This strategy can be changed in config:\n\n\nwaitForNavigation\n config option introduced. Possible options: \nload\n, \ndomcontentloaded\n, \nnetworkidle0\n, \nnetworkidle2\n. See \nPuppeteer API\n\n\ngetPageTimeout\n config option to set maximum navigation time in milliseconds. Default is 30 seconds.\n\n\nwaitForNavigation\n method added. Explicitly waits for navigation to be finished.\n\n\n\n\n\n\n[WebDriverIO][Protractor][Puppeteer][Nightmare] \nPossible BC\n \ngrabTextFrom\n unified. Return a text for single matched element and an array of texts for multiple elements.\n\n\n[Puppeteer]Fixed \nresizeWindow\n by @sergejkaravajnij\n\n\n[WebDriverIO][Protractor][Puppeteer][Nightmare] \nwaitForFunction\n added. Waits for client-side JavaScript function to return true by @GREENpoint.\n\n\n[Puppeteer] \nwaitUntil\n deprecated in favor of \nwaitForFunction\n.\n\n\nAdded \nfilter\n function to DataTable.\n\n\nSend non-nested array of files to custom parallel execution chunking by @mikecbrant.\n\n\nFixed invalid output directory path for run-multiple by @mikecbrant.\n\n\n[WebDriverIO] \nwaitUntil\n timeout accepts time in seconds (as all other wait* functions). Fix by @truesrc.\n\n\n[Nightmare] Fixed \ngrabNumberOfVisibleElements\n to work similarly to \nseeElement\n. Thx to @stefanschenk and Jinbo Jinboson.\n\n\n[Protractor] Fixed alert handling error with message 'no such alert' by @truesrc.\n\n\n\n\n1.2.1\n\n\n\n\nFixed running \nI.retry()\n on multiple steps.\n\n\nFixed parallel execution wih chunks.\n\n\n[Puppeteer] Fixed \ngrabNumberOfVisibleElements\n to return \n0\n instead of throwing error if no elements are found.\n\n\n\n\n1.2.0\n\n\n\n\n[WebDriverIO][Protractor]\nMultiple Sessions\n. Run several browser sessions in one test. Introduced \nsession\n command, which opens additional browser window and closes it after a test.\n\n\n\n\nScenario('run in different browsers', (I) =\n {\n  I.amOnPage('/hello');\n  I.see('Hello!');\n  session('john', () =\n {\n    I.amOnPage('/bye');\n    I.dontSee('Hello');\n    I.see('Bye');\n  });\n  I.see('Hello');\n});\n\n\n\n\n\n\nParallel Execution\n by @sveneisenschmidt. Run tests in parallel specifying number of chunks:\n\n\n\n\nmultiple\n: {\n  \nparallel\n: {\n    // run in 2 processes\n    \nchunks\n: 2,\n    // run all tests in chrome\n    \nbrowsers\n: [\nchrome\n]\n  },\n}\n\n\n\n\n\n\nLocator Builder\n. Write complex locators with simplest API combining CSS and XPath:\n\n\n\n\n// select 'Edit' link inside 2nd row of a table\nlocate('//table')\n  .find('tr')\n  .at(2)\n  .find('a')\n  .withText('Edit');\n\n\n\n\n\n\nDynamic configuration\n to update helpers config per test or per suite.\n\n\nAdded \nevent.test.finished\n which fires synchronously for both failed and passed tests.\n\n\n[WebDriverIO][Protractor][Nightmare][Puppeteer] Full page screenshots on failure disabled by default. See \nissue #1600\n. You can enabled them with \nfullPageScreenshots: true\n, however they may work unstable in Selenium.\n\n\nwithin\n blocks can return values. See \nupdated documentation\n.\n\n\nRemoved doublt call to \n_init\n in helpers. Fixes issue \n#1036\n\n\nAdded scenario and feature configuration via fluent API:\n\n\n\n\nFeature('checkout')\n  .timeout(3000)\n  .retry(2);\n\nScenario('user can order in firefox', (I) =\n {\n  // see dynamic configuration\n}).config({ browser: 'firefox' })\n  .timeout(20000);\n\nScenario('this test should throw error', (I) =\n {\n  // I.amOnPage\n}).throws(new Error);\n\n\n\n\n1.1.8\n\n\n\n\nFixed generating TypeScript definitions with \ncodeceptjs def\n.\n\n\nAdded Chinese translation (\"zh-CN\" and \"zh-TW\") by @TechQuery.\n\n\nFixed running tests from a different folder specified by \n-c\n option.\n\n\n[Puppeteer] Added support for hash handling in URL by @gavoja.\n\n\n[Puppeteer] Fixed setting viewport size by @gavoja. See \nPuppeteer issue\n\n\n\n\n1.1.7\n\n\n\n\nDocker Image updateed. \nSee updated reference\n:\n\n\ncodeceptjs package is mounted as \n/codecept\n insde container\n\n\ntests directory is expected to be mounted as \n/tests\n\n\ncodeceptjs\n global runner added (symlink to \n/codecept/bin/codecept.js\n)\n\n\n\n\n\n\n[Protractor] Functions added by @reubenmiller:\n\n\n_locateCheckable (only available from other helpers)\n\n\n_locateClickable (only available from other helpers)\n\n\n_locateFields (only available from other helpers)\n\n\nacceptPopup\n\n\ncancelPopup\n\n\ndragAndDrop\n\n\ngrabBrowserLogs\n\n\ngrabCssPropertyFrom\n\n\ngrabHTMLFrom\n\n\ngrabNumberOfVisibleElements\n\n\ngrabPageScrollPosition (new)\n\n\nrightClick\n\n\nscrollPageToBottom\n\n\nscrollPageToTop\n\n\nscrollTo\n\n\nseeAttributesOnElements\n\n\nseeCssPropertiesOnElements\n\n\nseeInPopup\n\n\nseeNumberOfVisibleElements\n\n\nswitchTo\n\n\nwaitForEnabled\n\n\nwaitForValue\n\n\nwaitInUrl\n\n\nwaitNumberOfVisibleElements\n\n\nwaitToHide\n\n\nwaitUntil\n\n\nwaitUrlEquals\n\n\n\n\n\n\n[Nightmare] added:\n\n\ngrabPageScrollPosition\n (new)\n\n\nseeNumberOfVisibleElements\n\n\nwaitToHide\n\n\n\n\n\n\n[Puppeteer] added:\n\n\ngrabPageScrollPosition\n (new)\n\n\n\n\n\n\n[WebDriverIO] added\"\n\n\ngrabPageScrollPosition\n (new)\n\n\n\n\n\n\n[Puppeteer] Fixed running wait* functions without setting \nsec\n parameter.\n\n\n[Puppeteer][Protractor] Fixed bug with I.click when using an object selector with the xpath property. By @reubenmiller\n\n\n[WebDriverIO][Protractor][Nightmare][Puppeteer] Fixed I.switchTo(0) and I.scrollTo(100, 100) api inconsistencies between helpers.\n\n\n[Protractor] Fixing bug when \nseeAttributesOnElements\n and \nseeCssPropertiesOnElement\n were incorrectly passing when the attributes/properties did not match by @reubenmiller\n\n\n[WebDriverIO] Use inbuilt dragAndDrop function (still doesn't work in Firefox). By @reubenmiller\n\n\nSupport for Nightmare 3.0\n\n\nEnable glob patterns in \nconfig.test\n / \nCodecept.loadTests\n by @sveneisenschmidt\n\n\nEnable overriding of \nconfig.tests\n for \nrun-multiple\n by @sveneisenschmidt\n\n\n\n\n1.1.6\n\n\n\n\nAdded support for \nasync I =\n functions syntax in Scenario by @APshenkin\n\n\n[WebDriverIO][Protractor][Puppeteer][Nightmare] \nwaitForInvisible\n waits for element to hide or to be removed from page. By @reubenmiller\n\n\n[Protractor][Puppeteer][Nightmare] Added \ngrabCurrentUrl\n function. By @reubenmiller\n\n\n[WebDriverIO] \ngrabBrowserUrl\n deprecated in favor of \ngrabCurrentUrl\n to unify the API.\n\n\n[Nightmare] Improved element visibility detection by @reubenmiller\n\n\n[Puppeteer] Fixing function calls when clearing the cookies and localstorage. By @reubenmiller\n\n\n[Puppeteer] Added \nwaitForEnabled\n, \nwaitForValue\n and \nwaitNumberOfVisibleElements\n methods by @reubenmiller\n\n\n[WebDriverIO] Fixed \ngrabNumberOfVisibleElements\n to return 0 when no visible elements are on page. By @michaltrunek\n\n\nHelpers API improvements (by @reubenmiller)\n\n\n_passed\n hook runs after a test passed successfully\n\n\n_failed\n hook runs on a failed test\n\n\n\n\n\n\nHooks API. New events added by @reubenmiller:\n\n\nevent.all.before\n - executed before all tests\n\n\nevent.all.after\n - executed after all tests\n\n\nevent.multiple.before\n - executed before all processes in run-multiple\n\n\nevent.multiple.after\n - executed after all processes in run-multiple\n\n\n\n\n\n\nMultiple execution\n\n\nAllow \nAfterSuite\n and \nAfter\n test hooks to be defined after the first Scenario. By @reubenmiller\n\n\n[Nightmare] Prevent \nI.amOnpage\n navigation if the browser is already at the given url\n\n\nMultiple-Run: Added new \nbootstrapAll\n and \nteardownAll\n hooks to be executed before and after all processes\n\n\ncodeceptjs def\n command accepts \n--config\n option. By @reubenmiller\n\n\n\n\n1.1.5\n\n\n\n\n[Puppeteer] Rerun steps failed due to \"Cannot find context with specified id\" Error.\n\n\nAdded syntax to retry a single step:\n\n\n\n\n// retry action once on failure\nI.retry().see('Hello');\n\n// retry action 3 times on failure\nI.retry(3).see('Hello');\n\n// retry action 3 times waiting for 0.1 second before next try\nI.retry({ retries: 3, minTimeout: 100 }).see('Hello');\n\n// retry action 3 times waiting no more than 3 seconds for last retry\nI.retry({ retries: 3, maxTimeout: 3000 }).see('Hello');\n\n// retry 2 times if error with message 'Node not visible' happens\nI.retry({\n  retries: 2,\n  when: err =\n err.message === 'Node not visible'\n}).seeElement('#user');\n\n\n\n\n\n\nScenario().injectDependencies\n added to dynamically add objects into DI container by @Apshenkin. See \nDependency Injection section in PageObjects\n.\n\n\nFixed using async/await functions inside \nwithin\n\n\n[WebDriverIO][Protractor][Puppeteer][Nightmare] \nwaitUntilExists\n deprecated\n in favor of \nwaitForElement\n\n\n[WebDriverIO][Protractor] \nwaitForStalenessOf\n deprecated\n in favor of \nwaitForDetached\n\n\n[WebDriverIO][Protractor][Puppeteer][Nightmare] \nwaitForDetached\n added\n\n\n[Nightmare] Added \nI.seeNumberOfElements()\n by @pmoncadaisla\n\n\n[Nightmare] Load blank page when starting nightmare so that the .evaluate function will work if _failed/saveScreenshot is triggered by @reubenmiller\n\n\nFixed using plain arrays for data driven tests by @reubenmiller\n\n\n[Puppeteer] Use default tab instead of opening a new tab when starting the browser by @reubenmiller\n\n\n[Puppeteer] Added \ngrabNumberOfTabs\n function by @reubenmiller\n\n\n[Puppeteer] Add ability to set user-agent by @abidhahmed\n\n\n[Puppeteer] Add keepCookies and keepBrowserState @abidhahmed\n\n\n[Puppeteer] Clear value attribute instead of innerhtml for TEXTAREA by @reubenmiller\n\n\n[REST] fixed sending string payload by @michaltrunek\n\n\nFixed unhandled rejection in async/await tests by @APshenkin\n\n\n\n\n1.1.4\n\n\n\n\nRemoved \nyarn\n call in package.json\n\n\nFixed \nconsole.log\n in Puppeteer by @othree\n\n\n[Appium] \nrunOnAndroid\n and \nrunOnIOS\n can receive a function to check capabilities dynamically:\n\n\n\n\nI.runOnAndroid(caps =\n caps.platformVersion \n= 7, () =\n {\n  // run code only on Android 7+\n});\n\n\n\n\n1.1.3\n\n\n\n\n[Puppeteer] +25 Functions added by @reubenmiller\n\n\n_locateCheckable\n\n\n_locateClickable\n\n\n_locateFields\n\n\ncloseOtherTabs\n\n\ndragAndDrop\n\n\ngrabBrowserLogs\n\n\ngrabCssPropertyFrom\n\n\ngrabHTMLFrom\n\n\ngrabNumberOfVisibleElements\n\n\ngrabSource\n\n\nrightClick\n\n\nscrollPageToBottom\n\n\nscrollPageToTop\n\n\nscrollTo\n\n\nseeAttributesOnElements\n\n\nseeCssPropertiesOnElements\n\n\nseeInField\n\n\nseeNumberOfElements\n\n\nseeNumberOfVisibleElements\n\n\nseeTextEquals\n\n\nseeTitleEquals\n\n\nswitchTo\n\n\nwaitForInvisible\n\n\nwaitInUrl\n\n\nwaitUrlEquals\n\n\n\n\n\n\n[Protractor] +8 functions added by @reubenmiller\n\n\ncloseCurrentTab\n\n\ngrabSource\n\n\nopenNewTab\n\n\nseeNumberOfElements\n\n\nseeTextEquals\n\n\nseeTitleEquals\n\n\nswitchToNextTab\n\n\nswitchToPreviousTab\n\n\n\n\n\n\n[Nightmare] \nwaitForInvisible\n added by @reubenmiller\n\n\n[Puppeteer] Printing console.log information in debug mode.\n\n\n[Nightmare] Integrated with \nnightmare-har-plugin\n by mingfang. Added \nenableHAR\n option. Added HAR functions:\n\n\ngrabHAR\n\n\nsaveHAR\n\n\nresetHAR\n\n\n\n\n\n\n[WebDriverIO] Fixed execution stability for parallel requests with Chromedriver\n\n\n[WebDriverIO] Fixed resizeWindow when resizing to 'maximize' by @reubenmiller\n\n\n[WebDriverIO] Fixing resizing window to full screen when taking a screenshot by @reubenmiller\n\n\n\n\n1.1.2\n\n\n\n\n[Puppeteer] Upgraded to Puppeteer 1.0\n\n\nAdded \ngrep\n option to config to set default matching pattern for tests.\n\n\n[Puppeteer] Added \nacceptPopup\n, \ncancelPopup\n, \nseeInPopup\n and \ngrabPopupText\n functions by @reubenmiller\n\n\n[Puppeteer] \nwithin\n iframe and nested iframe support added by @reubenmiller\n\n\n[REST] Added support for JSON objects since payload (as a JSON) was automatically converted into \"URL query\" type of parameter by @Kalostrinho\n\n\n[REST] Added \nresetRequestHeaders\n method by @Kalostrinho\n\n\n[REST] Added \nfollowRedirect\n option and \namFollowingRequestRedirects\n/\namNotFollowingRequestRedirects\n methods by @Kalostrinho\n\n\n[WebDriverIO] \nuncheckOption\n implemented by @brunobg\n\n\n[WebDriverIO] Added \ngrabBrowserUrl\n by @Kalostrinho\n\n\nAdd ability to require helpers from node_modules by @APshenkin\n\n\nAdded \n--profile\n option to \nrun-multiple\n command by @jamie-beck\n\n\nCustom output name for multiple browser run by @tfiwm\n\n\nFixed passing data to scenarios by @KennyRules\n\n\n\n\n1.1.1\n\n\n\n\n[WebDriverIO] fixed \nwaitForInvisible\n by @Kporal\n\n\n\n\n1.1.0\n\n\nMajor update to CodeceptJS. \nNodeJS v 8.9.1\n is now minimal Node version required.\nThis brings native async-await support to CodeceptJS. It is recommended to start using await for tests instead of generators:\n\n\nasync () =\n {\n  I.amOnPage('/page');\n  const url = await I.grabTextFrom('.nextPage');\n  I.amOnPage(url);\n}\n\n\n\n\nThanks to \n@Apshenkin\n for implementation. Also, most helpers were refactored to use async-await. This made our code simpler. We hope that this encourages more users to send pull requests!\n\n\nWe also introduced strict ESLint policies for our codebase. Thanks to \n@Galkin\n for that.\n\n\n\n\n[Puppeteer] Helper introduced\n. \nLearn how to run tests headlessly with Google Chrome's Puppeteer\n.\n\n\n[SeleniumWebdriver] Helper is deprecated, it is recommended to use Protractor with config option \nangular: false\n instead.\n\n\n[WebDriverIO] nested iframe support in the within block by @reubenmiller. Example:\n\n\n\n\nwithin({frame: ['#wrapperId', '[name=content]']}, () =\n {\n  I.click('Sign in!');\n  I.see('Email Address');\n});\nI.see('Nested Iframe test');\nI.dontSee('Email Address');\n});\n\n\n\n\n\n\n[WebDriverIO] Support for \n~\n locator to find elements by \naria-label\n. This behavior is similar as it is in Appium and helps testing cross-platform React apps. Example:\n\n\n\n\nText accessibilityLabel=\nfoobar\n\n    CodeceptJS is awesome\n\n/Text\n\n\n\n\n\n\u2191 This element can be located with \n~foobar\n in WebDriverIO and Appium helpers. Thanks to @flyskywhy\n\n\n\n\nAllow providing arbitrary objects in config includes by @rlewan\n\n\n[REST] Prevent from mutating default headers by @alexashley. See \n#789\n\n\n[REST] Fixed sending empty helpers with \nhaveRequestHeaders\n in \nsendPostRequest\n. By @petrisorionel\n\n\nFixed displaying undefined args in output by @APshenkin\n\n\nFixed NaN instead of seconds in output by @APshenkin\n\n\nAdd browser name to report file for \nmultiple-run\n by @trollr\n\n\nMocha updated to 4.x\n\n\n\n\n1.0.3\n\n\n\n\n[WebDriverIO][Protractor][Nightmare] method \nwaitUntilExists\n implemented by @sabau\n\n\nAbsolute path can be set for \noutput\n dir by @APshenkin. Fix \n#571\n\n\nData table rows can be ignored by using \nxadd\n. By @APhenkin\n\n\nAdded \nData(table).only.Scenario\n to give ability to launch only Data tests. By @APhenkin\n\n\nImplemented \nElementNotFound\n error by @BorisOsipov.\n\n\nAdded TypeScript compiler / configs to check the JavaScript by @KennyRules\n\n\n[Nightmare] fix executeScript return value by @jploskonka\n\n\n[Nightmare] fixed: err.indexOf not a function when waitForText times out in nightmare by @joeypedicini92\n\n\nFixed: Retries not working when using .only. By @APhenkin\n\n\n\n\n1.0.2\n\n\n\n\nIntroduced generators support in scenario hooks for \nBeforeSuite\n/\nBefore\n/\nAfterSuite\n/\nAfter\n\n\n[ApiDataFactory] Fixed loading helper; \nrequireg\n package included.\n\n\nFix \n#485\n \nrun-multiple\n: the first browser-resolution combination was be used in all configurations\n\n\nFixed unique test names:\n\n\nFixed \n#447\n: tests failed silently if they have the same name as other tests.\n\n\nUse uuid in screenshot names when \nuniqueScreenshotNames: true\n\n\n[Protractor] Fixed testing non-angular application. \namOutsideAngularApp\n is executed before each step. Fixes \n#458\n\n\nAdded output for steps in hooks when they fail\n\n\n\n\n1.0.1\n\n\n\n\nReporters improvements:\n\n\nAllows to execute \nmultiple reporters\n\n\nAdded \nMochawesome\n helper\n\n\naddMochawesomeContext\n method to add custom data to mochawesome reports\n\n\nFixed Mochawesome context for failed screenshots.\n\n\n[WebDriverIO] improved click on context to match clickable element with a text inside. Fixes \n#647\n\n\n[Nightmare] Added \nrefresh\n function by @awhanks\n\n\nfixed \nUnhandled promise rejection (rejection id: 1): Error: Unknown wait type: pageLoad\n\n\nsupport for tests with retries in html report\n\n\nbe sure that change window size and timeouts completes before test\n\n\n[Nightmare] Fixed \n[Wrapped Error] \"codeceptjs is not defined\"\n; Reinjectiing client scripts to a webpage on changes.\n\n\n[Nightmare] Added more detailed error messages for \nWait*\n methods\n\n\n[Nightmare] Fixed adding screenshots to Mochawesome\n\n\n[Nightmare] Fix unique screenshots names in Nightmare\n\n\nFixed CodeceptJS work with hooks in helpers to finish codeceptJS correctly if errors appears in helpers hooks\n\n\nCreate a new session for next test If selenium grid error received\n\n\nCreate screenshots for failed hooks from a Feature file\n\n\nFixed \nretries\n option\n\n\n\n\n1.0\n\n\nCodeceptJS hits first stable release. CodeceptJS provides a unified API for \nweb testing for Webdriverio\n, \nProtractor\n, and \nNightmareJS\n. Since 1.0 you can also \ntest mobile applications\n in the similar manner with Appium.\n\n\nSample test:\n\n\nI.seeAppIsInstalled(\nio.super.app\n);\nI.click('~startUserRegistrationCD');\nI.fillField('~email of the customer', 'Nothing special'));\nI.see('davert@codecept.io', '~email of the customer'));\nI.clearField('~email of the customer'));\nI.dontSee('Nothing special', '~email of the customer'));\n\n\n\n\n\n\nRead \nthe Mobile Testing guide\n.\n\n\nDiscover \nAppium Helper\n\n\n\n\n\n\nWe also introduced two new \nhelpers for data management\n.\nUsing them you can easily prepare and cleanup data for your tests using public REST API.\n\n\nSample test\n\n\n// create a user using data factories and REST API\nI.have('user', { name: 'davert', password: '123456' });\n// use it to login\nI.amOnPage('/login');\nI.fillField('login', 'davert');\nI.fillField('password', '123456');\nI.click('Login');\nI.see('Hello, davert');\n// user will be removed after the test\n\n\n\n\n\n\nRead \nData Management guide\n\n\nREST Helper\n\n\nApiDataFactory\n\n\n\n\n\n\nNext notable feature is \nSmartWait\n for WebDriverIO, Protractor, SeleniumWebdriver. When \nsmartwait\n option is set, script will wait for extra milliseconds to locate an element before failing. This feature uses implicit waits of Selenium but turns them on only in applicable pieces. For instance, implicit waits are enabled for \nseeElement\n but disabled for \ndontSeeElement\n\n\n\n\nRead more about \nSmartWait\n\n\n\n\nChangelog\n\n\n\n\nMinimal NodeJS version is 6.11.1 LTS\n\n\nUse \nwithin\n command with generators.\n\n\nData Driven Tests\n introduced.\n\n\nPrint execution time per step in \n--debug\n mode. \n#591\n by @APshenkin\n\n\n[WebDriverIO][Protractor][Nightmare] Added \ndisableScreenshots\n option to disable screenshots on fail by @Apshenkin\n\n\n[WebDriverIO][Protractor][Nightmare] Added \nuniqueScreenshotNames\n option to generate unique names for screenshots on failure by @Apshenkin\n\n\n[WebDriverIO][Nightmare] Fixed click on context; \nclick('text', '#el')\n will throw exception if text is not found inside \n#el\n.\n\n\n[WebDriverIO][Protractor][SeleniumWebdriver] \nSmartWait introduced\n.\n\n\n[WebDriverIO][Protractor][Nightmare]Fixed \nsaveScreenshot\n for PhantomJS, \nfullPageScreenshots\n option introduced by @HughZurname \n#549\n\n\n[Appium] helper introduced by @APshenkin\n\n\n[REST] helper introduced by @atrevino in \n#504\n\n\n[WebDriverIO][SeleniumWebdriver] Fixed \"windowSize\": \"maximize\" for Chrome 59+ version #560 by @APshenkin\n\n\n[Nightmare] Fixed restarting by @APshenkin \n#581\n\n\n[WebDriverIO] Methods added by @APshenkin:\n\n\ngrabCssPropertyFrom\n\n\nseeTitleEquals\n\n\nseeTextEquals\n\n\nseeCssPropertiesOnElements\n\n\nseeAttributesOnElements\n\n\ngrabNumberOfVisibleElements\n\n\nwaitInUrl\n\n\nwaitUrlEquals\n\n\nwaitForValue\n\n\nwaitNumberOfVisibleElements\n\n\nswitchToNextTab\n\n\nswitchToPreviousTab\n\n\ncloseCurrentTab\n\n\nopenNewTab\n\n\nrefreshPage\n\n\nscrollPageToBottom\n\n\nscrollPageToTop\n\n\ngrabBrowserLogs\n\n\n\n\n\n\nUse mkdirp to create output directory. \n#592\n by @vkramskikh\n\n\n[WebDriverIO] Fixed \nseeNumberOfVisibleElements\n by @BorisOsipov \n#574\n\n\nLots of fixes for promise chain by @APshenkin \n#568\n\n\nFix \n#543\n - After block not properly executed if Scenario fails\n\n\nExpected behavior in promise chains: \n_beforeSuite\n hooks from helpers -\n \nBeforeSuite\n from test -\n \n_before\n hooks from helpers -\n \nBefore\n from test - \n Test steps -\n \n_failed\n hooks from helpers (if test failed) -\n \nAfter\n from test -\n \n_after\n hooks from helpers -\n \nAfterSuite\n from test -\n \n_afterSuite\n hook from helpers.\n\n\nif during test we got errors from any hook (in test or in helper) - stop complete this suite and go to another\n\n\nif during test we got error from Selenium server - stop complete this suite and go to another\n\n\n[WebDriverIO][Protractor] if \nrestart\n option is false - close all tabs expect one in \n_after\n.\n\n\nComplete \n_after\n, \n_afterSuite\n hooks even After/AfterSuite from test was failed\n\n\nDon't close browser between suites, when \nrestart\n option is false. We should start browser only one time and close it only after all tests.\n\n\nClose tabs and clear local storage, if \nkeepCookies\n flag is enabled\n\n\n\n\n\n\nFix TypeError when using babel-node or ts-node on node.js 7+ \n#586\n by @vkramskikh\n\n\n[Nightmare] fixed usage of \n_locate\n\n\n\n\nSpecial thanks to \nAndrey Pshenkin\n for his work on this release and the major improvements.\n\n\n0.6.3\n\n\n\n\nErrors are printed in non-verbose mode. Shows \"Selenium not started\" and other important errors.\n\n\nAllowed to set custom test options:\n\n\n\n\nScenario('My scenario', { build_id: 123, type: 'slow' }, function (I)\n\n\n\n\nthose options can be accessed as \nopts\n property inside a \ntest\n object. Can be used in custom listeners.\n\n\n\n\nAdded \ndocs\n directory to a package.\n\n\n[WebDriverIO][Protractor][SeleniumWebdriver] Bugfix: cleaning session when \nrestart: false\n by @tfiwm \n#519\n\n\n[WebDriverIO][Protractor][Nightmare] Added second parameter to \nsaveScreenshot\n to allow a full page screenshot. By @HughZurname\n\n\nAdded suite object to \nsuite.before\n and \nsuite.after\n events by @implico. \n#496\n\n\n\n\n0.6.2\n\n\n\n\nAdded \nconfig\n object to \npublic API\n\n\nExtended \nindex.js\n to include \nactor\n and \nhelpers\n, so they could be required:\n\n\n\n\nconst actor = require('codeceptjs').actor;\n\n\n\n\n\n\nAdded \nexample for creating custom runner\n with public API.\n\n\nrun command to create \noutput\n directory if it doesn't exist\n\n\n[Protractor] fixed loading globally installed Protractor\n\n\nrun-multiple command improvements:\n\n\ncreate output directories for each process\n\n\nprint process ids in output\n\n\n\n\n\n\n\n\n0.6.1\n\n\n\n\nFixed loading hooks\n\n\n\n\n0.6.0\n\n\nMajor release with extension API and parallel execution.\n\n\n\n\nBreaking\n Removed path argument from \nrun\n. To specify path other than current directory use \n--config\n or \n-c\n option:\n\n\n\n\nInstead of: \ncodeceptjs run tests\n use:\n\n\n# load config and run from tests directory\ncodeceptjs run -c tests/\n\n# or load codecept.json from tests directory\ncodeceptjs run -c tests/codecept.json\n\n# run users_test.js inside tests directory\ncodeceptjs run users_test.js -c tests\n\n\n\n\n\n\nCommand \nmultiple-run\n added\n, to execute tests in several browsers in parallel by @APshenkin and @davertmik. \nSee documentation\n.\n\n\nHooks API added to extend CodeceptJS\n with custom listeners and plugins. \nSee documentation\n.\n\n\n[Nightmare][WebDriverIO] \nwithin\n can work with iframes by @imvetri. \nSee documentation\n.\n\n\n[WebDriverIO][SeleniumWebdriver][Protractor] Default browser changed to \nchrome\n\n\n[Nightmare] Fixed globally locating \nnightmare-upload\n.\n\n\n[WebDriverIO] added \nseeNumberOfVisibleElements\n method by @elarouche.\n\n\nExit with non-zero code if init throws an error by @rincedd\n\n\nNew guides published:\n\n\nInstallation\n\n\nHooks\n\n\nAdvanced Usage\n\n\n\n\n\n\nMeta packages published:\n\n\ncodecept-webdriverio\n\n\ncodecept-protractor\n\n\ncodecept-nightmare\n\n\n\n\n\n\n\n\n0.5.1\n\n\n\n\nPolish translation\n added by @limes.\n\n\nUpdate process exit code so that mocha saves reports before exit by @romanovma.\n\n\n[Nightmare] fixed \ngetAttributeFrom\n for custom attributes by @robrkerr\n\n\n[Nightmare] Fixed \nUnhandledPromiseRejectionWarning error\n when selecting the dropdown using \nselectOption\n by @robrkerr. \nSee PR\n.\n\n\n[Protractor] fixed \npressKey\n method by @romanovma\n\n\n\n\n0.5.0\n\n\n\n\nProtractor ^5.0.0 support (while keeping ^4.0.9 compatibility)\n\n\nFix 'fullTitle() is not a function' in exit.js by @hubidu. See \n#388\n.\n\n\n[Nightmare] Fix for \nwaitTimeout\n by @HughZurname. See \n#391\n. Resolves \n#236\n\n\nDockerized CodeceptJS setup by @artiomnist. \nSee reference\n\n\n\n\n0.4.16\n\n\n\n\nFixed steps output synchronization (regression since 0.4.14).\n\n\n[WebDriverIO][Protractor][SeleniumWebdriver][Nightmare] added \nkeepCookies\n option to keep cookies between tests with \nrestart: false\n.\n\n\n[Protractor] added \nwaitForTimeout\n config option to set default waiting time for all wait* functions.\n\n\nFixed \n_test\n hook for helpers by @cjhille.\n\n\n\n\n0.4.15\n\n\n\n\nFixed regression in recorder sessions: \noldpromise is not defined\n.\n\n\n\n\n0.4.14\n\n\n\n\n_beforeStep\n and \n_afterStep\n hooks in helpers are synchronized. Allows to perform additional actions between steps.\n\n\n\n\nExample: fail if JS error occur in custom helper using WebdriverIO:\n\n\n_before() {\n  this.err = null;\n  this.helpers['WebDriverIO'].browser.on('error', (e) =\n this.err = e);\n}\n\n_afterStep() {\n if (this.err) throw new Error('Browser JS error '+this.err);\n}\n\n\n\n\nExample: fail if JS error occur in custom helper using Nightmare:\n\n\n_before() {\n  this.err = null;\n  this.helpers['Nightmare'].browser.on('page', (type, message, stack) =\n {\n    this.err = `${message} ${stack}`;\n  });\n}\n\n_afterStep() {\n if (this.err) throw new Error('Browser JS error '+this.err);\n}\n\n\n\n\n\n\nFixed \ncodecept list\n and \ncodecept def\n commands.\n\n\nAdded \nI.say\n method to print arbitrary comments.\n\n\n\n\nI.say('I am going to publish post');\nI.say('I enter title and body');\nI.say('I expect post is visible on site');\n\n\n\n\n\n\n[Nightmare] \nrestart\n option added. \nrestart: false\n allows to run all tests in a single window, disabled by default. By @nairvijays99\n\n\n[Nightmare] Fixed \nresizeWindow\n command.\n\n\n[Protractor][SeleniumWebdriver] added \nwindowSize\n config option to resize window on start.\n\n\nFixed \"Scenario.skip causes 'Cannot read property retries of undefined'\" by @MasterOfPoppets\n\n\nFixed providing absolute paths for tests in config by @lennym\n\n\n\n\n0.4.13\n\n\n\n\nAdded \nretries\n option \nFeature\n and \nScenario\n to rerun fragile tests:\n\n\n\n\nFeature('Complex JS Stuff', {retries: 3});\n\nScenario('Not that complex', {retries: 1}, (I) =\n {\n  // test goes here\n});\n\n\n\n\n\n\nAdded \ntimeout\n option \nFeature\n and \nScenario\n to specify timeout.\n\n\n\n\nFeature('Complex JS Stuff', {timeout: 5000});\n\nScenario('Not that complex', {timeout: 1000}, (I) =\n {\n  // test goes here\n});\n\n\n\n\n\n\n[WebDriverIO] Added \nuniqueScreenshotNames\n option to set unique screenshot names for failed tests. By @APshenkin. See \n#299\n\n\n[WebDriverIO] \nclearField\n method improved to accept name/label locators and throw errors.\n\n\n[Nightmare][SeleniumWebdriver][Protractor] \nclearField\n method added.\n\n\n[Nightmare] Fixed \nwaitForElement\n, and \nwaitForVisible\n methods.\n\n\n[Nightmare] Fixed \nresizeWindow\n by @norisk-it\n\n\nAdded italian \ntranslation\n.\n\n\n\n\n0.4.12\n\n\n\n\nBootstrap / Teardown improved with \nHooks\n. Various options for setup/teardown provided.\n\n\nAdded \n--override\n or \n-o\n option for runner to dynamically override configs. Valid JSON should be passed:\n\n\n\n\ncodeceptjs run -o '{ \nbootstrap\n: \nbootstrap.js\n}'\ncodeceptjs run -o '{ \nhelpers\n: {\nWebDriverIO\n: {\nbrowser\n: \nchrome\n}}}'\n\n\n\n\n\n\nAdded \nregression tests\n for codeceptjs tests runner.\n\n\n\n\n0.4.11\n\n\n\n\nFixed regression in 0.4.10\n\n\nAdded \nbootstrap\n/\nteardown\n config options to accept functions as parameters by @pscanf. See updated \nconfig reference\n #319\n\n\n\n\n0.4.10\n\n\n\n\n[Protractor] Protrctor 4.0.12+ support.\n\n\nEnabled async bootstrap file by @abachar. Use inside \nbootstrap.js\n:\n\n\n\n\nmodule.exports = function(done) {\n  // async instructions\n  // call done() to continue execution\n  // otherwise call done('error description')\n}\n\n\n\n\n\n\nChanged 'pending' to 'skipped' in reports by @timja-kainos. See #315\n\n\n\n\n0.4.9\n\n\n\n\n[SeleniumWebdriver][Protractor][WebDriverIO][Nightmare] fixed \nexecuteScript\n, \nexecuteAsyncScript\n to work and return values.\n\n\n[Protractor][SeleniumWebdriver][WebDriverIO] Added \nwaitForInvisible\n and \nwaitForStalenessOf\n methods by @Nighthawk14.\n\n\nAdded \n--config\n option to \ncodeceptjs run\n to manually specify config file by @cnworks\n\n\n[Protractor] Simplified behavior of \namOutsideAngularApp\n by using \nignoreSynchronization\n. Fixes #278\n\n\nSet exit code to 1 when test fails at \nBefore\n/\nAfter\n hooks. Fixes #279\n\n\n\n\n0.4.8\n\n\n\n\n[Protractor][SeleniumWebdriver][Nightmare] added \nmoveCursorTo\n method.\n\n\n[Protractor][SeleniumWebdriver][WebDriverIO] Added \nmanualStart\n option to start browser manually in the beginning of test. By @cnworks. \nPR #250\n\n\nFixed \ncodeceptjs init\n to work with nested directories and file masks.\n\n\nFixed \ncodeceptjs gt\n to generate test with proper file name suffix. By @Zougi.\n\n\n[Nightmare] Fixed: Error is thrown when clicking on element which can't be locate. By @davetmik\n\n\n[WebDriverIO] Fixed \nattachFile\n for file upload. By @giuband and @davetmik\n\n\n[WebDriverIO] Add support for timeouts in config and with \ndefineTimeouts\n method. By @easternbloc \n#258\n and \n#267\n by @davetmik\n\n\nFixed hanging of CodeceptJS when error is thrown by event dispatcher. Fix by @Zougi and @davetmik\n\n\n\n\n0.4.7\n\n\n\n\nImproved docs for \nBeforeSuite\n; fixed its usage with \nrestart: false\n option by @APshenkin.\n\n\nAdded \nNightmare\n to list of available helpers on \ninit\n.\n\n\n[Nightmare] Removed double \nresizeWindow\n implementation.\n\n\n\n\n0.4.6\n\n\n\n\nAdded \nBeforeSuite\n and \nAfterSuite\n hooks to scenario by @APshenkin. See \nupdated documentation\n\n\n\n\n0.4.5\n\n\n\n\nFixed running \ncodecept def\n command by @jankaspar\n\n\n[Protractor][SeleniumWebdriver] Added support for special keys in \npressKey\n method. Fixes #216\n\n\n\n\n0.4.4\n\n\n\n\nInteractive shell fixed. Start it by running \ncodeceptjs shell\n\n\nAdded \n--profile\n option to \nshell\n command to use dynamic configuration.\n\n\nAdded \n--verbose\n option to \nshell\n command for most complete output.\n\n\n\n\n0.4.3\n\n\n\n\n[Protractor] Regression fixed to ^4.0.0 support\n\n\nTranslations included into package.\n\n\nteardown\n option added to config (opposite to \nbootstrap\n), expects a JS file to be executed after tests stop.\n\n\nConfiguration\n can be set via JavaScript file \ncodecept.conf.js\n instead of \ncodecept.json\n. It should export \nconfig\n object:\n\n\n\n\n// inside codecept.conf.js\nexports.config = {\n  // contents of codecept.json\n}\n\n\n\n\n\n\nAdded \n--profile\n option to pass its value to \ncodecept.conf.js\n as \nprocess.profile\n for \ndynamic configuration\n.\n\n\nDocumentation for \nStepObjects, PageFragments\n updated.\n\n\nDocumentation for \nConfiguration\n added.\n\n\n\n\n0.4.2\n\n\n\n\nAdded ability to localize tests with translation \n#189\n. Thanks to @abner\n\n\n[Translation] ru-RU translation added.\n\n\n[Translation] pt-BR translation added.\n\n\n[Protractor] Protractor 4.0.4 compatibility.\n\n\n[WebDriverIO][SeleniumWebdriver][Protractor] Fixed single browser session  mode for \nrestart: false\n\n\nFixed using of 3rd party reporters (xunit, mocha-junit-reporter, mochawesome). Added guide.\n\n\nDocumentation for \nTranslation\n added.\n\n\nDocumentation for \nReports\n added.\n\n\n\n\n0.4.1\n\n\n\n\nAdded custom steps to step definition list. See #174 by @jayS-de\n\n\n[WebDriverIO] Fixed using \nwaitForTimeout\n option by @stephane-ruhlmann. See #178\n\n\n\n\n0.4.0\n\n\n\n\nNightmare\n Helper\n added for faster web testing.\n\n\n[Protractor][SeleniumWebdriver][WebDriverIO] added \nrestart: false\n option to reuse one browser between tests (improves speed).\n\n\nProtractor 4.0\n compatibility. Please upgrade Protractor library.\n\n\nAdded \n--verbose\n option for \nrun\n command to log and print global promise and events.\n\n\nFixed errors with shutting down and cleanup.\n\n\nFixed starting interactive shell with \ncodeceptjs shell\n.\n\n\nFixed handling of failures inside within block\n\n\n\n\n0.3.5\n\n\n\n\nIntroduced IDE autocompletion support for Visual Studio Code and others. Added command for generating TypeScript definitions for \nI\n object. Use it as\n\n\n\n\ncodeceptjs def\n\n\n\n\nto generate steps definition file and include it into tests by reference. By @kaflan\n\n\n0.3.4\n\n\n\n\n[Protractor] version 3.3.0 comptaibility, NPM 3 compatibility. Please update Protractor!\n\n\nallows using absolute path for helpers, output, in config and in command line. By @denis-sokolov\n\n\nFixes 'Cannot read property '1' of null in generate.js:44' by @seethislight\n\n\n\n\n0.3.3\n\n\nFixed global installation\n. CodeceptJS can now locate globally located modules.\nCodeceptJS is also recommended for local installation.\nDepending on installation type additional modules (webdriverio, protractor, ...) will be loaded either from local or from global path.\n\n\n0.3.2\n\n\n\n\nAdded \ncodeceptjs list\n command which shows all available methods of \nI\n object.\n\n\n[Protractor][SeleniumWebdriver] fixed closing browser instances\n\n\n[Protractor][SeleniumWebdriver] \ndoubleClick\n method added\n\n\n[WebDriverIO][Protractor][SeleniumWebdriver] \ndoubleClick\n method to locate clickable elements by text, \ncontext\n option added.\n\n\nFixed using assert in generator without yields #89\n\n\n\n\n0.3.1\n\n\n\n\nFixed \ninit\n command\n\n\n\n\n0.3.0\n\n\nBreaking Change\n: webdriverio package removed from dependencies list. You will need to install it manually after the upgrade.\nStarting from 0.3.0 webdriverio is not the only backend for running selenium tests, so you are free to choose between Protractor, SeleniumWebdriver, and webdriverio and install them.\n\n\n\n\n[Protractor] helper added\n. Now you can test AngularJS applications by using its official library within the unigied CodeceptJS API!\n\n\n[SeleniumWebdriver] helper added\n. You can switch to official JS bindings for Selenium.\n\n\n[WebDriverIO] \nupdated to webdriverio v 4.0\n\n\n[WebDriverIO] \nclearField\n method added by @fabioel\n\n\n[WebDriverIO] added \ndragAndDrop\n by @fabioel\n\n\n[WebDriverIO] fixed \nscrollTo\n method by @sensone\n\n\n[WebDriverIO] fixed \nwindowSize: maximize\n option in config\n\n\n[WebDriverIO] \nseeElement\n and \ndontSeeElement\n check element for visibility by @fabioel and @davertmik\n\n\n[WebDriverIO] \nseeElementInDOM\n, \ndontSeeElementInDOM\n added to check element exists on page.\n\n\n[WebDriverIO] fixed saving screenshots on failure. Fixes #70\n\n\nfixed \nwithin\n block doesn't end in output not #79\n\n\n\n\n0.2.8\n\n\n\n\n[WebDriverIO] added \nseeNumberOfElements\n by @fabioel\n\n\n\n\n0.2.7\n\n\n\n\nprocess ends with exit code 1 on error or failure #49\n\n\nfixed registereing global Helper #57\n\n\nfixed handling error in within block #50\n\n\n\n\n0.2.6\n\n\n\n\nFixed \ndone() was called multiple times\n\n\n[WebDriverIO] added \nwaitToHide\n method by @fabioel\n\n\nAdded global \nHelper\n (alias \ncodecept_helper)\n, object use for writing custom Helpers. Generator updated. Changes to #48\n\n\n\n\n0.2.5\n\n\n\n\nFixed issues with using yield inside a test #45 #47 #43\n\n\nFixed generating a custom helper. Helper class is now accessible with \ncodecept_helper\n var. Fixes #48\n\n\n\n\n0.2.4\n\n\n\n\nFixed accessing helpers from custom helper by @pim.\n\n\n\n\n0.2.3\n\n\n\n\n[WebDriverIO] fixed \nseeInField\n to work with single value elements like: input[type=text], textareas, and multiple: select, input[type=radio], input[type=checkbox]\n\n\n[WebDriverIO] fixed \npressKey\n, key modifeiers (Control, Command, Alt, Shift) are released after the action\n\n\n\n\n0.2.2\n\n\nFixed generation of custom steps file and page objects.\nPlease replace \nrequire('codeceptjs/actor')\n to \nactor\n in your \ncustom_steps.js\n.\nWhenever you need to create \nI\n object (in page objects, custom steps, but not in tests) just call \nactor()\n;\n\n\n0.2.0\n\n\n\n\nwithin\n context hook added\n\n\n--reporter\n option supported\n\n\n[WebDriverIO] added features and methods:\n\n\nelements: \nseeElement\n, ...\n\n\npopups: \nacceptPopup\n, \ncancelPopup\n, \nseeInPopup\n,...\n\n\nnavigation: \nmoveCursorTo\n, \nscrollTo\n\n\nsaving screenshots on failure; \nsaveScreenshot\n\n\ncookies: \nsetCookie\n, \nseeCookie\n, ...\n\n\nsource: \nseeInSource\n\n\nform: \nseeCheckboxIsChecked\n, \nselectOption\n to support multiple selects\n\n\nkeyboard: \nappendField\n, \npressKey\n\n\nmouse: \nrightClick\n\n\ntests added\n\n\n[WebDriverIO] proxy configuration added by @petehouston\n\n\n[WebDriverIO] fixed \nwaitForText\n method by @roadhump. Fixes #11\n\n\nFixed creating output dir when it already exists on init by @alfirin\n\n\nFixed loading of custom helpers", 
            "title": "Releases"
        }, 
        {
            "location": "/changelog/#140", 
            "text": "Allure Reporter Integration . Full inegration with Allure Server. Get nicely looking UI for tests,including steps, nested steps, and screenshots. Thanks  Natarajan Krishnamurthy @krish  for sponsoring this feature.  Plugins API introduced . Create custom plugins for CodeceptJS by hooking into event dispatcher, and using promise recorder.  Official  CodeceptJS plugins  added :  stepByStepReport  - creates nicely looking report to see test execution as a slideshow . Use this plugin to debug tests in headless environment without recording a video.  allure  - Allure reporter added as plugin.  screenshotOnFail  - saves screenshot on fail. Replaces similar functionality from helpers.  retryFailedStep  - to rerun each failed step.    [Puppeteer] Fix  executeAsyncScript  unexpected token by @jonathanz  Added  override  option to  run-multiple  command by @svarlet", 
            "title": "1.4.0"
        }, 
        {
            "location": "/changelog/#133", 
            "text": "Added  initGlobals()  function to API of  custom runner .", 
            "title": "1.3.3"
        }, 
        {
            "location": "/changelog/#132", 
            "text": "Interactve Shell improvements for  pause()  Added  next  command for  step-by-step debug  when using  pause() .  Use  After(pause);  in a to start interactive console after last step.    [Puppeteer] Updated to Puppeteer 1.6.0  Added  waitForRequest  to wait for network request.  Added  waitForResponse  to wait for network response.    Improved TypeScript definitions to support custom steps and page objects. By @xt1  Fixed XPath detection to accept XPath which starts with  ./  by @BenoitZugmeyer", 
            "title": "1.3.2"
        }, 
        {
            "location": "/changelog/#131", 
            "text": "BDD-Gherkin: Fixed running async steps.  [Puppeteer] Fixed process hanging for 30 seconds. Page loading timeout default via  getPageTimeout  set 0 seconds.  [Puppeteer] Improved displaying client-side console messages in debug mode.  [Puppeteer] Fixed closing sessions in  restart:false  mode for multi-session mode.  [Protractor] Fixed  grabPopupText  to not throw error popup is not opened.  [Protractor] Added info on using 'direct' Protractor driver to helper documentation by @xt1.  [WebDriverIO] Added a list of all special keys to WebDriverIO helper by @davertmik and @xt1.  Improved TypeScript definitions generator by @xt1", 
            "title": "1.3.1"
        }, 
        {
            "location": "/changelog/#130", 
            "text": "Cucumber-style BDD. Introduced  Gherkin support . Thanks to  David Vins  and  Omedym  for sponsoring this feature .   Basic feature file:  Feature: Business rules\n  In order to achieve my goals\n  As a persona\n  I want to be able to interact with a system\n\n  Scenario: do anything in my life\n    Given I need to open Google  Step definition:  const I = actor();\n\nGiven('I need to open Google', () =  {\n  I.amOnPage('https://google.com');\n});  Run it with  --features --steps  flag:  codeceptjs run --steps --features    Brekaing Chnage   run  command now uses relative path + test name to run exactly one test file.   Previous behavior (removed):  codeceptjs run basic_test.js  Current behavior (relative path to config + a test name)  codeceptjs run tests/basic_test.js  This change allows using auto-completion when running a specific test.    Nested steps output enabled for page objects.  to see high-level steps only run tests with  --steps  flag.  to see PageObjects implementation run tests with  --debug .    PageObjects simplified to remove  _init()  extra method. Try updated generators and see  updated guide .  [Puppeteer]  Multiple sessions  enabled. Requires Puppeteer  = 1.5  [Puppeteer] Stability improvement. Waits for for  load  event on page load. This strategy can be changed in config:  waitForNavigation  config option introduced. Possible options:  load ,  domcontentloaded ,  networkidle0 ,  networkidle2 . See  Puppeteer API  getPageTimeout  config option to set maximum navigation time in milliseconds. Default is 30 seconds.  waitForNavigation  method added. Explicitly waits for navigation to be finished.    [WebDriverIO][Protractor][Puppeteer][Nightmare]  Possible BC   grabTextFrom  unified. Return a text for single matched element and an array of texts for multiple elements.  [Puppeteer]Fixed  resizeWindow  by @sergejkaravajnij  [WebDriverIO][Protractor][Puppeteer][Nightmare]  waitForFunction  added. Waits for client-side JavaScript function to return true by @GREENpoint.  [Puppeteer]  waitUntil  deprecated in favor of  waitForFunction .  Added  filter  function to DataTable.  Send non-nested array of files to custom parallel execution chunking by @mikecbrant.  Fixed invalid output directory path for run-multiple by @mikecbrant.  [WebDriverIO]  waitUntil  timeout accepts time in seconds (as all other wait* functions). Fix by @truesrc.  [Nightmare] Fixed  grabNumberOfVisibleElements  to work similarly to  seeElement . Thx to @stefanschenk and Jinbo Jinboson.  [Protractor] Fixed alert handling error with message 'no such alert' by @truesrc.", 
            "title": "1.3.0"
        }, 
        {
            "location": "/changelog/#121", 
            "text": "Fixed running  I.retry()  on multiple steps.  Fixed parallel execution wih chunks.  [Puppeteer] Fixed  grabNumberOfVisibleElements  to return  0  instead of throwing error if no elements are found.", 
            "title": "1.2.1"
        }, 
        {
            "location": "/changelog/#120", 
            "text": "[WebDriverIO][Protractor] Multiple Sessions . Run several browser sessions in one test. Introduced  session  command, which opens additional browser window and closes it after a test.   Scenario('run in different browsers', (I) =  {\n  I.amOnPage('/hello');\n  I.see('Hello!');\n  session('john', () =  {\n    I.amOnPage('/bye');\n    I.dontSee('Hello');\n    I.see('Bye');\n  });\n  I.see('Hello');\n});   Parallel Execution  by @sveneisenschmidt. Run tests in parallel specifying number of chunks:   multiple : {\n   parallel : {\n    // run in 2 processes\n     chunks : 2,\n    // run all tests in chrome\n     browsers : [ chrome ]\n  },\n}   Locator Builder . Write complex locators with simplest API combining CSS and XPath:   // select 'Edit' link inside 2nd row of a table\nlocate('//table')\n  .find('tr')\n  .at(2)\n  .find('a')\n  .withText('Edit');   Dynamic configuration  to update helpers config per test or per suite.  Added  event.test.finished  which fires synchronously for both failed and passed tests.  [WebDriverIO][Protractor][Nightmare][Puppeteer] Full page screenshots on failure disabled by default. See  issue #1600 . You can enabled them with  fullPageScreenshots: true , however they may work unstable in Selenium.  within  blocks can return values. See  updated documentation .  Removed doublt call to  _init  in helpers. Fixes issue  #1036  Added scenario and feature configuration via fluent API:   Feature('checkout')\n  .timeout(3000)\n  .retry(2);\n\nScenario('user can order in firefox', (I) =  {\n  // see dynamic configuration\n}).config({ browser: 'firefox' })\n  .timeout(20000);\n\nScenario('this test should throw error', (I) =  {\n  // I.amOnPage\n}).throws(new Error);", 
            "title": "1.2.0"
        }, 
        {
            "location": "/changelog/#118", 
            "text": "Fixed generating TypeScript definitions with  codeceptjs def .  Added Chinese translation (\"zh-CN\" and \"zh-TW\") by @TechQuery.  Fixed running tests from a different folder specified by  -c  option.  [Puppeteer] Added support for hash handling in URL by @gavoja.  [Puppeteer] Fixed setting viewport size by @gavoja. See  Puppeteer issue", 
            "title": "1.1.8"
        }, 
        {
            "location": "/changelog/#117", 
            "text": "Docker Image updateed.  See updated reference :  codeceptjs package is mounted as  /codecept  insde container  tests directory is expected to be mounted as  /tests  codeceptjs  global runner added (symlink to  /codecept/bin/codecept.js )    [Protractor] Functions added by @reubenmiller:  _locateCheckable (only available from other helpers)  _locateClickable (only available from other helpers)  _locateFields (only available from other helpers)  acceptPopup  cancelPopup  dragAndDrop  grabBrowserLogs  grabCssPropertyFrom  grabHTMLFrom  grabNumberOfVisibleElements  grabPageScrollPosition (new)  rightClick  scrollPageToBottom  scrollPageToTop  scrollTo  seeAttributesOnElements  seeCssPropertiesOnElements  seeInPopup  seeNumberOfVisibleElements  switchTo  waitForEnabled  waitForValue  waitInUrl  waitNumberOfVisibleElements  waitToHide  waitUntil  waitUrlEquals    [Nightmare] added:  grabPageScrollPosition  (new)  seeNumberOfVisibleElements  waitToHide    [Puppeteer] added:  grabPageScrollPosition  (new)    [WebDriverIO] added\"  grabPageScrollPosition  (new)    [Puppeteer] Fixed running wait* functions without setting  sec  parameter.  [Puppeteer][Protractor] Fixed bug with I.click when using an object selector with the xpath property. By @reubenmiller  [WebDriverIO][Protractor][Nightmare][Puppeteer] Fixed I.switchTo(0) and I.scrollTo(100, 100) api inconsistencies between helpers.  [Protractor] Fixing bug when  seeAttributesOnElements  and  seeCssPropertiesOnElement  were incorrectly passing when the attributes/properties did not match by @reubenmiller  [WebDriverIO] Use inbuilt dragAndDrop function (still doesn't work in Firefox). By @reubenmiller  Support for Nightmare 3.0  Enable glob patterns in  config.test  /  Codecept.loadTests  by @sveneisenschmidt  Enable overriding of  config.tests  for  run-multiple  by @sveneisenschmidt", 
            "title": "1.1.7"
        }, 
        {
            "location": "/changelog/#116", 
            "text": "Added support for  async I =  functions syntax in Scenario by @APshenkin  [WebDriverIO][Protractor][Puppeteer][Nightmare]  waitForInvisible  waits for element to hide or to be removed from page. By @reubenmiller  [Protractor][Puppeteer][Nightmare] Added  grabCurrentUrl  function. By @reubenmiller  [WebDriverIO]  grabBrowserUrl  deprecated in favor of  grabCurrentUrl  to unify the API.  [Nightmare] Improved element visibility detection by @reubenmiller  [Puppeteer] Fixing function calls when clearing the cookies and localstorage. By @reubenmiller  [Puppeteer] Added  waitForEnabled ,  waitForValue  and  waitNumberOfVisibleElements  methods by @reubenmiller  [WebDriverIO] Fixed  grabNumberOfVisibleElements  to return 0 when no visible elements are on page. By @michaltrunek  Helpers API improvements (by @reubenmiller)  _passed  hook runs after a test passed successfully  _failed  hook runs on a failed test    Hooks API. New events added by @reubenmiller:  event.all.before  - executed before all tests  event.all.after  - executed after all tests  event.multiple.before  - executed before all processes in run-multiple  event.multiple.after  - executed after all processes in run-multiple    Multiple execution  Allow  AfterSuite  and  After  test hooks to be defined after the first Scenario. By @reubenmiller  [Nightmare] Prevent  I.amOnpage  navigation if the browser is already at the given url  Multiple-Run: Added new  bootstrapAll  and  teardownAll  hooks to be executed before and after all processes  codeceptjs def  command accepts  --config  option. By @reubenmiller", 
            "title": "1.1.6"
        }, 
        {
            "location": "/changelog/#115", 
            "text": "[Puppeteer] Rerun steps failed due to \"Cannot find context with specified id\" Error.  Added syntax to retry a single step:   // retry action once on failure\nI.retry().see('Hello');\n\n// retry action 3 times on failure\nI.retry(3).see('Hello');\n\n// retry action 3 times waiting for 0.1 second before next try\nI.retry({ retries: 3, minTimeout: 100 }).see('Hello');\n\n// retry action 3 times waiting no more than 3 seconds for last retry\nI.retry({ retries: 3, maxTimeout: 3000 }).see('Hello');\n\n// retry 2 times if error with message 'Node not visible' happens\nI.retry({\n  retries: 2,\n  when: err =  err.message === 'Node not visible'\n}).seeElement('#user');   Scenario().injectDependencies  added to dynamically add objects into DI container by @Apshenkin. See  Dependency Injection section in PageObjects .  Fixed using async/await functions inside  within  [WebDriverIO][Protractor][Puppeteer][Nightmare]  waitUntilExists  deprecated  in favor of  waitForElement  [WebDriverIO][Protractor]  waitForStalenessOf  deprecated  in favor of  waitForDetached  [WebDriverIO][Protractor][Puppeteer][Nightmare]  waitForDetached  added  [Nightmare] Added  I.seeNumberOfElements()  by @pmoncadaisla  [Nightmare] Load blank page when starting nightmare so that the .evaluate function will work if _failed/saveScreenshot is triggered by @reubenmiller  Fixed using plain arrays for data driven tests by @reubenmiller  [Puppeteer] Use default tab instead of opening a new tab when starting the browser by @reubenmiller  [Puppeteer] Added  grabNumberOfTabs  function by @reubenmiller  [Puppeteer] Add ability to set user-agent by @abidhahmed  [Puppeteer] Add keepCookies and keepBrowserState @abidhahmed  [Puppeteer] Clear value attribute instead of innerhtml for TEXTAREA by @reubenmiller  [REST] fixed sending string payload by @michaltrunek  Fixed unhandled rejection in async/await tests by @APshenkin", 
            "title": "1.1.5"
        }, 
        {
            "location": "/changelog/#114", 
            "text": "Removed  yarn  call in package.json  Fixed  console.log  in Puppeteer by @othree  [Appium]  runOnAndroid  and  runOnIOS  can receive a function to check capabilities dynamically:   I.runOnAndroid(caps =  caps.platformVersion  = 7, () =  {\n  // run code only on Android 7+\n});", 
            "title": "1.1.4"
        }, 
        {
            "location": "/changelog/#113", 
            "text": "[Puppeteer] +25 Functions added by @reubenmiller  _locateCheckable  _locateClickable  _locateFields  closeOtherTabs  dragAndDrop  grabBrowserLogs  grabCssPropertyFrom  grabHTMLFrom  grabNumberOfVisibleElements  grabSource  rightClick  scrollPageToBottom  scrollPageToTop  scrollTo  seeAttributesOnElements  seeCssPropertiesOnElements  seeInField  seeNumberOfElements  seeNumberOfVisibleElements  seeTextEquals  seeTitleEquals  switchTo  waitForInvisible  waitInUrl  waitUrlEquals    [Protractor] +8 functions added by @reubenmiller  closeCurrentTab  grabSource  openNewTab  seeNumberOfElements  seeTextEquals  seeTitleEquals  switchToNextTab  switchToPreviousTab    [Nightmare]  waitForInvisible  added by @reubenmiller  [Puppeteer] Printing console.log information in debug mode.  [Nightmare] Integrated with  nightmare-har-plugin  by mingfang. Added  enableHAR  option. Added HAR functions:  grabHAR  saveHAR  resetHAR    [WebDriverIO] Fixed execution stability for parallel requests with Chromedriver  [WebDriverIO] Fixed resizeWindow when resizing to 'maximize' by @reubenmiller  [WebDriverIO] Fixing resizing window to full screen when taking a screenshot by @reubenmiller", 
            "title": "1.1.3"
        }, 
        {
            "location": "/changelog/#112", 
            "text": "[Puppeteer] Upgraded to Puppeteer 1.0  Added  grep  option to config to set default matching pattern for tests.  [Puppeteer] Added  acceptPopup ,  cancelPopup ,  seeInPopup  and  grabPopupText  functions by @reubenmiller  [Puppeteer]  within  iframe and nested iframe support added by @reubenmiller  [REST] Added support for JSON objects since payload (as a JSON) was automatically converted into \"URL query\" type of parameter by @Kalostrinho  [REST] Added  resetRequestHeaders  method by @Kalostrinho  [REST] Added  followRedirect  option and  amFollowingRequestRedirects / amNotFollowingRequestRedirects  methods by @Kalostrinho  [WebDriverIO]  uncheckOption  implemented by @brunobg  [WebDriverIO] Added  grabBrowserUrl  by @Kalostrinho  Add ability to require helpers from node_modules by @APshenkin  Added  --profile  option to  run-multiple  command by @jamie-beck  Custom output name for multiple browser run by @tfiwm  Fixed passing data to scenarios by @KennyRules", 
            "title": "1.1.2"
        }, 
        {
            "location": "/changelog/#111", 
            "text": "[WebDriverIO] fixed  waitForInvisible  by @Kporal", 
            "title": "1.1.1"
        }, 
        {
            "location": "/changelog/#110", 
            "text": "Major update to CodeceptJS.  NodeJS v 8.9.1  is now minimal Node version required.\nThis brings native async-await support to CodeceptJS. It is recommended to start using await for tests instead of generators:  async () =  {\n  I.amOnPage('/page');\n  const url = await I.grabTextFrom('.nextPage');\n  I.amOnPage(url);\n}  Thanks to  @Apshenkin  for implementation. Also, most helpers were refactored to use async-await. This made our code simpler. We hope that this encourages more users to send pull requests!  We also introduced strict ESLint policies for our codebase. Thanks to  @Galkin  for that.   [Puppeteer] Helper introduced .  Learn how to run tests headlessly with Google Chrome's Puppeteer .  [SeleniumWebdriver] Helper is deprecated, it is recommended to use Protractor with config option  angular: false  instead.  [WebDriverIO] nested iframe support in the within block by @reubenmiller. Example:   within({frame: ['#wrapperId', '[name=content]']}, () =  {\n  I.click('Sign in!');\n  I.see('Email Address');\n});\nI.see('Nested Iframe test');\nI.dontSee('Email Address');\n});   [WebDriverIO] Support for  ~  locator to find elements by  aria-label . This behavior is similar as it is in Appium and helps testing cross-platform React apps. Example:   Text accessibilityLabel= foobar \n    CodeceptJS is awesome /Text   \u2191 This element can be located with  ~foobar  in WebDriverIO and Appium helpers. Thanks to @flyskywhy   Allow providing arbitrary objects in config includes by @rlewan  [REST] Prevent from mutating default headers by @alexashley. See  #789  [REST] Fixed sending empty helpers with  haveRequestHeaders  in  sendPostRequest . By @petrisorionel  Fixed displaying undefined args in output by @APshenkin  Fixed NaN instead of seconds in output by @APshenkin  Add browser name to report file for  multiple-run  by @trollr  Mocha updated to 4.x", 
            "title": "1.1.0"
        }, 
        {
            "location": "/changelog/#103", 
            "text": "[WebDriverIO][Protractor][Nightmare] method  waitUntilExists  implemented by @sabau  Absolute path can be set for  output  dir by @APshenkin. Fix  #571  Data table rows can be ignored by using  xadd . By @APhenkin  Added  Data(table).only.Scenario  to give ability to launch only Data tests. By @APhenkin  Implemented  ElementNotFound  error by @BorisOsipov.  Added TypeScript compiler / configs to check the JavaScript by @KennyRules  [Nightmare] fix executeScript return value by @jploskonka  [Nightmare] fixed: err.indexOf not a function when waitForText times out in nightmare by @joeypedicini92  Fixed: Retries not working when using .only. By @APhenkin", 
            "title": "1.0.3"
        }, 
        {
            "location": "/changelog/#102", 
            "text": "Introduced generators support in scenario hooks for  BeforeSuite / Before / AfterSuite / After  [ApiDataFactory] Fixed loading helper;  requireg  package included.  Fix  #485   run-multiple : the first browser-resolution combination was be used in all configurations  Fixed unique test names:  Fixed  #447 : tests failed silently if they have the same name as other tests.  Use uuid in screenshot names when  uniqueScreenshotNames: true  [Protractor] Fixed testing non-angular application.  amOutsideAngularApp  is executed before each step. Fixes  #458  Added output for steps in hooks when they fail", 
            "title": "1.0.2"
        }, 
        {
            "location": "/changelog/#101", 
            "text": "Reporters improvements:  Allows to execute  multiple reporters  Added  Mochawesome  helper  addMochawesomeContext  method to add custom data to mochawesome reports  Fixed Mochawesome context for failed screenshots.  [WebDriverIO] improved click on context to match clickable element with a text inside. Fixes  #647  [Nightmare] Added  refresh  function by @awhanks  fixed  Unhandled promise rejection (rejection id: 1): Error: Unknown wait type: pageLoad  support for tests with retries in html report  be sure that change window size and timeouts completes before test  [Nightmare] Fixed  [Wrapped Error] \"codeceptjs is not defined\" ; Reinjectiing client scripts to a webpage on changes.  [Nightmare] Added more detailed error messages for  Wait*  methods  [Nightmare] Fixed adding screenshots to Mochawesome  [Nightmare] Fix unique screenshots names in Nightmare  Fixed CodeceptJS work with hooks in helpers to finish codeceptJS correctly if errors appears in helpers hooks  Create a new session for next test If selenium grid error received  Create screenshots for failed hooks from a Feature file  Fixed  retries  option", 
            "title": "1.0.1"
        }, 
        {
            "location": "/changelog/#10", 
            "text": "CodeceptJS hits first stable release. CodeceptJS provides a unified API for  web testing for Webdriverio ,  Protractor , and  NightmareJS . Since 1.0 you can also  test mobile applications  in the similar manner with Appium.  Sample test:  I.seeAppIsInstalled( io.super.app );\nI.click('~startUserRegistrationCD');\nI.fillField('~email of the customer', 'Nothing special'));\nI.see('davert@codecept.io', '~email of the customer'));\nI.clearField('~email of the customer'));\nI.dontSee('Nothing special', '~email of the customer'));   Read  the Mobile Testing guide .  Discover  Appium Helper    We also introduced two new  helpers for data management .\nUsing them you can easily prepare and cleanup data for your tests using public REST API.  Sample test  // create a user using data factories and REST API\nI.have('user', { name: 'davert', password: '123456' });\n// use it to login\nI.amOnPage('/login');\nI.fillField('login', 'davert');\nI.fillField('password', '123456');\nI.click('Login');\nI.see('Hello, davert');\n// user will be removed after the test   Read  Data Management guide  REST Helper  ApiDataFactory    Next notable feature is  SmartWait  for WebDriverIO, Protractor, SeleniumWebdriver. When  smartwait  option is set, script will wait for extra milliseconds to locate an element before failing. This feature uses implicit waits of Selenium but turns them on only in applicable pieces. For instance, implicit waits are enabled for  seeElement  but disabled for  dontSeeElement   Read more about  SmartWait   Changelog   Minimal NodeJS version is 6.11.1 LTS  Use  within  command with generators.  Data Driven Tests  introduced.  Print execution time per step in  --debug  mode.  #591  by @APshenkin  [WebDriverIO][Protractor][Nightmare] Added  disableScreenshots  option to disable screenshots on fail by @Apshenkin  [WebDriverIO][Protractor][Nightmare] Added  uniqueScreenshotNames  option to generate unique names for screenshots on failure by @Apshenkin  [WebDriverIO][Nightmare] Fixed click on context;  click('text', '#el')  will throw exception if text is not found inside  #el .  [WebDriverIO][Protractor][SeleniumWebdriver]  SmartWait introduced .  [WebDriverIO][Protractor][Nightmare]Fixed  saveScreenshot  for PhantomJS,  fullPageScreenshots  option introduced by @HughZurname  #549  [Appium] helper introduced by @APshenkin  [REST] helper introduced by @atrevino in  #504  [WebDriverIO][SeleniumWebdriver] Fixed \"windowSize\": \"maximize\" for Chrome 59+ version #560 by @APshenkin  [Nightmare] Fixed restarting by @APshenkin  #581  [WebDriverIO] Methods added by @APshenkin:  grabCssPropertyFrom  seeTitleEquals  seeTextEquals  seeCssPropertiesOnElements  seeAttributesOnElements  grabNumberOfVisibleElements  waitInUrl  waitUrlEquals  waitForValue  waitNumberOfVisibleElements  switchToNextTab  switchToPreviousTab  closeCurrentTab  openNewTab  refreshPage  scrollPageToBottom  scrollPageToTop  grabBrowserLogs    Use mkdirp to create output directory.  #592  by @vkramskikh  [WebDriverIO] Fixed  seeNumberOfVisibleElements  by @BorisOsipov  #574  Lots of fixes for promise chain by @APshenkin  #568  Fix  #543  - After block not properly executed if Scenario fails  Expected behavior in promise chains:  _beforeSuite  hooks from helpers -   BeforeSuite  from test -   _before  hooks from helpers -   Before  from test -   Test steps -   _failed  hooks from helpers (if test failed) -   After  from test -   _after  hooks from helpers -   AfterSuite  from test -   _afterSuite  hook from helpers.  if during test we got errors from any hook (in test or in helper) - stop complete this suite and go to another  if during test we got error from Selenium server - stop complete this suite and go to another  [WebDriverIO][Protractor] if  restart  option is false - close all tabs expect one in  _after .  Complete  _after ,  _afterSuite  hooks even After/AfterSuite from test was failed  Don't close browser between suites, when  restart  option is false. We should start browser only one time and close it only after all tests.  Close tabs and clear local storage, if  keepCookies  flag is enabled    Fix TypeError when using babel-node or ts-node on node.js 7+  #586  by @vkramskikh  [Nightmare] fixed usage of  _locate   Special thanks to  Andrey Pshenkin  for his work on this release and the major improvements.", 
            "title": "1.0"
        }, 
        {
            "location": "/changelog/#063", 
            "text": "Errors are printed in non-verbose mode. Shows \"Selenium not started\" and other important errors.  Allowed to set custom test options:   Scenario('My scenario', { build_id: 123, type: 'slow' }, function (I)  those options can be accessed as  opts  property inside a  test  object. Can be used in custom listeners.   Added  docs  directory to a package.  [WebDriverIO][Protractor][SeleniumWebdriver] Bugfix: cleaning session when  restart: false  by @tfiwm  #519  [WebDriverIO][Protractor][Nightmare] Added second parameter to  saveScreenshot  to allow a full page screenshot. By @HughZurname  Added suite object to  suite.before  and  suite.after  events by @implico.  #496", 
            "title": "0.6.3"
        }, 
        {
            "location": "/changelog/#062", 
            "text": "Added  config  object to  public API  Extended  index.js  to include  actor  and  helpers , so they could be required:   const actor = require('codeceptjs').actor;   Added  example for creating custom runner  with public API.  run command to create  output  directory if it doesn't exist  [Protractor] fixed loading globally installed Protractor  run-multiple command improvements:  create output directories for each process  print process ids in output", 
            "title": "0.6.2"
        }, 
        {
            "location": "/changelog/#061", 
            "text": "Fixed loading hooks", 
            "title": "0.6.1"
        }, 
        {
            "location": "/changelog/#060", 
            "text": "Major release with extension API and parallel execution.   Breaking  Removed path argument from  run . To specify path other than current directory use  --config  or  -c  option:   Instead of:  codeceptjs run tests  use:  # load config and run from tests directory\ncodeceptjs run -c tests/\n\n# or load codecept.json from tests directory\ncodeceptjs run -c tests/codecept.json\n\n# run users_test.js inside tests directory\ncodeceptjs run users_test.js -c tests   Command  multiple-run  added , to execute tests in several browsers in parallel by @APshenkin and @davertmik.  See documentation .  Hooks API added to extend CodeceptJS  with custom listeners and plugins.  See documentation .  [Nightmare][WebDriverIO]  within  can work with iframes by @imvetri.  See documentation .  [WebDriverIO][SeleniumWebdriver][Protractor] Default browser changed to  chrome  [Nightmare] Fixed globally locating  nightmare-upload .  [WebDriverIO] added  seeNumberOfVisibleElements  method by @elarouche.  Exit with non-zero code if init throws an error by @rincedd  New guides published:  Installation  Hooks  Advanced Usage    Meta packages published:  codecept-webdriverio  codecept-protractor  codecept-nightmare", 
            "title": "0.6.0"
        }, 
        {
            "location": "/changelog/#051", 
            "text": "Polish translation  added by @limes.  Update process exit code so that mocha saves reports before exit by @romanovma.  [Nightmare] fixed  getAttributeFrom  for custom attributes by @robrkerr  [Nightmare] Fixed  UnhandledPromiseRejectionWarning error  when selecting the dropdown using  selectOption  by @robrkerr.  See PR .  [Protractor] fixed  pressKey  method by @romanovma", 
            "title": "0.5.1"
        }, 
        {
            "location": "/changelog/#050", 
            "text": "Protractor ^5.0.0 support (while keeping ^4.0.9 compatibility)  Fix 'fullTitle() is not a function' in exit.js by @hubidu. See  #388 .  [Nightmare] Fix for  waitTimeout  by @HughZurname. See  #391 . Resolves  #236  Dockerized CodeceptJS setup by @artiomnist.  See reference", 
            "title": "0.5.0"
        }, 
        {
            "location": "/changelog/#0416", 
            "text": "Fixed steps output synchronization (regression since 0.4.14).  [WebDriverIO][Protractor][SeleniumWebdriver][Nightmare] added  keepCookies  option to keep cookies between tests with  restart: false .  [Protractor] added  waitForTimeout  config option to set default waiting time for all wait* functions.  Fixed  _test  hook for helpers by @cjhille.", 
            "title": "0.4.16"
        }, 
        {
            "location": "/changelog/#0415", 
            "text": "Fixed regression in recorder sessions:  oldpromise is not defined .", 
            "title": "0.4.15"
        }, 
        {
            "location": "/changelog/#0414", 
            "text": "_beforeStep  and  _afterStep  hooks in helpers are synchronized. Allows to perform additional actions between steps.   Example: fail if JS error occur in custom helper using WebdriverIO:  _before() {\n  this.err = null;\n  this.helpers['WebDriverIO'].browser.on('error', (e) =  this.err = e);\n}\n\n_afterStep() {\n if (this.err) throw new Error('Browser JS error '+this.err);\n}  Example: fail if JS error occur in custom helper using Nightmare:  _before() {\n  this.err = null;\n  this.helpers['Nightmare'].browser.on('page', (type, message, stack) =  {\n    this.err = `${message} ${stack}`;\n  });\n}\n\n_afterStep() {\n if (this.err) throw new Error('Browser JS error '+this.err);\n}   Fixed  codecept list  and  codecept def  commands.  Added  I.say  method to print arbitrary comments.   I.say('I am going to publish post');\nI.say('I enter title and body');\nI.say('I expect post is visible on site');   [Nightmare]  restart  option added.  restart: false  allows to run all tests in a single window, disabled by default. By @nairvijays99  [Nightmare] Fixed  resizeWindow  command.  [Protractor][SeleniumWebdriver] added  windowSize  config option to resize window on start.  Fixed \"Scenario.skip causes 'Cannot read property retries of undefined'\" by @MasterOfPoppets  Fixed providing absolute paths for tests in config by @lennym", 
            "title": "0.4.14"
        }, 
        {
            "location": "/changelog/#0413", 
            "text": "Added  retries  option  Feature  and  Scenario  to rerun fragile tests:   Feature('Complex JS Stuff', {retries: 3});\n\nScenario('Not that complex', {retries: 1}, (I) =  {\n  // test goes here\n});   Added  timeout  option  Feature  and  Scenario  to specify timeout.   Feature('Complex JS Stuff', {timeout: 5000});\n\nScenario('Not that complex', {timeout: 1000}, (I) =  {\n  // test goes here\n});   [WebDriverIO] Added  uniqueScreenshotNames  option to set unique screenshot names for failed tests. By @APshenkin. See  #299  [WebDriverIO]  clearField  method improved to accept name/label locators and throw errors.  [Nightmare][SeleniumWebdriver][Protractor]  clearField  method added.  [Nightmare] Fixed  waitForElement , and  waitForVisible  methods.  [Nightmare] Fixed  resizeWindow  by @norisk-it  Added italian  translation .", 
            "title": "0.4.13"
        }, 
        {
            "location": "/changelog/#0412", 
            "text": "Bootstrap / Teardown improved with  Hooks . Various options for setup/teardown provided.  Added  --override  or  -o  option for runner to dynamically override configs. Valid JSON should be passed:   codeceptjs run -o '{  bootstrap :  bootstrap.js }'\ncodeceptjs run -o '{  helpers : { WebDriverIO : { browser :  chrome }}}'   Added  regression tests  for codeceptjs tests runner.", 
            "title": "0.4.12"
        }, 
        {
            "location": "/changelog/#0411", 
            "text": "Fixed regression in 0.4.10  Added  bootstrap / teardown  config options to accept functions as parameters by @pscanf. See updated  config reference  #319", 
            "title": "0.4.11"
        }, 
        {
            "location": "/changelog/#0410", 
            "text": "[Protractor] Protrctor 4.0.12+ support.  Enabled async bootstrap file by @abachar. Use inside  bootstrap.js :   module.exports = function(done) {\n  // async instructions\n  // call done() to continue execution\n  // otherwise call done('error description')\n}   Changed 'pending' to 'skipped' in reports by @timja-kainos. See #315", 
            "title": "0.4.10"
        }, 
        {
            "location": "/changelog/#049", 
            "text": "[SeleniumWebdriver][Protractor][WebDriverIO][Nightmare] fixed  executeScript ,  executeAsyncScript  to work and return values.  [Protractor][SeleniumWebdriver][WebDriverIO] Added  waitForInvisible  and  waitForStalenessOf  methods by @Nighthawk14.  Added  --config  option to  codeceptjs run  to manually specify config file by @cnworks  [Protractor] Simplified behavior of  amOutsideAngularApp  by using  ignoreSynchronization . Fixes #278  Set exit code to 1 when test fails at  Before / After  hooks. Fixes #279", 
            "title": "0.4.9"
        }, 
        {
            "location": "/changelog/#048", 
            "text": "[Protractor][SeleniumWebdriver][Nightmare] added  moveCursorTo  method.  [Protractor][SeleniumWebdriver][WebDriverIO] Added  manualStart  option to start browser manually in the beginning of test. By @cnworks.  PR #250  Fixed  codeceptjs init  to work with nested directories and file masks.  Fixed  codeceptjs gt  to generate test with proper file name suffix. By @Zougi.  [Nightmare] Fixed: Error is thrown when clicking on element which can't be locate. By @davetmik  [WebDriverIO] Fixed  attachFile  for file upload. By @giuband and @davetmik  [WebDriverIO] Add support for timeouts in config and with  defineTimeouts  method. By @easternbloc  #258  and  #267  by @davetmik  Fixed hanging of CodeceptJS when error is thrown by event dispatcher. Fix by @Zougi and @davetmik", 
            "title": "0.4.8"
        }, 
        {
            "location": "/changelog/#047", 
            "text": "Improved docs for  BeforeSuite ; fixed its usage with  restart: false  option by @APshenkin.  Added  Nightmare  to list of available helpers on  init .  [Nightmare] Removed double  resizeWindow  implementation.", 
            "title": "0.4.7"
        }, 
        {
            "location": "/changelog/#046", 
            "text": "Added  BeforeSuite  and  AfterSuite  hooks to scenario by @APshenkin. See  updated documentation", 
            "title": "0.4.6"
        }, 
        {
            "location": "/changelog/#045", 
            "text": "Fixed running  codecept def  command by @jankaspar  [Protractor][SeleniumWebdriver] Added support for special keys in  pressKey  method. Fixes #216", 
            "title": "0.4.5"
        }, 
        {
            "location": "/changelog/#044", 
            "text": "Interactive shell fixed. Start it by running  codeceptjs shell  Added  --profile  option to  shell  command to use dynamic configuration.  Added  --verbose  option to  shell  command for most complete output.", 
            "title": "0.4.4"
        }, 
        {
            "location": "/changelog/#043", 
            "text": "[Protractor] Regression fixed to ^4.0.0 support  Translations included into package.  teardown  option added to config (opposite to  bootstrap ), expects a JS file to be executed after tests stop.  Configuration  can be set via JavaScript file  codecept.conf.js  instead of  codecept.json . It should export  config  object:   // inside codecept.conf.js\nexports.config = {\n  // contents of codecept.json\n}   Added  --profile  option to pass its value to  codecept.conf.js  as  process.profile  for  dynamic configuration .  Documentation for  StepObjects, PageFragments  updated.  Documentation for  Configuration  added.", 
            "title": "0.4.3"
        }, 
        {
            "location": "/changelog/#042", 
            "text": "Added ability to localize tests with translation  #189 . Thanks to @abner  [Translation] ru-RU translation added.  [Translation] pt-BR translation added.  [Protractor] Protractor 4.0.4 compatibility.  [WebDriverIO][SeleniumWebdriver][Protractor] Fixed single browser session  mode for  restart: false  Fixed using of 3rd party reporters (xunit, mocha-junit-reporter, mochawesome). Added guide.  Documentation for  Translation  added.  Documentation for  Reports  added.", 
            "title": "0.4.2"
        }, 
        {
            "location": "/changelog/#041", 
            "text": "Added custom steps to step definition list. See #174 by @jayS-de  [WebDriverIO] Fixed using  waitForTimeout  option by @stephane-ruhlmann. See #178", 
            "title": "0.4.1"
        }, 
        {
            "location": "/changelog/#040", 
            "text": "Nightmare  Helper  added for faster web testing.  [Protractor][SeleniumWebdriver][WebDriverIO] added  restart: false  option to reuse one browser between tests (improves speed).  Protractor 4.0  compatibility. Please upgrade Protractor library.  Added  --verbose  option for  run  command to log and print global promise and events.  Fixed errors with shutting down and cleanup.  Fixed starting interactive shell with  codeceptjs shell .  Fixed handling of failures inside within block", 
            "title": "0.4.0"
        }, 
        {
            "location": "/changelog/#035", 
            "text": "Introduced IDE autocompletion support for Visual Studio Code and others. Added command for generating TypeScript definitions for  I  object. Use it as   codeceptjs def  to generate steps definition file and include it into tests by reference. By @kaflan", 
            "title": "0.3.5"
        }, 
        {
            "location": "/changelog/#034", 
            "text": "[Protractor] version 3.3.0 comptaibility, NPM 3 compatibility. Please update Protractor!  allows using absolute path for helpers, output, in config and in command line. By @denis-sokolov  Fixes 'Cannot read property '1' of null in generate.js:44' by @seethislight", 
            "title": "0.3.4"
        }, 
        {
            "location": "/changelog/#033", 
            "text": "Fixed global installation . CodeceptJS can now locate globally located modules.\nCodeceptJS is also recommended for local installation.\nDepending on installation type additional modules (webdriverio, protractor, ...) will be loaded either from local or from global path.", 
            "title": "0.3.3"
        }, 
        {
            "location": "/changelog/#032", 
            "text": "Added  codeceptjs list  command which shows all available methods of  I  object.  [Protractor][SeleniumWebdriver] fixed closing browser instances  [Protractor][SeleniumWebdriver]  doubleClick  method added  [WebDriverIO][Protractor][SeleniumWebdriver]  doubleClick  method to locate clickable elements by text,  context  option added.  Fixed using assert in generator without yields #89", 
            "title": "0.3.2"
        }, 
        {
            "location": "/changelog/#031", 
            "text": "Fixed  init  command", 
            "title": "0.3.1"
        }, 
        {
            "location": "/changelog/#030", 
            "text": "Breaking Change : webdriverio package removed from dependencies list. You will need to install it manually after the upgrade.\nStarting from 0.3.0 webdriverio is not the only backend for running selenium tests, so you are free to choose between Protractor, SeleniumWebdriver, and webdriverio and install them.   [Protractor] helper added . Now you can test AngularJS applications by using its official library within the unigied CodeceptJS API!  [SeleniumWebdriver] helper added . You can switch to official JS bindings for Selenium.  [WebDriverIO]  updated to webdriverio v 4.0  [WebDriverIO]  clearField  method added by @fabioel  [WebDriverIO] added  dragAndDrop  by @fabioel  [WebDriverIO] fixed  scrollTo  method by @sensone  [WebDriverIO] fixed  windowSize: maximize  option in config  [WebDriverIO]  seeElement  and  dontSeeElement  check element for visibility by @fabioel and @davertmik  [WebDriverIO]  seeElementInDOM ,  dontSeeElementInDOM  added to check element exists on page.  [WebDriverIO] fixed saving screenshots on failure. Fixes #70  fixed  within  block doesn't end in output not #79", 
            "title": "0.3.0"
        }, 
        {
            "location": "/changelog/#028", 
            "text": "[WebDriverIO] added  seeNumberOfElements  by @fabioel", 
            "title": "0.2.8"
        }, 
        {
            "location": "/changelog/#027", 
            "text": "process ends with exit code 1 on error or failure #49  fixed registereing global Helper #57  fixed handling error in within block #50", 
            "title": "0.2.7"
        }, 
        {
            "location": "/changelog/#026", 
            "text": "Fixed  done() was called multiple times  [WebDriverIO] added  waitToHide  method by @fabioel  Added global  Helper  (alias  codecept_helper) , object use for writing custom Helpers. Generator updated. Changes to #48", 
            "title": "0.2.6"
        }, 
        {
            "location": "/changelog/#025", 
            "text": "Fixed issues with using yield inside a test #45 #47 #43  Fixed generating a custom helper. Helper class is now accessible with  codecept_helper  var. Fixes #48", 
            "title": "0.2.5"
        }, 
        {
            "location": "/changelog/#024", 
            "text": "Fixed accessing helpers from custom helper by @pim.", 
            "title": "0.2.4"
        }, 
        {
            "location": "/changelog/#023", 
            "text": "[WebDriverIO] fixed  seeInField  to work with single value elements like: input[type=text], textareas, and multiple: select, input[type=radio], input[type=checkbox]  [WebDriverIO] fixed  pressKey , key modifeiers (Control, Command, Alt, Shift) are released after the action", 
            "title": "0.2.3"
        }, 
        {
            "location": "/changelog/#022", 
            "text": "Fixed generation of custom steps file and page objects.\nPlease replace  require('codeceptjs/actor')  to  actor  in your  custom_steps.js .\nWhenever you need to create  I  object (in page objects, custom steps, but not in tests) just call  actor() ;", 
            "title": "0.2.2"
        }, 
        {
            "location": "/changelog/#020", 
            "text": "within  context hook added  --reporter  option supported  [WebDriverIO] added features and methods:  elements:  seeElement , ...  popups:  acceptPopup ,  cancelPopup ,  seeInPopup ,...  navigation:  moveCursorTo ,  scrollTo  saving screenshots on failure;  saveScreenshot  cookies:  setCookie ,  seeCookie , ...  source:  seeInSource  form:  seeCheckboxIsChecked ,  selectOption  to support multiple selects  keyboard:  appendField ,  pressKey  mouse:  rightClick  tests added  [WebDriverIO] proxy configuration added by @petehouston  [WebDriverIO] fixed  waitForText  method by @roadhump. Fixes #11  Fixed creating output dir when it already exists on init by @alfirin  Fixed loading of custom helpers", 
            "title": "0.2.0"
        }
    ]
}